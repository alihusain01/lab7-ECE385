
lab71.elf:     file format elf32-littlenios2
lab71.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000e620 memsz 0x0000e620 flags r-x
    LOAD off    0x0000f640 vaddr 0x0800e640 paddr 0x08010410 align 2**12
         filesz 0x00001dd0 memsz 0x00001dd0 flags rw-
    LOAD off    0x000121e0 vaddr 0x080121e0 paddr 0x080121e0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e0c0  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  0800e2f0  0800e2f0  0000f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dd0  0800e640  08010410  0000f640  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080121e0  080121e0  000121e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00011410  2**0
                  CONTENTS
  7 .sdram        00000000  08012340  08012340  00011410  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011410  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b80  00000000  00000000  00011438  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166d2  00000000  00000000  00011fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000063b5  00000000  00000000  0002868a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008427  00000000  00000000  0002ea3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001860  00000000  00000000  00036e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032bc  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003b984  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00050a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000548ea  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000548ed  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000548f9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000548fa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000548fb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000548ff  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054903  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00054907  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00054912  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005491d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00054928  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002b  00000000  00000000  00054930  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f22  00000000  00000000  0005495b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00090be2  00000000  00000000  0005987d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800e2f0 l    d  .rodata	00000000 .rodata
0800e640 l    d  .rwdata	00000000 .rwdata
080121e0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08012340 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab71_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 palette_test.c
080103cc l     O .rwdata	00000004 vga_ctrl
0800e640 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
080103d0 l     O .rwdata	00000004 vga_ctrl
0800e7b0 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e386 l     O .rodata	00000010 zeroes.4389
0800e396 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
0800313c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0800e920 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800ed64 l     O .rwdata	00000020 lc_ctype_charset
0800ed44 l     O .rwdata	00000020 lc_message_charset
0800ed84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800e3c8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e4ec l     O .rodata	00000010 zeroes.4333
0800e4fc l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800bf34 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080103e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800c1c4 l     F .text	00000034 alt_dev_reg
0800f1c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800c4b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800c6c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800ccfc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800d1a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800d1d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d634 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d794 l     F .text	0000003c alt_get_errno
0800d7d0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08012214 g     O .bss	00000004 alt_instruction_exception_handler
08006440 g     F .text	00000074 _mprec_log10
0800652c g     F .text	0000008c __any_on
0800e3d4 g     O .rodata	00000028 __mprec_tinytens
0800c020 g     F .text	0000007c alt_main
08012240 g     O .bss	00000100 alt_irq
08010410 g       *ABS*	00000000 __flash_rwdata_start
0800a90c g     F .text	00000088 .hidden __eqdf2
08012340 g       *ABS*	00000000 __alt_heap_start
080049ec g     F .text	0000007c _setlocale_r
0800c0c0 g     F .text	00000024 __malloc_unlock
080081dc g     F .text	0000015c memmove
08005500 g     F .text	000000a8 _Balloc
0800a994 g     F .text	000000dc .hidden __gtdf2
0800dc40 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080121f8 g     O .bss	00000004 errno
0800692c g     F .text	000013a0 ___svfiprintf_internal_r
08012200 g     O .bss	00000004 alt_argv
080183cc g       *ABS*	00000000 _gp
0800c194 g     F .text	00000030 usleep
08000420 g     F .text	00000050 textVGAColorClr
0801024c g     O .rwdata	00000180 alt_fd_list
0800dc64 g     F .text	00000090 alt_find_dev
080053b8 g     F .text	00000148 memcpy
0800bd4c g     F .text	000000dc .hidden __floatsidf
0800d718 g     F .text	0000007c alt_io_redirect
0800aa70 g     F .text	000000f4 .hidden __ltdf2
0800e2f0 g       *ABS*	00000000 __DTOR_END__
0800dec0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080065b8 g     F .text	00000074 __fpclassifyd
0800639c g     F .text	000000a4 __ratio
0800c8bc g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000bc4 g     F .text	00000064 .hidden __udivsi3
0800e424 g     O .rodata	000000c8 __mprec_tens
08004a68 g     F .text	0000000c __locale_charset
080121f4 g     O .bss	00000004 __malloc_top_pad
080103dc g     O .rwdata	00000004 __mb_cur_max
08004a98 g     F .text	0000000c _localeconv_r
08005934 g     F .text	0000003c __i2b
0800662c g     F .text	00000054 _sbrk_r
080103fc g     O .rwdata	00000004 alt_max_fd
080121f0 g     O .bss	00000004 __malloc_max_sbrked_mem
08009690 g     F .text	000008ac .hidden __adddf3
08006144 g     F .text	0000010c __b2d
080090cc g     F .text	000005c4 .hidden __umoddi3
080103d4 g     O .rwdata	00000004 _global_impure_ptr
08008460 g     F .text	00000564 _realloc_r
08012340 g       *ABS*	00000000 __bss_end
0800d544 g     F .text	000000f0 alt_iic_isr_register
0800db38 g     F .text	00000108 alt_tick
08008ad0 g     F .text	000005fc .hidden __udivdi3
0800e3fc g     O .rodata	00000028 __mprec_bigtens
08005718 g     F .text	00000104 __s2b
0800be28 g     F .text	000000a8 .hidden __floatunsidf
08005e84 g     F .text	00000060 __mcmp
0800d4f8 g     F .text	0000004c alt_ic_irq_enabled
0800da9c g     F .text	0000009c alt_alarm_stop
08012208 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08010224 g     O .rwdata	00000028 alt_dev_null
0800d188 g     F .text	00000020 alt_dcache_flush_all
0800581c g     F .text	00000068 __hi0bits
0800bccc g     F .text	00000080 .hidden __fixdfsi
08010410 g       *ABS*	00000000 __ram_rwdata_end
080103f4 g     O .rwdata	00000008 alt_dev_list
0800e640 g       *ABS*	00000000 __ram_rodata_end
0800aa70 g     F .text	000000f4 .hidden __ledf2
08005bfc g     F .text	00000140 __pow5mult
080121e8 g     O .bss	00000004 __nlocale_changed
08000c28 g     F .text	00000058 .hidden __umodsi3
08012340 g       *ABS*	00000000 end
0800c3f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800e2f0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800cd74 g     F .text	0000007c alt_avalon_timer_sc_init
0800bed0 g     F .text	00000064 .hidden __clzsi2
0800cad8 g     F .text	00000224 altera_avalon_jtag_uart_write
080052d4 g     F .text	000000e4 memchr
08000d24 g     F .text	00000058 _sprintf_r
08007ecc g     F .text	00000310 _free_r
08004a74 g     F .text	00000010 __locale_mb_cur_max
0800e13c g     F .text	00000180 __call_exitprocs
080121e4 g     O .bss	00000004 __mlocale_changed
080103e0 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801220c g     O .bss	00000004 _alt_tick_rate
08000cc0 g     F .text	00000064 rand
08005d3c g     F .text	00000148 __lshift
08012210 g     O .bss	00000004 _alt_nticks
0800c230 g     F .text	00000064 alt_sys_init
0800675c g     F .text	000001d0 __ssprint_r
0800e024 g     F .text	00000118 __register_exitproc
08005970 g     F .text	0000028c __multiply
0800c764 g     F .text	00000068 altera_avalon_jtag_uart_close
08000c80 g     F .text	00000028 .hidden __mulsi3
0800e640 g       *ABS*	00000000 __ram_rwdata_start
0800e2f0 g       *ABS*	00000000 __ram_rodata_start
08012218 g     O .bss	00000028 __malloc_current_mallinfo
08006250 g     F .text	0000014c __d2b
0800c294 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ddfc g     F .text	000000c4 alt_get_fd
0800cf1c g     F .text	00000158 alt_busy_sleep
0800dfa8 g     F .text	0000007c memcmp
0800c354 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08012340 g       *ABS*	00000000 __alt_stack_base
0800c3a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009f3c g     F .text	000009d0 .hidden __divdf3
080064b4 g     F .text	00000078 __copybits
0800edbc g     O .rwdata	00000408 __malloc_av_
0800ab64 g     F .text	0000086c .hidden __muldf3
0800dcf4 g     F .text	00000108 alt_find_file
0800d210 g     F .text	000000a4 alt_dev_llist_insert
0800c09c g     F .text	00000024 __malloc_lock
0800c0e4 g     F .text	000000b0 sbrk
08000e80 g     F .text	000022bc ___svfprintf_internal_r
08007ccc g     F .text	000000dc _calloc_r
080121e0 g       *ABS*	00000000 __bss_start
08008338 g     F .text	00000128 memset
0800085c g     F .text	00000270 main
08012204 g     O .bss	00000004 alt_envp
080121ec g     O .bss	00000004 __malloc_max_total_mem
0800c2f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000ca8 g     F .text	00000018 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08003364 g     F .text	00001688 _dtoa_r
08004ac8 g     F .text	0000080c _malloc_r
08010400 g     O .rwdata	00000004 alt_errno
08000acc g     F .text	00000084 .hidden __divsi3
08000580 g     F .text	000002dc setColorPalette
08007da8 g     F .text	00000124 _malloc_trim_r
0800e2f0 g       *ABS*	00000000 __CTOR_END__
08006680 g     F .text	000000dc strcmp
0800e2f0 g       *ABS*	00000000 __flash_rodata_start
0800e2f0 g       *ABS*	00000000 __DTOR_LIST__
0800a90c g     F .text	00000088 .hidden __nedf2
0800c1f8 g     F .text	00000038 alt_irq_init
0800da18 g     F .text	00000084 alt_release_fd
08000d7c g     F .text	0000006c sprintf
0800e50c g     O .rodata	00000100 .hidden __clz_tab
080121e0 g     O .bss	00000004 _PathLocale
0800df5c g     F .text	00000014 atexit
08004aa4 g     F .text	00000018 setlocale
080103d8 g     O .rwdata	00000004 _impure_ptr
080121fc g     O .bss	00000004 alt_argc
0800d314 g     F .text	00000060 _do_dtors
08004a90 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080060e0 g     F .text	00000064 __ulp
080103ec g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004abc g     F .text	0000000c localeconv
0800d394 g     F .text	00000050 alt_ic_isr_register
08010410 g       *ABS*	00000000 _edata
08012340 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800c7cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000470 g     F .text	00000110 textVGADrawColorText
0800d46c g     F .text	0000008c alt_ic_irq_disable
080103e4 g     O .rwdata	00000004 __malloc_trim_threshold
08004a84 g     F .text	0000000c __locale_msgcharset
0800df70 g     F .text	00000038 exit
08005ee4 g     F .text	000001fc __mdiff
08000b50 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800e2bc g     F .text	00000034 _exit
0800cdf0 g     F .text	0000012c alt_alarm_start
080089c4 g     F .text	0000010c .hidden __muldi3
08000de8 g     F .text	00000098 strlen
0800d8bc g     F .text	0000015c open
0800a994 g     F .text	000000dc .hidden __gedf2
0800d374 g     F .text	00000020 alt_icache_flush_all
08010404 g     O .rwdata	00000004 alt_priority_mask
0800d3e4 g     F .text	00000088 alt_ic_irq_enable
0800b3d0 g     F .text	000008fc .hidden __subdf3
08005884 g     F .text	000000b0 __lo0bits
08010408 g     O .rwdata	00000008 alt_alarm_list
0800d2b4 g     F .text	00000060 _do_ctors
0800d0b0 g     F .text	000000d8 close
0800026c g     F .text	000001b4 paletteTest
0800bf9c g     F .text	00000084 alt_load
080055d0 g     F .text	00000148 __multadd
080055a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10889004 	addi	r2,r2,8768
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10889004 	addi	r2,r2,8768
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a79217 	ldw	r2,-25016(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a79217 	ldw	r2,-25016(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a0f314 	ori	gp,gp,33740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10887814 	ori	r2,r2,8672

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18c8d014 	ori	r3,r3,9024

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800bf9c0 	call	800bf9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800c0200 	call	800c020 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 800026c:	defffa04 	addi	sp,sp,-24
 8000270:	dfc00515 	stw	ra,20(sp)
 8000274:	df000415 	stw	fp,16(sp)
 8000278:	dc400315 	stw	r17,12(sp)
 800027c:	dc000215 	stw	r16,8(sp)
 8000280:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 8000284:	80004200 	call	8000420 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 8000288:	00800044 	movi	r2,1
 800028c:	d8800015 	stw	r2,0(sp)
 8000290:	000f883a 	mov	r7,zero
 8000294:	000d883a 	mov	r6,zero
 8000298:	000b883a 	mov	r5,zero
 800029c:	01020074 	movhi	r4,2049
 80002a0:	2138bc04 	addi	r4,r4,-7440
 80002a4:	80004700 	call	8000470 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 80002a8:	e03ffd15 	stw	zero,-12(fp)
 80002ac:	00005106 	br	80003f4 <paletteTest+0x188>
	{
		usleep (20000);
 80002b0:	01138804 	movi	r4,20000
 80002b4:	800c1940 	call	800c194 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 80002b8:	8000cc00 	call	8000cc0 <rand>
 80002bc:	1007883a 	mov	r3,r2
 80002c0:	00a00034 	movhi	r2,32768
 80002c4:	108003c4 	addi	r2,r2,15
 80002c8:	1884703a 	and	r2,r3,r2
 80002cc:	1000040e 	bge	r2,zero,80002e0 <paletteTest+0x74>
 80002d0:	10bfffc4 	addi	r2,r2,-1
 80002d4:	00fffc04 	movi	r3,-16
 80002d8:	10c4b03a 	or	r2,r2,r3
 80002dc:	10800044 	addi	r2,r2,1
 80002e0:	14003fcc 	andi	r16,r2,255
 80002e4:	8000cc00 	call	8000cc0 <rand>
 80002e8:	1007883a 	mov	r3,r2
 80002ec:	00a00034 	movhi	r2,32768
 80002f0:	108003c4 	addi	r2,r2,15
 80002f4:	1884703a 	and	r2,r3,r2
 80002f8:	1000040e 	bge	r2,zero,800030c <paletteTest+0xa0>
 80002fc:	10bfffc4 	addi	r2,r2,-1
 8000300:	00fffc04 	movi	r3,-16
 8000304:	10c4b03a 	or	r2,r2,r3
 8000308:	10800044 	addi	r2,r2,1
 800030c:	14403fcc 	andi	r17,r2,255
 8000310:	8000cc00 	call	8000cc0 <rand>
 8000314:	1007883a 	mov	r3,r2
 8000318:	00a00034 	movhi	r2,32768
 800031c:	108003c4 	addi	r2,r2,15
 8000320:	1884703a 	and	r2,r3,r2
 8000324:	1000040e 	bge	r2,zero,8000338 <paletteTest+0xcc>
 8000328:	10bfffc4 	addi	r2,r2,-1
 800032c:	00fffc04 	movi	r3,-16
 8000330:	10c4b03a 	or	r2,r2,r3
 8000334:	10800044 	addi	r2,r2,1
 8000338:	10803fcc 	andi	r2,r2,255
 800033c:	100f883a 	mov	r7,r2
 8000340:	880d883a 	mov	r6,r17
 8000344:	800b883a 	mov	r5,r16
 8000348:	0009883a 	mov	r4,zero
 800034c:	80005800 	call	8000580 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 8000350:	8000cc00 	call	8000cc0 <rand>
 8000354:	1007883a 	mov	r3,r2
 8000358:	00a00034 	movhi	r2,32768
 800035c:	108003c4 	addi	r2,r2,15
 8000360:	1884703a 	and	r2,r3,r2
 8000364:	1000040e 	bge	r2,zero,8000378 <paletteTest+0x10c>
 8000368:	10bfffc4 	addi	r2,r2,-1
 800036c:	00fffc04 	movi	r3,-16
 8000370:	10c4b03a 	or	r2,r2,r3
 8000374:	10800044 	addi	r2,r2,1
 8000378:	14003fcc 	andi	r16,r2,255
 800037c:	8000cc00 	call	8000cc0 <rand>
 8000380:	1007883a 	mov	r3,r2
 8000384:	00a00034 	movhi	r2,32768
 8000388:	108003c4 	addi	r2,r2,15
 800038c:	1884703a 	and	r2,r3,r2
 8000390:	1000040e 	bge	r2,zero,80003a4 <paletteTest+0x138>
 8000394:	10bfffc4 	addi	r2,r2,-1
 8000398:	00fffc04 	movi	r3,-16
 800039c:	10c4b03a 	or	r2,r2,r3
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	14403fcc 	andi	r17,r2,255
 80003a8:	8000cc00 	call	8000cc0 <rand>
 80003ac:	1007883a 	mov	r3,r2
 80003b0:	00a00034 	movhi	r2,32768
 80003b4:	108003c4 	addi	r2,r2,15
 80003b8:	1884703a 	and	r2,r3,r2
 80003bc:	1000040e 	bge	r2,zero,80003d0 <paletteTest+0x164>
 80003c0:	10bfffc4 	addi	r2,r2,-1
 80003c4:	00fffc04 	movi	r3,-16
 80003c8:	10c4b03a 	or	r2,r2,r3
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	10803fcc 	andi	r2,r2,255
 80003d4:	100f883a 	mov	r7,r2
 80003d8:	880d883a 	mov	r6,r17
 80003dc:	800b883a 	mov	r5,r16
 80003e0:	01000044 	movi	r4,1
 80003e4:	80005800 	call	8000580 <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 80003e8:	e0bffd17 	ldw	r2,-12(fp)
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	e0bffd15 	stw	r2,-12(fp)
 80003f4:	e0bffd17 	ldw	r2,-12(fp)
 80003f8:	10801910 	cmplti	r2,r2,100
 80003fc:	103fac1e 	bne	r2,zero,80002b0 <__alt_data_end+0xfc0002b0>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 8000400:	0001883a 	nop
 8000404:	e6fffe04 	addi	sp,fp,-8
 8000408:	dfc00317 	ldw	ra,12(sp)
 800040c:	df000217 	ldw	fp,8(sp)
 8000410:	dc400117 	ldw	r17,4(sp)
 8000414:	dc000017 	ldw	r16,0(sp)
 8000418:	dec00404 	addi	sp,sp,16
 800041c:	f800283a 	ret

08000420 <textVGAColorClr>:
#include <alt_types.h>
#include "text_mode_vga_color.h"
#include "palette_test.h"

void textVGAColorClr()
{
 8000420:	defffe04 	addi	sp,sp,-8
 8000424:	df000115 	stw	fp,4(sp)
 8000428:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 800042c:	e03fff15 	stw	zero,-4(fp)
 8000430:	00000706 	br	8000450 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000434:	d0e00117 	ldw	r3,-32764(gp)
 8000438:	e0bfff17 	ldw	r2,-4(fp)
 800043c:	1885883a 	add	r2,r3,r2
 8000440:	10000005 	stb	zero,0(r2)
#include "text_mode_vga_color.h"
#include "palette_test.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000444:	e0bfff17 	ldw	r2,-4(fp)
 8000448:	10800044 	addi	r2,r2,1
 800044c:	e0bfff15 	stw	r2,-4(fp)
 8000450:	e0bfff17 	ldw	r2,-4(fp)
 8000454:	1084b010 	cmplti	r2,r2,4800
 8000458:	103ff61e 	bne	r2,zero,8000434 <__alt_data_end+0xfc000434>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 800045c:	0001883a 	nop
 8000460:	e037883a 	mov	sp,fp
 8000464:	df000017 	ldw	fp,0(sp)
 8000468:	dec00104 	addi	sp,sp,4
 800046c:	f800283a 	ret

08000470 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 8000470:	defff704 	addi	sp,sp,-36
 8000474:	dfc00815 	stw	ra,32(sp)
 8000478:	df000715 	stw	fp,28(sp)
 800047c:	dc000615 	stw	r16,24(sp)
 8000480:	df000704 	addi	fp,sp,28
 8000484:	e13ffa15 	stw	r4,-24(fp)
 8000488:	e17ffb15 	stw	r5,-20(fp)
 800048c:	e1bffc15 	stw	r6,-16(fp)
 8000490:	3807883a 	mov	r3,r7
 8000494:	e0800217 	ldw	r2,8(fp)
 8000498:	e0fffd05 	stb	r3,-12(fp)
 800049c:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 80004a0:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 80004a4:	00002706 	br	8000544 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 80004a8:	d4200117 	ldw	r16,-32764(gp)
 80004ac:	01401404 	movi	r5,80
 80004b0:	e13ffc17 	ldw	r4,-16(fp)
 80004b4:	8000c800 	call	8000c80 <__mulsi3>
 80004b8:	1007883a 	mov	r3,r2
 80004bc:	e0bffb17 	ldw	r2,-20(fp)
 80004c0:	1887883a 	add	r3,r3,r2
 80004c4:	e0bff917 	ldw	r2,-28(fp)
 80004c8:	1885883a 	add	r2,r3,r2
 80004cc:	1085883a 	add	r2,r2,r2
 80004d0:	1009883a 	mov	r4,r2
 80004d4:	e0bffe03 	ldbu	r2,-8(fp)
 80004d8:	1004913a 	slli	r2,r2,4
 80004dc:	1007883a 	mov	r3,r2
 80004e0:	e0bffd03 	ldbu	r2,-12(fp)
 80004e4:	1884b03a 	or	r2,r3,r2
 80004e8:	1007883a 	mov	r3,r2
 80004ec:	8105883a 	add	r2,r16,r4
 80004f0:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 80004f4:	d4200117 	ldw	r16,-32764(gp)
 80004f8:	01401404 	movi	r5,80
 80004fc:	e13ffc17 	ldw	r4,-16(fp)
 8000500:	8000c800 	call	8000c80 <__mulsi3>
 8000504:	1007883a 	mov	r3,r2
 8000508:	e0bffb17 	ldw	r2,-20(fp)
 800050c:	1887883a 	add	r3,r3,r2
 8000510:	e0bff917 	ldw	r2,-28(fp)
 8000514:	1885883a 	add	r2,r3,r2
 8000518:	1085883a 	add	r2,r2,r2
 800051c:	10800044 	addi	r2,r2,1
 8000520:	e0fff917 	ldw	r3,-28(fp)
 8000524:	e13ffa17 	ldw	r4,-24(fp)
 8000528:	20c7883a 	add	r3,r4,r3
 800052c:	18c00003 	ldbu	r3,0(r3)
 8000530:	8085883a 	add	r2,r16,r2
 8000534:	10c00005 	stb	r3,0(r2)
		i++;
 8000538:	e0bff917 	ldw	r2,-28(fp)
 800053c:	10800044 	addi	r2,r2,1
 8000540:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 8000544:	e0bff917 	ldw	r2,-28(fp)
 8000548:	e0fffa17 	ldw	r3,-24(fp)
 800054c:	1885883a 	add	r2,r3,r2
 8000550:	10800003 	ldbu	r2,0(r2)
 8000554:	10803fcc 	andi	r2,r2,255
 8000558:	1080201c 	xori	r2,r2,128
 800055c:	10bfe004 	addi	r2,r2,-128
 8000560:	103fd11e 	bne	r2,zero,80004a8 <__alt_data_end+0xfc0004a8>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 8000564:	0001883a 	nop
 8000568:	e6ffff04 	addi	sp,fp,-4
 800056c:	dfc00217 	ldw	ra,8(sp)
 8000570:	df000117 	ldw	fp,4(sp)
 8000574:	dc000017 	ldw	r16,0(sp)
 8000578:	dec00304 	addi	sp,sp,12
 800057c:	f800283a 	ret

08000580 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 8000580:	defffb04 	addi	sp,sp,-20
 8000584:	df000415 	stw	fp,16(sp)
 8000588:	df000404 	addi	fp,sp,16
 800058c:	2011883a 	mov	r8,r4
 8000590:	2809883a 	mov	r4,r5
 8000594:	3007883a 	mov	r3,r6
 8000598:	3805883a 	mov	r2,r7
 800059c:	e23ffc05 	stb	r8,-16(fp)
 80005a0:	e13ffd05 	stb	r4,-12(fp)
 80005a4:	e0fffe05 	stb	r3,-8(fp)
 80005a8:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)

	if(color%2==0){
 80005ac:	e0bffc03 	ldbu	r2,-16(fp)
 80005b0:	1080004c 	andi	r2,r2,1
 80005b4:	10803fcc 	andi	r2,r2,255
 80005b8:	1000521e 	bne	r2,zero,8000704 <setColorPalette+0x184>
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] & 0;
 80005bc:	d0e00117 	ldw	r3,-32764(gp)
 80005c0:	e0bffc03 	ldbu	r2,-16(fp)
 80005c4:	1004d07a 	srli	r2,r2,1
 80005c8:	10803fcc 	andi	r2,r2,255
 80005cc:	10820004 	addi	r2,r2,2048
 80005d0:	1085883a 	add	r2,r2,r2
 80005d4:	1085883a 	add	r2,r2,r2
 80005d8:	1885883a 	add	r2,r3,r2
 80005dc:	10800017 	ldw	r2,0(r2)
 80005e0:	d0e00117 	ldw	r3,-32764(gp)
 80005e4:	e0bffc03 	ldbu	r2,-16(fp)
 80005e8:	1004d07a 	srli	r2,r2,1
 80005ec:	10803fcc 	andi	r2,r2,255
 80005f0:	10820004 	addi	r2,r2,2048
 80005f4:	1085883a 	add	r2,r2,r2
 80005f8:	1085883a 	add	r2,r2,r2
 80005fc:	1885883a 	add	r2,r3,r2
 8000600:	10000015 	stw	zero,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | blue<<1 ;
 8000604:	d1200117 	ldw	r4,-32764(gp)
 8000608:	e0bffc03 	ldbu	r2,-16(fp)
 800060c:	1004d07a 	srli	r2,r2,1
 8000610:	11403fcc 	andi	r5,r2,255
 8000614:	d0e00117 	ldw	r3,-32764(gp)
 8000618:	e0bffc03 	ldbu	r2,-16(fp)
 800061c:	1004d07a 	srli	r2,r2,1
 8000620:	10803fcc 	andi	r2,r2,255
 8000624:	10820004 	addi	r2,r2,2048
 8000628:	1085883a 	add	r2,r2,r2
 800062c:	1085883a 	add	r2,r2,r2
 8000630:	1885883a 	add	r2,r3,r2
 8000634:	10c00017 	ldw	r3,0(r2)
 8000638:	e0bfff03 	ldbu	r2,-4(fp)
 800063c:	1085883a 	add	r2,r2,r2
 8000640:	1886b03a 	or	r3,r3,r2
 8000644:	28820004 	addi	r2,r5,2048
 8000648:	1085883a 	add	r2,r2,r2
 800064c:	1085883a 	add	r2,r2,r2
 8000650:	2085883a 	add	r2,r4,r2
 8000654:	10c00015 	stw	r3,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | green << 5 ;
 8000658:	d1200117 	ldw	r4,-32764(gp)
 800065c:	e0bffc03 	ldbu	r2,-16(fp)
 8000660:	1004d07a 	srli	r2,r2,1
 8000664:	11403fcc 	andi	r5,r2,255
 8000668:	d0e00117 	ldw	r3,-32764(gp)
 800066c:	e0bffc03 	ldbu	r2,-16(fp)
 8000670:	1004d07a 	srli	r2,r2,1
 8000674:	10803fcc 	andi	r2,r2,255
 8000678:	10820004 	addi	r2,r2,2048
 800067c:	1085883a 	add	r2,r2,r2
 8000680:	1085883a 	add	r2,r2,r2
 8000684:	1885883a 	add	r2,r3,r2
 8000688:	10800017 	ldw	r2,0(r2)
 800068c:	e0fffe03 	ldbu	r3,-8(fp)
 8000690:	1806917a 	slli	r3,r3,5
 8000694:	10c6b03a 	or	r3,r2,r3
 8000698:	28820004 	addi	r2,r5,2048
 800069c:	1085883a 	add	r2,r2,r2
 80006a0:	1085883a 	add	r2,r2,r2
 80006a4:	2085883a 	add	r2,r4,r2
 80006a8:	10c00015 	stw	r3,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | red << 9;
 80006ac:	d1200117 	ldw	r4,-32764(gp)
 80006b0:	e0bffc03 	ldbu	r2,-16(fp)
 80006b4:	1004d07a 	srli	r2,r2,1
 80006b8:	11403fcc 	andi	r5,r2,255
 80006bc:	d0e00117 	ldw	r3,-32764(gp)
 80006c0:	e0bffc03 	ldbu	r2,-16(fp)
 80006c4:	1004d07a 	srli	r2,r2,1
 80006c8:	10803fcc 	andi	r2,r2,255
 80006cc:	10820004 	addi	r2,r2,2048
 80006d0:	1085883a 	add	r2,r2,r2
 80006d4:	1085883a 	add	r2,r2,r2
 80006d8:	1885883a 	add	r2,r3,r2
 80006dc:	10800017 	ldw	r2,0(r2)
 80006e0:	e0fffd03 	ldbu	r3,-12(fp)
 80006e4:	1806927a 	slli	r3,r3,9
 80006e8:	10c6b03a 	or	r3,r2,r3
 80006ec:	28820004 	addi	r2,r5,2048
 80006f0:	1085883a 	add	r2,r2,r2
 80006f4:	1085883a 	add	r2,r2,r2
 80006f8:	2085883a 	add	r2,r4,r2
 80006fc:	10c00015 	stw	r3,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2]& 0;
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2]| blue<<13 ;
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | green << 17;
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | red << 21;
	}
}
 8000700:	00005106 	br	8000848 <setColorPalette+0x2c8>
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | blue<<1 ;
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | green << 5 ;
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | red << 9;
	}
	else{
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2]& 0;
 8000704:	d0e00117 	ldw	r3,-32764(gp)
 8000708:	e0bffc03 	ldbu	r2,-16(fp)
 800070c:	1004d07a 	srli	r2,r2,1
 8000710:	10803fcc 	andi	r2,r2,255
 8000714:	10820004 	addi	r2,r2,2048
 8000718:	1085883a 	add	r2,r2,r2
 800071c:	1085883a 	add	r2,r2,r2
 8000720:	1885883a 	add	r2,r3,r2
 8000724:	10800017 	ldw	r2,0(r2)
 8000728:	d0e00117 	ldw	r3,-32764(gp)
 800072c:	e0bffc03 	ldbu	r2,-16(fp)
 8000730:	1004d07a 	srli	r2,r2,1
 8000734:	10803fcc 	andi	r2,r2,255
 8000738:	10820004 	addi	r2,r2,2048
 800073c:	1085883a 	add	r2,r2,r2
 8000740:	1085883a 	add	r2,r2,r2
 8000744:	1885883a 	add	r2,r3,r2
 8000748:	10000015 	stw	zero,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2]| blue<<13 ;
 800074c:	d1200117 	ldw	r4,-32764(gp)
 8000750:	e0bffc03 	ldbu	r2,-16(fp)
 8000754:	1004d07a 	srli	r2,r2,1
 8000758:	11403fcc 	andi	r5,r2,255
 800075c:	d0e00117 	ldw	r3,-32764(gp)
 8000760:	e0bffc03 	ldbu	r2,-16(fp)
 8000764:	1004d07a 	srli	r2,r2,1
 8000768:	10803fcc 	andi	r2,r2,255
 800076c:	10820004 	addi	r2,r2,2048
 8000770:	1085883a 	add	r2,r2,r2
 8000774:	1085883a 	add	r2,r2,r2
 8000778:	1885883a 	add	r2,r3,r2
 800077c:	10800017 	ldw	r2,0(r2)
 8000780:	e0ffff03 	ldbu	r3,-4(fp)
 8000784:	1806937a 	slli	r3,r3,13
 8000788:	10c6b03a 	or	r3,r2,r3
 800078c:	28820004 	addi	r2,r5,2048
 8000790:	1085883a 	add	r2,r2,r2
 8000794:	1085883a 	add	r2,r2,r2
 8000798:	2085883a 	add	r2,r4,r2
 800079c:	10c00015 	stw	r3,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | green << 17;
 80007a0:	d1200117 	ldw	r4,-32764(gp)
 80007a4:	e0bffc03 	ldbu	r2,-16(fp)
 80007a8:	1004d07a 	srli	r2,r2,1
 80007ac:	11403fcc 	andi	r5,r2,255
 80007b0:	d0e00117 	ldw	r3,-32764(gp)
 80007b4:	e0bffc03 	ldbu	r2,-16(fp)
 80007b8:	1004d07a 	srli	r2,r2,1
 80007bc:	10803fcc 	andi	r2,r2,255
 80007c0:	10820004 	addi	r2,r2,2048
 80007c4:	1085883a 	add	r2,r2,r2
 80007c8:	1085883a 	add	r2,r2,r2
 80007cc:	1885883a 	add	r2,r3,r2
 80007d0:	10800017 	ldw	r2,0(r2)
 80007d4:	e0fffe03 	ldbu	r3,-8(fp)
 80007d8:	1806947a 	slli	r3,r3,17
 80007dc:	10c6b03a 	or	r3,r2,r3
 80007e0:	28820004 	addi	r2,r5,2048
 80007e4:	1085883a 	add	r2,r2,r2
 80007e8:	1085883a 	add	r2,r2,r2
 80007ec:	2085883a 	add	r2,r4,r2
 80007f0:	10c00015 	stw	r3,0(r2)
		vga_ctrl->colorPallete[color/2]= vga_ctrl->colorPallete[color/2] | red << 21;
 80007f4:	d1200117 	ldw	r4,-32764(gp)
 80007f8:	e0bffc03 	ldbu	r2,-16(fp)
 80007fc:	1004d07a 	srli	r2,r2,1
 8000800:	11403fcc 	andi	r5,r2,255
 8000804:	d0e00117 	ldw	r3,-32764(gp)
 8000808:	e0bffc03 	ldbu	r2,-16(fp)
 800080c:	1004d07a 	srli	r2,r2,1
 8000810:	10803fcc 	andi	r2,r2,255
 8000814:	10820004 	addi	r2,r2,2048
 8000818:	1085883a 	add	r2,r2,r2
 800081c:	1085883a 	add	r2,r2,r2
 8000820:	1885883a 	add	r2,r3,r2
 8000824:	10800017 	ldw	r2,0(r2)
 8000828:	e0fffd03 	ldbu	r3,-12(fp)
 800082c:	1806957a 	slli	r3,r3,21
 8000830:	10c6b03a 	or	r3,r2,r3
 8000834:	28820004 	addi	r2,r5,2048
 8000838:	1085883a 	add	r2,r2,r2
 800083c:	1085883a 	add	r2,r2,r2
 8000840:	2085883a 	add	r2,r4,r2
 8000844:	10c00015 	stw	r3,0(r2)
	}
}
 8000848:	0001883a 	nop
 800084c:	e037883a 	mov	sp,fp
 8000850:	df000017 	ldw	fp,0(sp)
 8000854:	dec00104 	addi	sp,sp,4
 8000858:	f800283a 	ret

0800085c <main>:


void main()
{
 800085c:	deffe004 	addi	sp,sp,-128
 8000860:	dfc01f15 	stw	ra,124(sp)
 8000864:	df001e15 	stw	fp,120(sp)
 8000868:	dcc01d15 	stw	r19,116(sp)
 800086c:	dc801c15 	stw	r18,112(sp)
 8000870:	dc401b15 	stw	r17,108(sp)
 8000874:	dc001a15 	stw	r16,104(sp)
 8000878:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 800087c:	80004200 	call	8000420 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000880:	e03fe515 	stw	zero,-108(fp)
 8000884:	00002806 	br	8000928 <main+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 8000888:	e0bfe517 	ldw	r2,-108(fp)
 800088c:	14403fcc 	andi	r17,r2,255
 8000890:	04020074 	movhi	r16,2049
 8000894:	8439ec04 	addi	r16,r16,-6224
 8000898:	e0bfe517 	ldw	r2,-108(fp)
 800089c:	014005c4 	movi	r5,23
 80008a0:	1009883a 	mov	r4,r2
 80008a4:	8000c800 	call	8000c80 <__mulsi3>
 80008a8:	8085883a 	add	r2,r16,r2
 80008ac:	10800504 	addi	r2,r2,20
 80008b0:	10800003 	ldbu	r2,0(r2)
 80008b4:	14803fcc 	andi	r18,r2,255
 80008b8:	04020074 	movhi	r16,2049
 80008bc:	8439ec04 	addi	r16,r16,-6224
 80008c0:	e0bfe517 	ldw	r2,-108(fp)
 80008c4:	014005c4 	movi	r5,23
 80008c8:	1009883a 	mov	r4,r2
 80008cc:	8000c800 	call	8000c80 <__mulsi3>
 80008d0:	8085883a 	add	r2,r16,r2
 80008d4:	10800544 	addi	r2,r2,21
 80008d8:	10800003 	ldbu	r2,0(r2)
 80008dc:	14c03fcc 	andi	r19,r2,255
 80008e0:	04020074 	movhi	r16,2049
 80008e4:	8439ec04 	addi	r16,r16,-6224
 80008e8:	e0bfe517 	ldw	r2,-108(fp)
 80008ec:	014005c4 	movi	r5,23
 80008f0:	1009883a 	mov	r4,r2
 80008f4:	8000c800 	call	8000c80 <__mulsi3>
 80008f8:	8085883a 	add	r2,r16,r2
 80008fc:	10800584 	addi	r2,r2,22
 8000900:	10800003 	ldbu	r2,0(r2)
 8000904:	10803fcc 	andi	r2,r2,255
 8000908:	100f883a 	mov	r7,r2
 800090c:	980d883a 	mov	r6,r19
 8000910:	900b883a 	mov	r5,r18
 8000914:	8809883a 	mov	r4,r17
 8000918:	80005800 	call	8000580 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 800091c:	e0bfe517 	ldw	r2,-108(fp)
 8000920:	10800044 	addi	r2,r2,1
 8000924:	e0bfe515 	stw	r2,-108(fp)
 8000928:	e0bfe517 	ldw	r2,-108(fp)
 800092c:	10800410 	cmplti	r2,r2,16
 8000930:	103fd51e 	bne	r2,zero,8000888 <__alt_data_end+0xfc000888>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	paletteTest();
 8000934:	800026c0 	call	800026c <paletteTest>
	while (1)
	{
		fg = rand() % 16;
 8000938:	8000cc00 	call	8000cc0 <rand>
 800093c:	1007883a 	mov	r3,r2
 8000940:	00a00034 	movhi	r2,32768
 8000944:	108003c4 	addi	r2,r2,15
 8000948:	1884703a 	and	r2,r3,r2
 800094c:	1000040e 	bge	r2,zero,8000960 <main+0x104>
 8000950:	10bfffc4 	addi	r2,r2,-1
 8000954:	00fffc04 	movi	r3,-16
 8000958:	10c4b03a 	or	r2,r2,r3
 800095c:	10800044 	addi	r2,r2,1
 8000960:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 8000964:	8000cc00 	call	8000cc0 <rand>
 8000968:	1007883a 	mov	r3,r2
 800096c:	00a00034 	movhi	r2,32768
 8000970:	108003c4 	addi	r2,r2,15
 8000974:	1884703a 	and	r2,r3,r2
 8000978:	1000040e 	bge	r2,zero,800098c <main+0x130>
 800097c:	10bfffc4 	addi	r2,r2,-1
 8000980:	00fffc04 	movi	r3,-16
 8000984:	10c4b03a 	or	r2,r2,r3
 8000988:	10800044 	addi	r2,r2,1
 800098c:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 8000990:	00001606 	br	80009ec <main+0x190>
		{
			fg = rand() % 16;
 8000994:	8000cc00 	call	8000cc0 <rand>
 8000998:	1007883a 	mov	r3,r2
 800099c:	00a00034 	movhi	r2,32768
 80009a0:	108003c4 	addi	r2,r2,15
 80009a4:	1884703a 	and	r2,r3,r2
 80009a8:	1000040e 	bge	r2,zero,80009bc <main+0x160>
 80009ac:	10bfffc4 	addi	r2,r2,-1
 80009b0:	00fffc04 	movi	r3,-16
 80009b4:	10c4b03a 	or	r2,r2,r3
 80009b8:	10800044 	addi	r2,r2,1
 80009bc:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 80009c0:	8000cc00 	call	8000cc0 <rand>
 80009c4:	1007883a 	mov	r3,r2
 80009c8:	00a00034 	movhi	r2,32768
 80009cc:	108003c4 	addi	r2,r2,15
 80009d0:	1884703a 	and	r2,r3,r2
 80009d4:	1000040e 	bge	r2,zero,80009e8 <main+0x18c>
 80009d8:	10bfffc4 	addi	r2,r2,-1
 80009dc:	00fffc04 	movi	r3,-16
 80009e0:	10c4b03a 	or	r2,r2,r3
 80009e4:	10800044 	addi	r2,r2,1
 80009e8:	e0bfe415 	stw	r2,-112(fp)
	paletteTest();
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 80009ec:	e0ffe317 	ldw	r3,-116(fp)
 80009f0:	e0bfe417 	ldw	r2,-112(fp)
 80009f4:	18bfe726 	beq	r3,r2,8000994 <__alt_data_end+0xfc000994>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 80009f8:	014005c4 	movi	r5,23
 80009fc:	e13fe317 	ldw	r4,-116(fp)
 8000a00:	8000c800 	call	8000c80 <__mulsi3>
 8000a04:	1007883a 	mov	r3,r2
 8000a08:	00820074 	movhi	r2,2049
 8000a0c:	10b9ec04 	addi	r2,r2,-6224
 8000a10:	18a1883a 	add	r16,r3,r2
 8000a14:	014005c4 	movi	r5,23
 8000a18:	e13fe417 	ldw	r4,-112(fp)
 8000a1c:	8000c800 	call	8000c80 <__mulsi3>
 8000a20:	1007883a 	mov	r3,r2
 8000a24:	00820074 	movhi	r2,2049
 8000a28:	10b9ec04 	addi	r2,r2,-6224
 8000a2c:	1887883a 	add	r3,r3,r2
 8000a30:	e0bfe804 	addi	r2,fp,-96
 8000a34:	180f883a 	mov	r7,r3
 8000a38:	800d883a 	mov	r6,r16
 8000a3c:	01420074 	movhi	r5,2049
 8000a40:	2978c804 	addi	r5,r5,-7392
 8000a44:	1009883a 	mov	r4,r2
 8000a48:	8000d7c0 	call	8000d7c <sprintf>
		x = rand() % (80-strlen(color_string));
 8000a4c:	8000cc00 	call	8000cc0 <rand>
 8000a50:	1021883a 	mov	r16,r2
 8000a54:	e0bfe804 	addi	r2,fp,-96
 8000a58:	1009883a 	mov	r4,r2
 8000a5c:	8000de80 	call	8000de8 <strlen>
 8000a60:	1007883a 	mov	r3,r2
 8000a64:	00801404 	movi	r2,80
 8000a68:	10c5c83a 	sub	r2,r2,r3
 8000a6c:	100b883a 	mov	r5,r2
 8000a70:	8009883a 	mov	r4,r16
 8000a74:	8000c280 	call	8000c28 <__umodsi3>
 8000a78:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 8000a7c:	8000cc00 	call	8000cc0 <rand>
 8000a80:	01400784 	movi	r5,30
 8000a84:	1009883a 	mov	r4,r2
 8000a88:	8000b500 	call	8000b50 <__modsi3>
 8000a8c:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 8000a90:	e0bfe417 	ldw	r2,-112(fp)
 8000a94:	11003fcc 	andi	r4,r2,255
 8000a98:	e0bfe317 	ldw	r2,-116(fp)
 8000a9c:	10803fcc 	andi	r2,r2,255
 8000aa0:	e0ffe804 	addi	r3,fp,-96
 8000aa4:	d8800015 	stw	r2,0(sp)
 8000aa8:	200f883a 	mov	r7,r4
 8000aac:	e1bfe717 	ldw	r6,-100(fp)
 8000ab0:	e17fe617 	ldw	r5,-104(fp)
 8000ab4:	1809883a 	mov	r4,r3
 8000ab8:	80004700 	call	8000470 <textVGADrawColorText>
		usleep (100000);
 8000abc:	010000b4 	movhi	r4,2
 8000ac0:	2121a804 	addi	r4,r4,-31072
 8000ac4:	800c1940 	call	800c194 <usleep>
	}
 8000ac8:	003f9b06 	br	8000938 <__alt_data_end+0xfc000938>

08000acc <__divsi3>:
 8000acc:	20001b16 	blt	r4,zero,8000b3c <__divsi3+0x70>
 8000ad0:	000f883a 	mov	r7,zero
 8000ad4:	28001616 	blt	r5,zero,8000b30 <__divsi3+0x64>
 8000ad8:	200d883a 	mov	r6,r4
 8000adc:	29001a2e 	bgeu	r5,r4,8000b48 <__divsi3+0x7c>
 8000ae0:	00800804 	movi	r2,32
 8000ae4:	00c00044 	movi	r3,1
 8000ae8:	00000106 	br	8000af0 <__divsi3+0x24>
 8000aec:	10000d26 	beq	r2,zero,8000b24 <__divsi3+0x58>
 8000af0:	294b883a 	add	r5,r5,r5
 8000af4:	10bfffc4 	addi	r2,r2,-1
 8000af8:	18c7883a 	add	r3,r3,r3
 8000afc:	293ffb36 	bltu	r5,r4,8000aec <__alt_data_end+0xfc000aec>
 8000b00:	0005883a 	mov	r2,zero
 8000b04:	18000726 	beq	r3,zero,8000b24 <__divsi3+0x58>
 8000b08:	0005883a 	mov	r2,zero
 8000b0c:	31400236 	bltu	r6,r5,8000b18 <__divsi3+0x4c>
 8000b10:	314dc83a 	sub	r6,r6,r5
 8000b14:	10c4b03a 	or	r2,r2,r3
 8000b18:	1806d07a 	srli	r3,r3,1
 8000b1c:	280ad07a 	srli	r5,r5,1
 8000b20:	183ffa1e 	bne	r3,zero,8000b0c <__alt_data_end+0xfc000b0c>
 8000b24:	38000126 	beq	r7,zero,8000b2c <__divsi3+0x60>
 8000b28:	0085c83a 	sub	r2,zero,r2
 8000b2c:	f800283a 	ret
 8000b30:	014bc83a 	sub	r5,zero,r5
 8000b34:	39c0005c 	xori	r7,r7,1
 8000b38:	003fe706 	br	8000ad8 <__alt_data_end+0xfc000ad8>
 8000b3c:	0109c83a 	sub	r4,zero,r4
 8000b40:	01c00044 	movi	r7,1
 8000b44:	003fe306 	br	8000ad4 <__alt_data_end+0xfc000ad4>
 8000b48:	00c00044 	movi	r3,1
 8000b4c:	003fee06 	br	8000b08 <__alt_data_end+0xfc000b08>

08000b50 <__modsi3>:
 8000b50:	20001716 	blt	r4,zero,8000bb0 <__modsi3+0x60>
 8000b54:	000f883a 	mov	r7,zero
 8000b58:	2005883a 	mov	r2,r4
 8000b5c:	28001216 	blt	r5,zero,8000ba8 <__modsi3+0x58>
 8000b60:	2900162e 	bgeu	r5,r4,8000bbc <__modsi3+0x6c>
 8000b64:	01800804 	movi	r6,32
 8000b68:	00c00044 	movi	r3,1
 8000b6c:	00000106 	br	8000b74 <__modsi3+0x24>
 8000b70:	30000a26 	beq	r6,zero,8000b9c <__modsi3+0x4c>
 8000b74:	294b883a 	add	r5,r5,r5
 8000b78:	31bfffc4 	addi	r6,r6,-1
 8000b7c:	18c7883a 	add	r3,r3,r3
 8000b80:	293ffb36 	bltu	r5,r4,8000b70 <__alt_data_end+0xfc000b70>
 8000b84:	18000526 	beq	r3,zero,8000b9c <__modsi3+0x4c>
 8000b88:	1806d07a 	srli	r3,r3,1
 8000b8c:	11400136 	bltu	r2,r5,8000b94 <__modsi3+0x44>
 8000b90:	1145c83a 	sub	r2,r2,r5
 8000b94:	280ad07a 	srli	r5,r5,1
 8000b98:	183ffb1e 	bne	r3,zero,8000b88 <__alt_data_end+0xfc000b88>
 8000b9c:	38000126 	beq	r7,zero,8000ba4 <__modsi3+0x54>
 8000ba0:	0085c83a 	sub	r2,zero,r2
 8000ba4:	f800283a 	ret
 8000ba8:	014bc83a 	sub	r5,zero,r5
 8000bac:	003fec06 	br	8000b60 <__alt_data_end+0xfc000b60>
 8000bb0:	0109c83a 	sub	r4,zero,r4
 8000bb4:	01c00044 	movi	r7,1
 8000bb8:	003fe706 	br	8000b58 <__alt_data_end+0xfc000b58>
 8000bbc:	00c00044 	movi	r3,1
 8000bc0:	003ff106 	br	8000b88 <__alt_data_end+0xfc000b88>

08000bc4 <__udivsi3>:
 8000bc4:	200d883a 	mov	r6,r4
 8000bc8:	2900152e 	bgeu	r5,r4,8000c20 <__udivsi3+0x5c>
 8000bcc:	28001416 	blt	r5,zero,8000c20 <__udivsi3+0x5c>
 8000bd0:	00800804 	movi	r2,32
 8000bd4:	00c00044 	movi	r3,1
 8000bd8:	00000206 	br	8000be4 <__udivsi3+0x20>
 8000bdc:	10000e26 	beq	r2,zero,8000c18 <__udivsi3+0x54>
 8000be0:	28000516 	blt	r5,zero,8000bf8 <__udivsi3+0x34>
 8000be4:	294b883a 	add	r5,r5,r5
 8000be8:	10bfffc4 	addi	r2,r2,-1
 8000bec:	18c7883a 	add	r3,r3,r3
 8000bf0:	293ffa36 	bltu	r5,r4,8000bdc <__alt_data_end+0xfc000bdc>
 8000bf4:	18000826 	beq	r3,zero,8000c18 <__udivsi3+0x54>
 8000bf8:	0005883a 	mov	r2,zero
 8000bfc:	31400236 	bltu	r6,r5,8000c08 <__udivsi3+0x44>
 8000c00:	314dc83a 	sub	r6,r6,r5
 8000c04:	10c4b03a 	or	r2,r2,r3
 8000c08:	1806d07a 	srli	r3,r3,1
 8000c0c:	280ad07a 	srli	r5,r5,1
 8000c10:	183ffa1e 	bne	r3,zero,8000bfc <__alt_data_end+0xfc000bfc>
 8000c14:	f800283a 	ret
 8000c18:	0005883a 	mov	r2,zero
 8000c1c:	f800283a 	ret
 8000c20:	00c00044 	movi	r3,1
 8000c24:	003ff406 	br	8000bf8 <__alt_data_end+0xfc000bf8>

08000c28 <__umodsi3>:
 8000c28:	2005883a 	mov	r2,r4
 8000c2c:	2900122e 	bgeu	r5,r4,8000c78 <__umodsi3+0x50>
 8000c30:	28001116 	blt	r5,zero,8000c78 <__umodsi3+0x50>
 8000c34:	01800804 	movi	r6,32
 8000c38:	00c00044 	movi	r3,1
 8000c3c:	00000206 	br	8000c48 <__umodsi3+0x20>
 8000c40:	30000c26 	beq	r6,zero,8000c74 <__umodsi3+0x4c>
 8000c44:	28000516 	blt	r5,zero,8000c5c <__umodsi3+0x34>
 8000c48:	294b883a 	add	r5,r5,r5
 8000c4c:	31bfffc4 	addi	r6,r6,-1
 8000c50:	18c7883a 	add	r3,r3,r3
 8000c54:	293ffa36 	bltu	r5,r4,8000c40 <__alt_data_end+0xfc000c40>
 8000c58:	18000626 	beq	r3,zero,8000c74 <__umodsi3+0x4c>
 8000c5c:	1806d07a 	srli	r3,r3,1
 8000c60:	11400136 	bltu	r2,r5,8000c68 <__umodsi3+0x40>
 8000c64:	1145c83a 	sub	r2,r2,r5
 8000c68:	280ad07a 	srli	r5,r5,1
 8000c6c:	183ffb1e 	bne	r3,zero,8000c5c <__alt_data_end+0xfc000c5c>
 8000c70:	f800283a 	ret
 8000c74:	f800283a 	ret
 8000c78:	00c00044 	movi	r3,1
 8000c7c:	003ff706 	br	8000c5c <__alt_data_end+0xfc000c5c>

08000c80 <__mulsi3>:
 8000c80:	0005883a 	mov	r2,zero
 8000c84:	20000726 	beq	r4,zero,8000ca4 <__mulsi3+0x24>
 8000c88:	20c0004c 	andi	r3,r4,1
 8000c8c:	2008d07a 	srli	r4,r4,1
 8000c90:	18000126 	beq	r3,zero,8000c98 <__mulsi3+0x18>
 8000c94:	1145883a 	add	r2,r2,r5
 8000c98:	294b883a 	add	r5,r5,r5
 8000c9c:	203ffa1e 	bne	r4,zero,8000c88 <__alt_data_end+0xfc000c88>
 8000ca0:	f800283a 	ret
 8000ca4:	f800283a 	ret

08000ca8 <srand>:
 8000ca8:	00820074 	movhi	r2,2049
 8000cac:	1080f604 	addi	r2,r2,984
 8000cb0:	10800017 	ldw	r2,0(r2)
 8000cb4:	11002915 	stw	r4,164(r2)
 8000cb8:	10002a15 	stw	zero,168(r2)
 8000cbc:	f800283a 	ret

08000cc0 <rand>:
 8000cc0:	00820074 	movhi	r2,2049
 8000cc4:	defffe04 	addi	sp,sp,-8
 8000cc8:	1080f604 	addi	r2,r2,984
 8000ccc:	dc000015 	stw	r16,0(sp)
 8000cd0:	14000017 	ldw	r16,0(r2)
 8000cd4:	dfc00115 	stw	ra,4(sp)
 8000cd8:	01932574 	movhi	r6,19605
 8000cdc:	81002917 	ldw	r4,164(r16)
 8000ce0:	81402a17 	ldw	r5,168(r16)
 8000ce4:	01d614b4 	movhi	r7,22610
 8000ce8:	319fcb44 	addi	r6,r6,32557
 8000cec:	39fd0b44 	addi	r7,r7,-3027
 8000cf0:	80089c40 	call	80089c4 <__muldi3>
 8000cf4:	11000044 	addi	r4,r2,1
 8000cf8:	2085803a 	cmpltu	r2,r4,r2
 8000cfc:	10c7883a 	add	r3,r2,r3
 8000d00:	00a00034 	movhi	r2,32768
 8000d04:	10bfffc4 	addi	r2,r2,-1
 8000d08:	1884703a 	and	r2,r3,r2
 8000d0c:	81002915 	stw	r4,164(r16)
 8000d10:	80c02a15 	stw	r3,168(r16)
 8000d14:	dfc00117 	ldw	ra,4(sp)
 8000d18:	dc000017 	ldw	r16,0(sp)
 8000d1c:	dec00204 	addi	sp,sp,8
 8000d20:	f800283a 	ret

08000d24 <_sprintf_r>:
 8000d24:	deffe404 	addi	sp,sp,-112
 8000d28:	2807883a 	mov	r3,r5
 8000d2c:	dfc01a15 	stw	ra,104(sp)
 8000d30:	d9c01b15 	stw	r7,108(sp)
 8000d34:	00a00034 	movhi	r2,32768
 8000d38:	10bfffc4 	addi	r2,r2,-1
 8000d3c:	02008204 	movi	r8,520
 8000d40:	d8800215 	stw	r2,8(sp)
 8000d44:	d8800515 	stw	r2,20(sp)
 8000d48:	d9c01b04 	addi	r7,sp,108
 8000d4c:	d80b883a 	mov	r5,sp
 8000d50:	00bfffc4 	movi	r2,-1
 8000d54:	d8c00015 	stw	r3,0(sp)
 8000d58:	d8c00415 	stw	r3,16(sp)
 8000d5c:	da00030d 	sth	r8,12(sp)
 8000d60:	d880038d 	sth	r2,14(sp)
 8000d64:	8000e800 	call	8000e80 <___svfprintf_internal_r>
 8000d68:	d8c00017 	ldw	r3,0(sp)
 8000d6c:	18000005 	stb	zero,0(r3)
 8000d70:	dfc01a17 	ldw	ra,104(sp)
 8000d74:	dec01c04 	addi	sp,sp,112
 8000d78:	f800283a 	ret

08000d7c <sprintf>:
 8000d7c:	deffe304 	addi	sp,sp,-116
 8000d80:	2007883a 	mov	r3,r4
 8000d84:	dfc01a15 	stw	ra,104(sp)
 8000d88:	d9801b15 	stw	r6,108(sp)
 8000d8c:	d9c01c15 	stw	r7,112(sp)
 8000d90:	01020074 	movhi	r4,2049
 8000d94:	2100f604 	addi	r4,r4,984
 8000d98:	21000017 	ldw	r4,0(r4)
 8000d9c:	00a00034 	movhi	r2,32768
 8000da0:	10bfffc4 	addi	r2,r2,-1
 8000da4:	280d883a 	mov	r6,r5
 8000da8:	02008204 	movi	r8,520
 8000dac:	d8800215 	stw	r2,8(sp)
 8000db0:	d8800515 	stw	r2,20(sp)
 8000db4:	d9c01b04 	addi	r7,sp,108
 8000db8:	d80b883a 	mov	r5,sp
 8000dbc:	00bfffc4 	movi	r2,-1
 8000dc0:	d8c00015 	stw	r3,0(sp)
 8000dc4:	d8c00415 	stw	r3,16(sp)
 8000dc8:	da00030d 	sth	r8,12(sp)
 8000dcc:	d880038d 	sth	r2,14(sp)
 8000dd0:	8000e800 	call	8000e80 <___svfprintf_internal_r>
 8000dd4:	d8c00017 	ldw	r3,0(sp)
 8000dd8:	18000005 	stb	zero,0(r3)
 8000ddc:	dfc01a17 	ldw	ra,104(sp)
 8000de0:	dec01d04 	addi	sp,sp,116
 8000de4:	f800283a 	ret

08000de8 <strlen>:
 8000de8:	208000cc 	andi	r2,r4,3
 8000dec:	10002026 	beq	r2,zero,8000e70 <strlen+0x88>
 8000df0:	20800007 	ldb	r2,0(r4)
 8000df4:	10002026 	beq	r2,zero,8000e78 <strlen+0x90>
 8000df8:	2005883a 	mov	r2,r4
 8000dfc:	00000206 	br	8000e08 <strlen+0x20>
 8000e00:	10c00007 	ldb	r3,0(r2)
 8000e04:	18001826 	beq	r3,zero,8000e68 <strlen+0x80>
 8000e08:	10800044 	addi	r2,r2,1
 8000e0c:	10c000cc 	andi	r3,r2,3
 8000e10:	183ffb1e 	bne	r3,zero,8000e00 <__alt_data_end+0xfc000e00>
 8000e14:	10c00017 	ldw	r3,0(r2)
 8000e18:	01ffbff4 	movhi	r7,65279
 8000e1c:	39ffbfc4 	addi	r7,r7,-257
 8000e20:	00ca303a 	nor	r5,zero,r3
 8000e24:	01a02074 	movhi	r6,32897
 8000e28:	19c7883a 	add	r3,r3,r7
 8000e2c:	31a02004 	addi	r6,r6,-32640
 8000e30:	1946703a 	and	r3,r3,r5
 8000e34:	1986703a 	and	r3,r3,r6
 8000e38:	1800091e 	bne	r3,zero,8000e60 <strlen+0x78>
 8000e3c:	10800104 	addi	r2,r2,4
 8000e40:	10c00017 	ldw	r3,0(r2)
 8000e44:	19cb883a 	add	r5,r3,r7
 8000e48:	00c6303a 	nor	r3,zero,r3
 8000e4c:	28c6703a 	and	r3,r5,r3
 8000e50:	1986703a 	and	r3,r3,r6
 8000e54:	183ff926 	beq	r3,zero,8000e3c <__alt_data_end+0xfc000e3c>
 8000e58:	00000106 	br	8000e60 <strlen+0x78>
 8000e5c:	10800044 	addi	r2,r2,1
 8000e60:	10c00007 	ldb	r3,0(r2)
 8000e64:	183ffd1e 	bne	r3,zero,8000e5c <__alt_data_end+0xfc000e5c>
 8000e68:	1105c83a 	sub	r2,r2,r4
 8000e6c:	f800283a 	ret
 8000e70:	2005883a 	mov	r2,r4
 8000e74:	003fe706 	br	8000e14 <__alt_data_end+0xfc000e14>
 8000e78:	0005883a 	mov	r2,zero
 8000e7c:	f800283a 	ret

08000e80 <___svfprintf_internal_r>:
 8000e80:	deffb704 	addi	sp,sp,-292
 8000e84:	dfc04815 	stw	ra,288(sp)
 8000e88:	ddc04615 	stw	r23,280(sp)
 8000e8c:	d9402d15 	stw	r5,180(sp)
 8000e90:	d9003915 	stw	r4,228(sp)
 8000e94:	302f883a 	mov	r23,r6
 8000e98:	d9c02e15 	stw	r7,184(sp)
 8000e9c:	df004715 	stw	fp,284(sp)
 8000ea0:	dd804515 	stw	r22,276(sp)
 8000ea4:	dd404415 	stw	r21,272(sp)
 8000ea8:	dd004315 	stw	r20,268(sp)
 8000eac:	dcc04215 	stw	r19,264(sp)
 8000eb0:	dc804115 	stw	r18,260(sp)
 8000eb4:	dc404015 	stw	r17,256(sp)
 8000eb8:	dc003f15 	stw	r16,252(sp)
 8000ebc:	8004a980 	call	8004a98 <_localeconv_r>
 8000ec0:	10800017 	ldw	r2,0(r2)
 8000ec4:	1009883a 	mov	r4,r2
 8000ec8:	d8803415 	stw	r2,208(sp)
 8000ecc:	8000de80 	call	8000de8 <strlen>
 8000ed0:	d8c02d17 	ldw	r3,180(sp)
 8000ed4:	d8803815 	stw	r2,224(sp)
 8000ed8:	1880030b 	ldhu	r2,12(r3)
 8000edc:	1080200c 	andi	r2,r2,128
 8000ee0:	10000226 	beq	r2,zero,8000eec <___svfprintf_internal_r+0x6c>
 8000ee4:	18800417 	ldw	r2,16(r3)
 8000ee8:	1006b126 	beq	r2,zero,80029b0 <___svfprintf_internal_r+0x1b30>
 8000eec:	dcc03917 	ldw	r19,228(sp)
 8000ef0:	d8c00404 	addi	r3,sp,16
 8000ef4:	05420074 	movhi	r21,2049
 8000ef8:	d9001e04 	addi	r4,sp,120
 8000efc:	ad78e184 	addi	r21,r21,-7290
 8000f00:	d8c01e15 	stw	r3,120(sp)
 8000f04:	d8002015 	stw	zero,128(sp)
 8000f08:	d8001f15 	stw	zero,124(sp)
 8000f0c:	d8003315 	stw	zero,204(sp)
 8000f10:	d8003615 	stw	zero,216(sp)
 8000f14:	d8003715 	stw	zero,220(sp)
 8000f18:	1811883a 	mov	r8,r3
 8000f1c:	d8003a15 	stw	zero,232(sp)
 8000f20:	d8003b15 	stw	zero,236(sp)
 8000f24:	d8002f15 	stw	zero,188(sp)
 8000f28:	d9002815 	stw	r4,160(sp)
 8000f2c:	b8800007 	ldb	r2,0(r23)
 8000f30:	10027726 	beq	r2,zero,8001910 <___svfprintf_internal_r+0xa90>
 8000f34:	00c00944 	movi	r3,37
 8000f38:	b823883a 	mov	r17,r23
 8000f3c:	10c0021e 	bne	r2,r3,8000f48 <___svfprintf_internal_r+0xc8>
 8000f40:	00001406 	br	8000f94 <___svfprintf_internal_r+0x114>
 8000f44:	10c00326 	beq	r2,r3,8000f54 <___svfprintf_internal_r+0xd4>
 8000f48:	8c400044 	addi	r17,r17,1
 8000f4c:	88800007 	ldb	r2,0(r17)
 8000f50:	103ffc1e 	bne	r2,zero,8000f44 <__alt_data_end+0xfc000f44>
 8000f54:	8de1c83a 	sub	r16,r17,r23
 8000f58:	80000e26 	beq	r16,zero,8000f94 <___svfprintf_internal_r+0x114>
 8000f5c:	d8c02017 	ldw	r3,128(sp)
 8000f60:	d8801f17 	ldw	r2,124(sp)
 8000f64:	45c00015 	stw	r23,0(r8)
 8000f68:	1c07883a 	add	r3,r3,r16
 8000f6c:	10800044 	addi	r2,r2,1
 8000f70:	d8c02015 	stw	r3,128(sp)
 8000f74:	44000115 	stw	r16,4(r8)
 8000f78:	d8801f15 	stw	r2,124(sp)
 8000f7c:	00c001c4 	movi	r3,7
 8000f80:	18809916 	blt	r3,r2,80011e8 <___svfprintf_internal_r+0x368>
 8000f84:	42000204 	addi	r8,r8,8
 8000f88:	d9402f17 	ldw	r5,188(sp)
 8000f8c:	2c0b883a 	add	r5,r5,r16
 8000f90:	d9402f15 	stw	r5,188(sp)
 8000f94:	88800007 	ldb	r2,0(r17)
 8000f98:	10009a26 	beq	r2,zero,8001204 <___svfprintf_internal_r+0x384>
 8000f9c:	8dc00044 	addi	r23,r17,1
 8000fa0:	8c400047 	ldb	r17,1(r17)
 8000fa4:	0021883a 	mov	r16,zero
 8000fa8:	00bfffc4 	movi	r2,-1
 8000fac:	0025883a 	mov	r18,zero
 8000fb0:	dc002905 	stb	r16,164(sp)
 8000fb4:	d8002785 	stb	zero,158(sp)
 8000fb8:	d8002b05 	stb	zero,172(sp)
 8000fbc:	d8802a15 	stw	r2,168(sp)
 8000fc0:	d8003115 	stw	zero,196(sp)
 8000fc4:	05001604 	movi	r20,88
 8000fc8:	05800244 	movi	r22,9
 8000fcc:	4039883a 	mov	fp,r8
 8000fd0:	9021883a 	mov	r16,r18
 8000fd4:	bdc00044 	addi	r23,r23,1
 8000fd8:	88bff804 	addi	r2,r17,-32
 8000fdc:	a0831e36 	bltu	r20,r2,8001c58 <___svfprintf_internal_r+0xdd8>
 8000fe0:	100490ba 	slli	r2,r2,2
 8000fe4:	00c20034 	movhi	r3,2048
 8000fe8:	18c3fe04 	addi	r3,r3,4088
 8000fec:	10c5883a 	add	r2,r2,r3
 8000ff0:	10800017 	ldw	r2,0(r2)
 8000ff4:	1000683a 	jmp	r2
 8000ff8:	08001ba0 	cmpeqi	zero,at,110
 8000ffc:	08001c58 	cmpnei	zero,at,113
 8001000:	08001c58 	cmpnei	zero,at,113
 8001004:	08001b94 	ori	zero,at,110
 8001008:	08001c58 	cmpnei	zero,at,113
 800100c:	08001c58 	cmpnei	zero,at,113
 8001010:	08001c58 	cmpnei	zero,at,113
 8001014:	08001c58 	cmpnei	zero,at,113
 8001018:	08001c58 	cmpnei	zero,at,113
 800101c:	08001c58 	cmpnei	zero,at,113
 8001020:	08001260 	cmpeqi	zero,at,73
 8001024:	08001aa4 	muli	zero,at,106
 8001028:	08001c58 	cmpnei	zero,at,113
 800102c:	0800116c 	andhi	zero,at,69
 8001030:	08001284 	addi	zero,at,74
 8001034:	08001c58 	cmpnei	zero,at,113
 8001038:	08001310 	cmplti	zero,at,76
 800103c:	080012d4 	ori	zero,at,75
 8001040:	080012d4 	ori	zero,at,75
 8001044:	080012d4 	ori	zero,at,75
 8001048:	080012d4 	ori	zero,at,75
 800104c:	080012d4 	ori	zero,at,75
 8001050:	080012d4 	ori	zero,at,75
 8001054:	080012d4 	ori	zero,at,75
 8001058:	080012d4 	ori	zero,at,75
 800105c:	080012d4 	ori	zero,at,75
 8001060:	08001c58 	cmpnei	zero,at,113
 8001064:	08001c58 	cmpnei	zero,at,113
 8001068:	08001c58 	cmpnei	zero,at,113
 800106c:	08001c58 	cmpnei	zero,at,113
 8001070:	08001c58 	cmpnei	zero,at,113
 8001074:	08001c58 	cmpnei	zero,at,113
 8001078:	08001c58 	cmpnei	zero,at,113
 800107c:	08001c58 	cmpnei	zero,at,113
 8001080:	08001c58 	cmpnei	zero,at,113
 8001084:	08001c58 	cmpnei	zero,at,113
 8001088:	080013d4 	ori	zero,at,79
 800108c:	0800131c 	xori	zero,at,76
 8001090:	08001c58 	cmpnei	zero,at,113
 8001094:	0800131c 	xori	zero,at,76
 8001098:	08001c58 	cmpnei	zero,at,113
 800109c:	08001c58 	cmpnei	zero,at,113
 80010a0:	08001c58 	cmpnei	zero,at,113
 80010a4:	08001c58 	cmpnei	zero,at,113
 80010a8:	080013c8 	cmpgei	zero,at,79
 80010ac:	08001c58 	cmpnei	zero,at,113
 80010b0:	08001c58 	cmpnei	zero,at,113
 80010b4:	0800149c 	xori	zero,at,82
 80010b8:	08001c58 	cmpnei	zero,at,113
 80010bc:	08001c58 	cmpnei	zero,at,113
 80010c0:	08001c58 	cmpnei	zero,at,113
 80010c4:	08001c58 	cmpnei	zero,at,113
 80010c8:	08001c58 	cmpnei	zero,at,113
 80010cc:	08001918 	cmpnei	zero,at,100
 80010d0:	08001c58 	cmpnei	zero,at,113
 80010d4:	08001c58 	cmpnei	zero,at,113
 80010d8:	08001984 	addi	zero,at,102
 80010dc:	08001c58 	cmpnei	zero,at,113
 80010e0:	08001c58 	cmpnei	zero,at,113
 80010e4:	08001c58 	cmpnei	zero,at,113
 80010e8:	08001c58 	cmpnei	zero,at,113
 80010ec:	08001c58 	cmpnei	zero,at,113
 80010f0:	08001c58 	cmpnei	zero,at,113
 80010f4:	08001c58 	cmpnei	zero,at,113
 80010f8:	08001c58 	cmpnei	zero,at,113
 80010fc:	08001c58 	cmpnei	zero,at,113
 8001100:	08001c58 	cmpnei	zero,at,113
 8001104:	08001a40 	call	8001a4 <__alt_mem_onchip_memory2_0+0x8001a4>
 8001108:	08001bc0 	call	8001bc <__alt_mem_onchip_memory2_0+0x8001bc>
 800110c:	0800131c 	xori	zero,at,76
 8001110:	0800131c 	xori	zero,at,76
 8001114:	0800131c 	xori	zero,at,76
 8001118:	08001c34 	orhi	zero,at,112
 800111c:	08001bc0 	call	8001bc <__alt_mem_onchip_memory2_0+0x8001bc>
 8001120:	08001c58 	cmpnei	zero,at,113
 8001124:	08001c58 	cmpnei	zero,at,113
 8001128:	08001be0 	cmpeqi	zero,at,111
 800112c:	08001c58 	cmpnei	zero,at,113
 8001130:	08001bf4 	orhi	zero,at,111
 8001134:	08001a84 	addi	zero,at,106
 8001138:	08001178 	rdprs	zero,at,69
 800113c:	08001abc 	xorhi	zero,at,106
 8001140:	08001c58 	cmpnei	zero,at,113
 8001144:	08001ac8 	cmpgei	zero,at,107
 8001148:	08001c58 	cmpnei	zero,at,113
 800114c:	08001b2c 	andhi	zero,at,108
 8001150:	08001c58 	cmpnei	zero,at,113
 8001154:	08001c58 	cmpnei	zero,at,113
 8001158:	08001b4c 	andi	zero,at,109
 800115c:	d8c03117 	ldw	r3,196(sp)
 8001160:	d8802e15 	stw	r2,184(sp)
 8001164:	00c7c83a 	sub	r3,zero,r3
 8001168:	d8c03115 	stw	r3,196(sp)
 800116c:	84000114 	ori	r16,r16,4
 8001170:	bc400007 	ldb	r17,0(r23)
 8001174:	003f9706 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001178:	00800c04 	movi	r2,48
 800117c:	d8802705 	stb	r2,156(sp)
 8001180:	00801e04 	movi	r2,120
 8001184:	d8802745 	stb	r2,157(sp)
 8001188:	d9002a17 	ldw	r4,168(sp)
 800118c:	d8802e17 	ldw	r2,184(sp)
 8001190:	d8002785 	stb	zero,158(sp)
 8001194:	e011883a 	mov	r8,fp
 8001198:	10c00104 	addi	r3,r2,4
 800119c:	15000017 	ldw	r20,0(r2)
 80011a0:	002d883a 	mov	r22,zero
 80011a4:	80800094 	ori	r2,r16,2
 80011a8:	2002b616 	blt	r4,zero,8001c84 <___svfprintf_internal_r+0xe04>
 80011ac:	00bfdfc4 	movi	r2,-129
 80011b0:	80a4703a 	and	r18,r16,r2
 80011b4:	d8c02e15 	stw	r3,184(sp)
 80011b8:	94800094 	ori	r18,r18,2
 80011bc:	a002a01e 	bne	r20,zero,8001c40 <___svfprintf_internal_r+0xdc0>
 80011c0:	01420074 	movhi	r5,2049
 80011c4:	2978da04 	addi	r5,r5,-7320
 80011c8:	d9403a15 	stw	r5,232(sp)
 80011cc:	04401e04 	movi	r17,120
 80011d0:	d8c02a17 	ldw	r3,168(sp)
 80011d4:	0039883a 	mov	fp,zero
 80011d8:	1801e626 	beq	r3,zero,8001974 <___svfprintf_internal_r+0xaf4>
 80011dc:	0029883a 	mov	r20,zero
 80011e0:	002d883a 	mov	r22,zero
 80011e4:	00020506 	br	80019fc <___svfprintf_internal_r+0xb7c>
 80011e8:	d9402d17 	ldw	r5,180(sp)
 80011ec:	d9801e04 	addi	r6,sp,120
 80011f0:	9809883a 	mov	r4,r19
 80011f4:	800675c0 	call	800675c <__ssprint_r>
 80011f8:	1000081e 	bne	r2,zero,800121c <___svfprintf_internal_r+0x39c>
 80011fc:	da000404 	addi	r8,sp,16
 8001200:	003f6106 	br	8000f88 <__alt_data_end+0xfc000f88>
 8001204:	d8802017 	ldw	r2,128(sp)
 8001208:	10000426 	beq	r2,zero,800121c <___svfprintf_internal_r+0x39c>
 800120c:	d9402d17 	ldw	r5,180(sp)
 8001210:	d9003917 	ldw	r4,228(sp)
 8001214:	d9801e04 	addi	r6,sp,120
 8001218:	800675c0 	call	800675c <__ssprint_r>
 800121c:	d8802d17 	ldw	r2,180(sp)
 8001220:	10c0030b 	ldhu	r3,12(r2)
 8001224:	d8802f17 	ldw	r2,188(sp)
 8001228:	18c0100c 	andi	r3,r3,64
 800122c:	1806251e 	bne	r3,zero,8002ac4 <___svfprintf_internal_r+0x1c44>
 8001230:	dfc04817 	ldw	ra,288(sp)
 8001234:	df004717 	ldw	fp,284(sp)
 8001238:	ddc04617 	ldw	r23,280(sp)
 800123c:	dd804517 	ldw	r22,276(sp)
 8001240:	dd404417 	ldw	r21,272(sp)
 8001244:	dd004317 	ldw	r20,268(sp)
 8001248:	dcc04217 	ldw	r19,264(sp)
 800124c:	dc804117 	ldw	r18,260(sp)
 8001250:	dc404017 	ldw	r17,256(sp)
 8001254:	dc003f17 	ldw	r16,252(sp)
 8001258:	dec04904 	addi	sp,sp,292
 800125c:	f800283a 	ret
 8001260:	d9002e17 	ldw	r4,184(sp)
 8001264:	d9402e17 	ldw	r5,184(sp)
 8001268:	21000017 	ldw	r4,0(r4)
 800126c:	28800104 	addi	r2,r5,4
 8001270:	d9003115 	stw	r4,196(sp)
 8001274:	203fb916 	blt	r4,zero,800115c <__alt_data_end+0xfc00115c>
 8001278:	d8802e15 	stw	r2,184(sp)
 800127c:	bc400007 	ldb	r17,0(r23)
 8001280:	003f5406 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001284:	bc400007 	ldb	r17,0(r23)
 8001288:	01000a84 	movi	r4,42
 800128c:	b8c00044 	addi	r3,r23,1
 8001290:	89076926 	beq	r17,r4,8003038 <___svfprintf_internal_r+0x21b8>
 8001294:	8cbff404 	addi	r18,r17,-48
 8001298:	b486b936 	bltu	r22,r18,8002d80 <___svfprintf_internal_r+0x1f00>
 800129c:	0009883a 	mov	r4,zero
 80012a0:	1823883a 	mov	r17,r3
 80012a4:	01400284 	movi	r5,10
 80012a8:	8000c800 	call	8000c80 <__mulsi3>
 80012ac:	88c00007 	ldb	r3,0(r17)
 80012b0:	1489883a 	add	r4,r2,r18
 80012b4:	8dc00044 	addi	r23,r17,1
 80012b8:	1cbff404 	addi	r18,r3,-48
 80012bc:	b823883a 	mov	r17,r23
 80012c0:	b4bff82e 	bgeu	r22,r18,80012a4 <__alt_data_end+0xfc0012a4>
 80012c4:	1823883a 	mov	r17,r3
 80012c8:	20060416 	blt	r4,zero,8002adc <___svfprintf_internal_r+0x1c5c>
 80012cc:	d9002a15 	stw	r4,168(sp)
 80012d0:	003f4106 	br	8000fd8 <__alt_data_end+0xfc000fd8>
 80012d4:	8cbff404 	addi	r18,r17,-48
 80012d8:	d8003115 	stw	zero,196(sp)
 80012dc:	0009883a 	mov	r4,zero
 80012e0:	b823883a 	mov	r17,r23
 80012e4:	01400284 	movi	r5,10
 80012e8:	8000c800 	call	8000c80 <__mulsi3>
 80012ec:	88c00007 	ldb	r3,0(r17)
 80012f0:	9089883a 	add	r4,r18,r2
 80012f4:	bdc00044 	addi	r23,r23,1
 80012f8:	1cbff404 	addi	r18,r3,-48
 80012fc:	b823883a 	mov	r17,r23
 8001300:	b4bff82e 	bgeu	r22,r18,80012e4 <__alt_data_end+0xfc0012e4>
 8001304:	1823883a 	mov	r17,r3
 8001308:	d9003115 	stw	r4,196(sp)
 800130c:	003f3206 	br	8000fd8 <__alt_data_end+0xfc000fd8>
 8001310:	84002014 	ori	r16,r16,128
 8001314:	bc400007 	ldb	r17,0(r23)
 8001318:	003f2e06 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 800131c:	8025883a 	mov	r18,r16
 8001320:	dc002903 	ldbu	r16,164(sp)
 8001324:	e011883a 	mov	r8,fp
 8001328:	84003fcc 	andi	r16,r16,255
 800132c:	8007721e 	bne	r16,zero,80030f8 <___svfprintf_internal_r+0x2278>
 8001330:	9080020c 	andi	r2,r18,8
 8001334:	1004a526 	beq	r2,zero,80025cc <___svfprintf_internal_r+0x174c>
 8001338:	d9002e17 	ldw	r4,184(sp)
 800133c:	d9402e17 	ldw	r5,184(sp)
 8001340:	d8802e17 	ldw	r2,184(sp)
 8001344:	21000017 	ldw	r4,0(r4)
 8001348:	29400117 	ldw	r5,4(r5)
 800134c:	10800204 	addi	r2,r2,8
 8001350:	d9003615 	stw	r4,216(sp)
 8001354:	d9403715 	stw	r5,220(sp)
 8001358:	d8802e15 	stw	r2,184(sp)
 800135c:	d9003617 	ldw	r4,216(sp)
 8001360:	d9403717 	ldw	r5,220(sp)
 8001364:	da003e15 	stw	r8,248(sp)
 8001368:	04000044 	movi	r16,1
 800136c:	80065b80 	call	80065b8 <__fpclassifyd>
 8001370:	da003e17 	ldw	r8,248(sp)
 8001374:	1404731e 	bne	r2,r16,8002544 <___svfprintf_internal_r+0x16c4>
 8001378:	d9003617 	ldw	r4,216(sp)
 800137c:	d9403717 	ldw	r5,220(sp)
 8001380:	000d883a 	mov	r6,zero
 8001384:	000f883a 	mov	r7,zero
 8001388:	800aa700 	call	800aa70 <__ledf2>
 800138c:	da003e17 	ldw	r8,248(sp)
 8001390:	10061b16 	blt	r2,zero,8002c00 <___svfprintf_internal_r+0x1d80>
 8001394:	df002783 	ldbu	fp,158(sp)
 8001398:	008011c4 	movi	r2,71
 800139c:	1445810e 	bge	r2,r17,80029a4 <___svfprintf_internal_r+0x1b24>
 80013a0:	04020074 	movhi	r16,2049
 80013a4:	8438d204 	addi	r16,r16,-7352
 80013a8:	00c000c4 	movi	r3,3
 80013ac:	00bfdfc4 	movi	r2,-129
 80013b0:	d8c02915 	stw	r3,164(sp)
 80013b4:	90a4703a 	and	r18,r18,r2
 80013b8:	d8c02b15 	stw	r3,172(sp)
 80013bc:	d8002a15 	stw	zero,168(sp)
 80013c0:	d8003215 	stw	zero,200(sp)
 80013c4:	00006c06 	br	8001578 <___svfprintf_internal_r+0x6f8>
 80013c8:	84000214 	ori	r16,r16,8
 80013cc:	bc400007 	ldb	r17,0(r23)
 80013d0:	003f0006 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 80013d4:	8025883a 	mov	r18,r16
 80013d8:	dc002903 	ldbu	r16,164(sp)
 80013dc:	e011883a 	mov	r8,fp
 80013e0:	84003fcc 	andi	r16,r16,255
 80013e4:	80073f1e 	bne	r16,zero,80030e4 <___svfprintf_internal_r+0x2264>
 80013e8:	94800414 	ori	r18,r18,16
 80013ec:	9080080c 	andi	r2,r18,32
 80013f0:	1003bb26 	beq	r2,zero,80022e0 <___svfprintf_internal_r+0x1460>
 80013f4:	d9002e17 	ldw	r4,184(sp)
 80013f8:	20800117 	ldw	r2,4(r4)
 80013fc:	25000017 	ldw	r20,0(r4)
 8001400:	21000204 	addi	r4,r4,8
 8001404:	d9002e15 	stw	r4,184(sp)
 8001408:	102d883a 	mov	r22,r2
 800140c:	1003bd16 	blt	r2,zero,8002304 <___svfprintf_internal_r+0x1484>
 8001410:	d9002a17 	ldw	r4,168(sp)
 8001414:	df002783 	ldbu	fp,158(sp)
 8001418:	2003d016 	blt	r4,zero,800235c <___svfprintf_internal_r+0x14dc>
 800141c:	00ffdfc4 	movi	r3,-129
 8001420:	a584b03a 	or	r2,r20,r22
 8001424:	90e4703a 	and	r18,r18,r3
 8001428:	10015026 	beq	r2,zero,800196c <___svfprintf_internal_r+0xaec>
 800142c:	b0037026 	beq	r22,zero,80021f0 <___svfprintf_internal_r+0x1370>
 8001430:	dc402915 	stw	r17,164(sp)
 8001434:	dc001e04 	addi	r16,sp,120
 8001438:	b023883a 	mov	r17,r22
 800143c:	402d883a 	mov	r22,r8
 8001440:	a009883a 	mov	r4,r20
 8001444:	880b883a 	mov	r5,r17
 8001448:	01800284 	movi	r6,10
 800144c:	000f883a 	mov	r7,zero
 8001450:	80090cc0 	call	80090cc <__umoddi3>
 8001454:	10800c04 	addi	r2,r2,48
 8001458:	843fffc4 	addi	r16,r16,-1
 800145c:	a009883a 	mov	r4,r20
 8001460:	880b883a 	mov	r5,r17
 8001464:	80800005 	stb	r2,0(r16)
 8001468:	01800284 	movi	r6,10
 800146c:	000f883a 	mov	r7,zero
 8001470:	8008ad00 	call	8008ad0 <__udivdi3>
 8001474:	1029883a 	mov	r20,r2
 8001478:	10c4b03a 	or	r2,r2,r3
 800147c:	1823883a 	mov	r17,r3
 8001480:	103fef1e 	bne	r2,zero,8001440 <__alt_data_end+0xfc001440>
 8001484:	d8c02817 	ldw	r3,160(sp)
 8001488:	dc402917 	ldw	r17,164(sp)
 800148c:	b011883a 	mov	r8,r22
 8001490:	1c07c83a 	sub	r3,r3,r16
 8001494:	d8c02b15 	stw	r3,172(sp)
 8001498:	00003106 	br	8001560 <___svfprintf_internal_r+0x6e0>
 800149c:	8025883a 	mov	r18,r16
 80014a0:	dc002903 	ldbu	r16,164(sp)
 80014a4:	e011883a 	mov	r8,fp
 80014a8:	84003fcc 	andi	r16,r16,255
 80014ac:	80070a1e 	bne	r16,zero,80030d8 <___svfprintf_internal_r+0x2258>
 80014b0:	94800414 	ori	r18,r18,16
 80014b4:	9080080c 	andi	r2,r18,32
 80014b8:	1002f626 	beq	r2,zero,8002094 <___svfprintf_internal_r+0x1214>
 80014bc:	d9002e17 	ldw	r4,184(sp)
 80014c0:	d9402a17 	ldw	r5,168(sp)
 80014c4:	d8002785 	stb	zero,158(sp)
 80014c8:	20800204 	addi	r2,r4,8
 80014cc:	25000017 	ldw	r20,0(r4)
 80014d0:	25800117 	ldw	r22,4(r4)
 80014d4:	28043716 	blt	r5,zero,80025b4 <___svfprintf_internal_r+0x1734>
 80014d8:	013fdfc4 	movi	r4,-129
 80014dc:	a586b03a 	or	r3,r20,r22
 80014e0:	d8802e15 	stw	r2,184(sp)
 80014e4:	9124703a 	and	r18,r18,r4
 80014e8:	1802f71e 	bne	r3,zero,80020c8 <___svfprintf_internal_r+0x1248>
 80014ec:	d9402a17 	ldw	r5,168(sp)
 80014f0:	0039883a 	mov	fp,zero
 80014f4:	2806df26 	beq	r5,zero,8003074 <___svfprintf_internal_r+0x21f4>
 80014f8:	0029883a 	mov	r20,zero
 80014fc:	002d883a 	mov	r22,zero
 8001500:	dc001e04 	addi	r16,sp,120
 8001504:	a006d0fa 	srli	r3,r20,3
 8001508:	b008977a 	slli	r4,r22,29
 800150c:	b02cd0fa 	srli	r22,r22,3
 8001510:	a50001cc 	andi	r20,r20,7
 8001514:	a0800c04 	addi	r2,r20,48
 8001518:	843fffc4 	addi	r16,r16,-1
 800151c:	20e8b03a 	or	r20,r4,r3
 8001520:	80800005 	stb	r2,0(r16)
 8001524:	a586b03a 	or	r3,r20,r22
 8001528:	183ff61e 	bne	r3,zero,8001504 <__alt_data_end+0xfc001504>
 800152c:	90c0004c 	andi	r3,r18,1
 8001530:	18013f26 	beq	r3,zero,8001a30 <___svfprintf_internal_r+0xbb0>
 8001534:	10803fcc 	andi	r2,r2,255
 8001538:	1080201c 	xori	r2,r2,128
 800153c:	10bfe004 	addi	r2,r2,-128
 8001540:	00c00c04 	movi	r3,48
 8001544:	10c13a26 	beq	r2,r3,8001a30 <___svfprintf_internal_r+0xbb0>
 8001548:	80ffffc5 	stb	r3,-1(r16)
 800154c:	d8c02817 	ldw	r3,160(sp)
 8001550:	80bfffc4 	addi	r2,r16,-1
 8001554:	1021883a 	mov	r16,r2
 8001558:	1887c83a 	sub	r3,r3,r2
 800155c:	d8c02b15 	stw	r3,172(sp)
 8001560:	d8802b17 	ldw	r2,172(sp)
 8001564:	d9002a17 	ldw	r4,168(sp)
 8001568:	1100010e 	bge	r2,r4,8001570 <___svfprintf_internal_r+0x6f0>
 800156c:	2005883a 	mov	r2,r4
 8001570:	d8802915 	stw	r2,164(sp)
 8001574:	d8003215 	stw	zero,200(sp)
 8001578:	e7003fcc 	andi	fp,fp,255
 800157c:	e700201c 	xori	fp,fp,128
 8001580:	e73fe004 	addi	fp,fp,-128
 8001584:	e0000326 	beq	fp,zero,8001594 <___svfprintf_internal_r+0x714>
 8001588:	d8c02917 	ldw	r3,164(sp)
 800158c:	18c00044 	addi	r3,r3,1
 8001590:	d8c02915 	stw	r3,164(sp)
 8001594:	90c0008c 	andi	r3,r18,2
 8001598:	d8c02c15 	stw	r3,176(sp)
 800159c:	18000326 	beq	r3,zero,80015ac <___svfprintf_internal_r+0x72c>
 80015a0:	d8c02917 	ldw	r3,164(sp)
 80015a4:	18c00084 	addi	r3,r3,2
 80015a8:	d8c02915 	stw	r3,164(sp)
 80015ac:	90c0210c 	andi	r3,r18,132
 80015b0:	d8c03015 	stw	r3,192(sp)
 80015b4:	1801c31e 	bne	r3,zero,8001cc4 <___svfprintf_internal_r+0xe44>
 80015b8:	d9003117 	ldw	r4,196(sp)
 80015bc:	d8c02917 	ldw	r3,164(sp)
 80015c0:	20e9c83a 	sub	r20,r4,r3
 80015c4:	0501bf0e 	bge	zero,r20,8001cc4 <___svfprintf_internal_r+0xe44>
 80015c8:	02400404 	movi	r9,16
 80015cc:	d8c02017 	ldw	r3,128(sp)
 80015d0:	d8801f17 	ldw	r2,124(sp)
 80015d4:	4d053d0e 	bge	r9,r20,8002acc <___svfprintf_internal_r+0x1c4c>
 80015d8:	01420074 	movhi	r5,2049
 80015dc:	2978e584 	addi	r5,r5,-7274
 80015e0:	dc403c15 	stw	r17,240(sp)
 80015e4:	d9403515 	stw	r5,212(sp)
 80015e8:	a023883a 	mov	r17,r20
 80015ec:	482d883a 	mov	r22,r9
 80015f0:	9029883a 	mov	r20,r18
 80015f4:	070001c4 	movi	fp,7
 80015f8:	8025883a 	mov	r18,r16
 80015fc:	dc002d17 	ldw	r16,180(sp)
 8001600:	00000306 	br	8001610 <___svfprintf_internal_r+0x790>
 8001604:	8c7ffc04 	addi	r17,r17,-16
 8001608:	42000204 	addi	r8,r8,8
 800160c:	b440130e 	bge	r22,r17,800165c <___svfprintf_internal_r+0x7dc>
 8001610:	01020074 	movhi	r4,2049
 8001614:	18c00404 	addi	r3,r3,16
 8001618:	10800044 	addi	r2,r2,1
 800161c:	2138e584 	addi	r4,r4,-7274
 8001620:	41000015 	stw	r4,0(r8)
 8001624:	45800115 	stw	r22,4(r8)
 8001628:	d8c02015 	stw	r3,128(sp)
 800162c:	d8801f15 	stw	r2,124(sp)
 8001630:	e0bff40e 	bge	fp,r2,8001604 <__alt_data_end+0xfc001604>
 8001634:	d9801e04 	addi	r6,sp,120
 8001638:	800b883a 	mov	r5,r16
 800163c:	9809883a 	mov	r4,r19
 8001640:	800675c0 	call	800675c <__ssprint_r>
 8001644:	103ef51e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001648:	8c7ffc04 	addi	r17,r17,-16
 800164c:	d8c02017 	ldw	r3,128(sp)
 8001650:	d8801f17 	ldw	r2,124(sp)
 8001654:	da000404 	addi	r8,sp,16
 8001658:	b47fed16 	blt	r22,r17,8001610 <__alt_data_end+0xfc001610>
 800165c:	9021883a 	mov	r16,r18
 8001660:	a025883a 	mov	r18,r20
 8001664:	8829883a 	mov	r20,r17
 8001668:	dc403c17 	ldw	r17,240(sp)
 800166c:	d9403517 	ldw	r5,212(sp)
 8001670:	a0c7883a 	add	r3,r20,r3
 8001674:	10800044 	addi	r2,r2,1
 8001678:	41400015 	stw	r5,0(r8)
 800167c:	45000115 	stw	r20,4(r8)
 8001680:	d8c02015 	stw	r3,128(sp)
 8001684:	d8801f15 	stw	r2,124(sp)
 8001688:	010001c4 	movi	r4,7
 800168c:	2082c116 	blt	r4,r2,8002194 <___svfprintf_internal_r+0x1314>
 8001690:	df002787 	ldb	fp,158(sp)
 8001694:	42000204 	addi	r8,r8,8
 8001698:	e0000c26 	beq	fp,zero,80016cc <___svfprintf_internal_r+0x84c>
 800169c:	d8801f17 	ldw	r2,124(sp)
 80016a0:	d9002784 	addi	r4,sp,158
 80016a4:	18c00044 	addi	r3,r3,1
 80016a8:	10800044 	addi	r2,r2,1
 80016ac:	41000015 	stw	r4,0(r8)
 80016b0:	01000044 	movi	r4,1
 80016b4:	41000115 	stw	r4,4(r8)
 80016b8:	d8c02015 	stw	r3,128(sp)
 80016bc:	d8801f15 	stw	r2,124(sp)
 80016c0:	010001c4 	movi	r4,7
 80016c4:	20825a16 	blt	r4,r2,8002030 <___svfprintf_internal_r+0x11b0>
 80016c8:	42000204 	addi	r8,r8,8
 80016cc:	d8802c17 	ldw	r2,176(sp)
 80016d0:	10000c26 	beq	r2,zero,8001704 <___svfprintf_internal_r+0x884>
 80016d4:	d8801f17 	ldw	r2,124(sp)
 80016d8:	d9002704 	addi	r4,sp,156
 80016dc:	18c00084 	addi	r3,r3,2
 80016e0:	10800044 	addi	r2,r2,1
 80016e4:	41000015 	stw	r4,0(r8)
 80016e8:	01000084 	movi	r4,2
 80016ec:	41000115 	stw	r4,4(r8)
 80016f0:	d8c02015 	stw	r3,128(sp)
 80016f4:	d8801f15 	stw	r2,124(sp)
 80016f8:	010001c4 	movi	r4,7
 80016fc:	20825416 	blt	r4,r2,8002050 <___svfprintf_internal_r+0x11d0>
 8001700:	42000204 	addi	r8,r8,8
 8001704:	d9003017 	ldw	r4,192(sp)
 8001708:	00802004 	movi	r2,128
 800170c:	2081b926 	beq	r4,r2,8001df4 <___svfprintf_internal_r+0xf74>
 8001710:	d9402a17 	ldw	r5,168(sp)
 8001714:	d8802b17 	ldw	r2,172(sp)
 8001718:	28adc83a 	sub	r22,r5,r2
 800171c:	05802f0e 	bge	zero,r22,80017dc <___svfprintf_internal_r+0x95c>
 8001720:	07000404 	movi	fp,16
 8001724:	d8801f17 	ldw	r2,124(sp)
 8001728:	e583e20e 	bge	fp,r22,80026b4 <___svfprintf_internal_r+0x1834>
 800172c:	01420074 	movhi	r5,2049
 8001730:	2978e184 	addi	r5,r5,-7290
 8001734:	dc402a15 	stw	r17,168(sp)
 8001738:	d9402c15 	stw	r5,176(sp)
 800173c:	b023883a 	mov	r17,r22
 8001740:	050001c4 	movi	r20,7
 8001744:	902d883a 	mov	r22,r18
 8001748:	8025883a 	mov	r18,r16
 800174c:	dc002d17 	ldw	r16,180(sp)
 8001750:	00000306 	br	8001760 <___svfprintf_internal_r+0x8e0>
 8001754:	8c7ffc04 	addi	r17,r17,-16
 8001758:	42000204 	addi	r8,r8,8
 800175c:	e440110e 	bge	fp,r17,80017a4 <___svfprintf_internal_r+0x924>
 8001760:	18c00404 	addi	r3,r3,16
 8001764:	10800044 	addi	r2,r2,1
 8001768:	45400015 	stw	r21,0(r8)
 800176c:	47000115 	stw	fp,4(r8)
 8001770:	d8c02015 	stw	r3,128(sp)
 8001774:	d8801f15 	stw	r2,124(sp)
 8001778:	a0bff60e 	bge	r20,r2,8001754 <__alt_data_end+0xfc001754>
 800177c:	d9801e04 	addi	r6,sp,120
 8001780:	800b883a 	mov	r5,r16
 8001784:	9809883a 	mov	r4,r19
 8001788:	800675c0 	call	800675c <__ssprint_r>
 800178c:	103ea31e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001790:	8c7ffc04 	addi	r17,r17,-16
 8001794:	d8c02017 	ldw	r3,128(sp)
 8001798:	d8801f17 	ldw	r2,124(sp)
 800179c:	da000404 	addi	r8,sp,16
 80017a0:	e47fef16 	blt	fp,r17,8001760 <__alt_data_end+0xfc001760>
 80017a4:	9021883a 	mov	r16,r18
 80017a8:	b025883a 	mov	r18,r22
 80017ac:	882d883a 	mov	r22,r17
 80017b0:	dc402a17 	ldw	r17,168(sp)
 80017b4:	d9002c17 	ldw	r4,176(sp)
 80017b8:	1d87883a 	add	r3,r3,r22
 80017bc:	10800044 	addi	r2,r2,1
 80017c0:	41000015 	stw	r4,0(r8)
 80017c4:	45800115 	stw	r22,4(r8)
 80017c8:	d8c02015 	stw	r3,128(sp)
 80017cc:	d8801f15 	stw	r2,124(sp)
 80017d0:	010001c4 	movi	r4,7
 80017d4:	20820e16 	blt	r4,r2,8002010 <___svfprintf_internal_r+0x1190>
 80017d8:	42000204 	addi	r8,r8,8
 80017dc:	9080400c 	andi	r2,r18,256
 80017e0:	10013a1e 	bne	r2,zero,8001ccc <___svfprintf_internal_r+0xe4c>
 80017e4:	d9402b17 	ldw	r5,172(sp)
 80017e8:	d8801f17 	ldw	r2,124(sp)
 80017ec:	44000015 	stw	r16,0(r8)
 80017f0:	1947883a 	add	r3,r3,r5
 80017f4:	10800044 	addi	r2,r2,1
 80017f8:	41400115 	stw	r5,4(r8)
 80017fc:	d8c02015 	stw	r3,128(sp)
 8001800:	d8801f15 	stw	r2,124(sp)
 8001804:	010001c4 	movi	r4,7
 8001808:	2081f316 	blt	r4,r2,8001fd8 <___svfprintf_internal_r+0x1158>
 800180c:	42000204 	addi	r8,r8,8
 8001810:	9480010c 	andi	r18,r18,4
 8001814:	90003226 	beq	r18,zero,80018e0 <___svfprintf_internal_r+0xa60>
 8001818:	d9403117 	ldw	r5,196(sp)
 800181c:	d8802917 	ldw	r2,164(sp)
 8001820:	28a1c83a 	sub	r16,r5,r2
 8001824:	04002e0e 	bge	zero,r16,80018e0 <___svfprintf_internal_r+0xa60>
 8001828:	04400404 	movi	r17,16
 800182c:	d8801f17 	ldw	r2,124(sp)
 8001830:	8c04db0e 	bge	r17,r16,8002ba0 <___svfprintf_internal_r+0x1d20>
 8001834:	01420074 	movhi	r5,2049
 8001838:	2978e584 	addi	r5,r5,-7274
 800183c:	d9403515 	stw	r5,212(sp)
 8001840:	048001c4 	movi	r18,7
 8001844:	dd002d17 	ldw	r20,180(sp)
 8001848:	00000306 	br	8001858 <___svfprintf_internal_r+0x9d8>
 800184c:	843ffc04 	addi	r16,r16,-16
 8001850:	42000204 	addi	r8,r8,8
 8001854:	8c00130e 	bge	r17,r16,80018a4 <___svfprintf_internal_r+0xa24>
 8001858:	01020074 	movhi	r4,2049
 800185c:	18c00404 	addi	r3,r3,16
 8001860:	10800044 	addi	r2,r2,1
 8001864:	2138e584 	addi	r4,r4,-7274
 8001868:	41000015 	stw	r4,0(r8)
 800186c:	44400115 	stw	r17,4(r8)
 8001870:	d8c02015 	stw	r3,128(sp)
 8001874:	d8801f15 	stw	r2,124(sp)
 8001878:	90bff40e 	bge	r18,r2,800184c <__alt_data_end+0xfc00184c>
 800187c:	d9801e04 	addi	r6,sp,120
 8001880:	a00b883a 	mov	r5,r20
 8001884:	9809883a 	mov	r4,r19
 8001888:	800675c0 	call	800675c <__ssprint_r>
 800188c:	103e631e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001890:	843ffc04 	addi	r16,r16,-16
 8001894:	d8c02017 	ldw	r3,128(sp)
 8001898:	d8801f17 	ldw	r2,124(sp)
 800189c:	da000404 	addi	r8,sp,16
 80018a0:	8c3fed16 	blt	r17,r16,8001858 <__alt_data_end+0xfc001858>
 80018a4:	d9403517 	ldw	r5,212(sp)
 80018a8:	1c07883a 	add	r3,r3,r16
 80018ac:	10800044 	addi	r2,r2,1
 80018b0:	41400015 	stw	r5,0(r8)
 80018b4:	44000115 	stw	r16,4(r8)
 80018b8:	d8c02015 	stw	r3,128(sp)
 80018bc:	d8801f15 	stw	r2,124(sp)
 80018c0:	010001c4 	movi	r4,7
 80018c4:	2080060e 	bge	r4,r2,80018e0 <___svfprintf_internal_r+0xa60>
 80018c8:	d9402d17 	ldw	r5,180(sp)
 80018cc:	d9801e04 	addi	r6,sp,120
 80018d0:	9809883a 	mov	r4,r19
 80018d4:	800675c0 	call	800675c <__ssprint_r>
 80018d8:	103e501e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80018dc:	d8c02017 	ldw	r3,128(sp)
 80018e0:	d8803117 	ldw	r2,196(sp)
 80018e4:	d9002917 	ldw	r4,164(sp)
 80018e8:	1100010e 	bge	r2,r4,80018f0 <___svfprintf_internal_r+0xa70>
 80018ec:	2005883a 	mov	r2,r4
 80018f0:	d9402f17 	ldw	r5,188(sp)
 80018f4:	288b883a 	add	r5,r5,r2
 80018f8:	d9402f15 	stw	r5,188(sp)
 80018fc:	1801be1e 	bne	r3,zero,8001ff8 <___svfprintf_internal_r+0x1178>
 8001900:	b8800007 	ldb	r2,0(r23)
 8001904:	d8001f15 	stw	zero,124(sp)
 8001908:	da000404 	addi	r8,sp,16
 800190c:	103d891e 	bne	r2,zero,8000f34 <__alt_data_end+0xfc000f34>
 8001910:	b823883a 	mov	r17,r23
 8001914:	003d9f06 	br	8000f94 <__alt_data_end+0xfc000f94>
 8001918:	8025883a 	mov	r18,r16
 800191c:	dc002903 	ldbu	r16,164(sp)
 8001920:	e011883a 	mov	r8,fp
 8001924:	84003fcc 	andi	r16,r16,255
 8001928:	8005e61e 	bne	r16,zero,80030c4 <___svfprintf_internal_r+0x2244>
 800192c:	94800414 	ori	r18,r18,16
 8001930:	9080080c 	andi	r2,r18,32
 8001934:	10022026 	beq	r2,zero,80021b8 <___svfprintf_internal_r+0x1338>
 8001938:	d9002e17 	ldw	r4,184(sp)
 800193c:	d9402a17 	ldw	r5,168(sp)
 8001940:	d8002785 	stb	zero,158(sp)
 8001944:	20c00204 	addi	r3,r4,8
 8001948:	25000017 	ldw	r20,0(r4)
 800194c:	25800117 	ldw	r22,4(r4)
 8001950:	2803ad16 	blt	r5,zero,8002808 <___svfprintf_internal_r+0x1988>
 8001954:	013fdfc4 	movi	r4,-129
 8001958:	a584b03a 	or	r2,r20,r22
 800195c:	d8c02e15 	stw	r3,184(sp)
 8001960:	9124703a 	and	r18,r18,r4
 8001964:	0039883a 	mov	fp,zero
 8001968:	103eb01e 	bne	r2,zero,800142c <__alt_data_end+0xfc00142c>
 800196c:	d8802a17 	ldw	r2,168(sp)
 8001970:	1002e71e 	bne	r2,zero,8002510 <___svfprintf_internal_r+0x1690>
 8001974:	d8002a15 	stw	zero,168(sp)
 8001978:	d8002b15 	stw	zero,172(sp)
 800197c:	dc001e04 	addi	r16,sp,120
 8001980:	003ef706 	br	8001560 <__alt_data_end+0xfc001560>
 8001984:	8025883a 	mov	r18,r16
 8001988:	dc002903 	ldbu	r16,164(sp)
 800198c:	e011883a 	mov	r8,fp
 8001990:	84003fcc 	andi	r16,r16,255
 8001994:	8005c81e 	bne	r16,zero,80030b8 <___svfprintf_internal_r+0x2238>
 8001998:	01020074 	movhi	r4,2049
 800199c:	2138d504 	addi	r4,r4,-7340
 80019a0:	d9003a15 	stw	r4,232(sp)
 80019a4:	9080080c 	andi	r2,r18,32
 80019a8:	10007226 	beq	r2,zero,8001b74 <___svfprintf_internal_r+0xcf4>
 80019ac:	d9402e17 	ldw	r5,184(sp)
 80019b0:	2d000017 	ldw	r20,0(r5)
 80019b4:	2d800117 	ldw	r22,4(r5)
 80019b8:	29400204 	addi	r5,r5,8
 80019bc:	d9402e15 	stw	r5,184(sp)
 80019c0:	9080004c 	andi	r2,r18,1
 80019c4:	1001aa26 	beq	r2,zero,8002070 <___svfprintf_internal_r+0x11f0>
 80019c8:	a584b03a 	or	r2,r20,r22
 80019cc:	10032526 	beq	r2,zero,8002664 <___svfprintf_internal_r+0x17e4>
 80019d0:	d8c02a17 	ldw	r3,168(sp)
 80019d4:	00800c04 	movi	r2,48
 80019d8:	d8802705 	stb	r2,156(sp)
 80019dc:	dc402745 	stb	r17,157(sp)
 80019e0:	d8002785 	stb	zero,158(sp)
 80019e4:	90800094 	ori	r2,r18,2
 80019e8:	1804a316 	blt	r3,zero,8002c78 <___svfprintf_internal_r+0x1df8>
 80019ec:	00bfdfc4 	movi	r2,-129
 80019f0:	90a4703a 	and	r18,r18,r2
 80019f4:	94800094 	ori	r18,r18,2
 80019f8:	0039883a 	mov	fp,zero
 80019fc:	d9003a17 	ldw	r4,232(sp)
 8001a00:	dc001e04 	addi	r16,sp,120
 8001a04:	a08003cc 	andi	r2,r20,15
 8001a08:	b006973a 	slli	r3,r22,28
 8001a0c:	2085883a 	add	r2,r4,r2
 8001a10:	a028d13a 	srli	r20,r20,4
 8001a14:	10800003 	ldbu	r2,0(r2)
 8001a18:	b02cd13a 	srli	r22,r22,4
 8001a1c:	843fffc4 	addi	r16,r16,-1
 8001a20:	1d28b03a 	or	r20,r3,r20
 8001a24:	80800005 	stb	r2,0(r16)
 8001a28:	a584b03a 	or	r2,r20,r22
 8001a2c:	103ff51e 	bne	r2,zero,8001a04 <__alt_data_end+0xfc001a04>
 8001a30:	d8c02817 	ldw	r3,160(sp)
 8001a34:	1c07c83a 	sub	r3,r3,r16
 8001a38:	d8c02b15 	stw	r3,172(sp)
 8001a3c:	003ec806 	br	8001560 <__alt_data_end+0xfc001560>
 8001a40:	d8c02e17 	ldw	r3,184(sp)
 8001a44:	d9002e17 	ldw	r4,184(sp)
 8001a48:	8025883a 	mov	r18,r16
 8001a4c:	18800017 	ldw	r2,0(r3)
 8001a50:	21000104 	addi	r4,r4,4
 8001a54:	00c00044 	movi	r3,1
 8001a58:	e011883a 	mov	r8,fp
 8001a5c:	d8c02915 	stw	r3,164(sp)
 8001a60:	d8002785 	stb	zero,158(sp)
 8001a64:	d8801405 	stb	r2,80(sp)
 8001a68:	d9002e15 	stw	r4,184(sp)
 8001a6c:	d8c02b15 	stw	r3,172(sp)
 8001a70:	d8002a15 	stw	zero,168(sp)
 8001a74:	d8003215 	stw	zero,200(sp)
 8001a78:	dc001404 	addi	r16,sp,80
 8001a7c:	0039883a 	mov	fp,zero
 8001a80:	003ec406 	br	8001594 <__alt_data_end+0xfc001594>
 8001a84:	8025883a 	mov	r18,r16
 8001a88:	dc002903 	ldbu	r16,164(sp)
 8001a8c:	e011883a 	mov	r8,fp
 8001a90:	84003fcc 	andi	r16,r16,255
 8001a94:	803e8726 	beq	r16,zero,80014b4 <__alt_data_end+0xfc0014b4>
 8001a98:	d8c02b03 	ldbu	r3,172(sp)
 8001a9c:	d8c02785 	stb	r3,158(sp)
 8001aa0:	003e8406 	br	80014b4 <__alt_data_end+0xfc0014b4>
 8001aa4:	00c00044 	movi	r3,1
 8001aa8:	d8c02905 	stb	r3,164(sp)
 8001aac:	00c00ac4 	movi	r3,43
 8001ab0:	d8c02b05 	stb	r3,172(sp)
 8001ab4:	bc400007 	ldb	r17,0(r23)
 8001ab8:	003d4606 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001abc:	84000814 	ori	r16,r16,32
 8001ac0:	bc400007 	ldb	r17,0(r23)
 8001ac4:	003d4306 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001ac8:	d8802e17 	ldw	r2,184(sp)
 8001acc:	8025883a 	mov	r18,r16
 8001ad0:	d8002785 	stb	zero,158(sp)
 8001ad4:	14000017 	ldw	r16,0(r2)
 8001ad8:	e011883a 	mov	r8,fp
 8001adc:	15000104 	addi	r20,r2,4
 8001ae0:	80042126 	beq	r16,zero,8002b68 <___svfprintf_internal_r+0x1ce8>
 8001ae4:	d8c02a17 	ldw	r3,168(sp)
 8001ae8:	1803ee16 	blt	r3,zero,8002aa4 <___svfprintf_internal_r+0x1c24>
 8001aec:	180d883a 	mov	r6,r3
 8001af0:	000b883a 	mov	r5,zero
 8001af4:	8009883a 	mov	r4,r16
 8001af8:	df003e15 	stw	fp,248(sp)
 8001afc:	80052d40 	call	80052d4 <memchr>
 8001b00:	da003e17 	ldw	r8,248(sp)
 8001b04:	10046a26 	beq	r2,zero,8002cb0 <___svfprintf_internal_r+0x1e30>
 8001b08:	1405c83a 	sub	r2,r2,r16
 8001b0c:	d8802b15 	stw	r2,172(sp)
 8001b10:	1003ea16 	blt	r2,zero,8002abc <___svfprintf_internal_r+0x1c3c>
 8001b14:	df002783 	ldbu	fp,158(sp)
 8001b18:	d8802915 	stw	r2,164(sp)
 8001b1c:	dd002e15 	stw	r20,184(sp)
 8001b20:	d8002a15 	stw	zero,168(sp)
 8001b24:	d8003215 	stw	zero,200(sp)
 8001b28:	003e9306 	br	8001578 <__alt_data_end+0xfc001578>
 8001b2c:	8025883a 	mov	r18,r16
 8001b30:	dc002903 	ldbu	r16,164(sp)
 8001b34:	e011883a 	mov	r8,fp
 8001b38:	84003fcc 	andi	r16,r16,255
 8001b3c:	803f7c26 	beq	r16,zero,8001930 <__alt_data_end+0xfc001930>
 8001b40:	d8c02b03 	ldbu	r3,172(sp)
 8001b44:	d8c02785 	stb	r3,158(sp)
 8001b48:	003f7906 	br	8001930 <__alt_data_end+0xfc001930>
 8001b4c:	8025883a 	mov	r18,r16
 8001b50:	dc002903 	ldbu	r16,164(sp)
 8001b54:	e011883a 	mov	r8,fp
 8001b58:	84003fcc 	andi	r16,r16,255
 8001b5c:	8005741e 	bne	r16,zero,8003130 <___svfprintf_internal_r+0x22b0>
 8001b60:	01020074 	movhi	r4,2049
 8001b64:	2138da04 	addi	r4,r4,-7320
 8001b68:	d9003a15 	stw	r4,232(sp)
 8001b6c:	9080080c 	andi	r2,r18,32
 8001b70:	103f8e1e 	bne	r2,zero,80019ac <__alt_data_end+0xfc0019ac>
 8001b74:	9080040c 	andi	r2,r18,16
 8001b78:	1002a726 	beq	r2,zero,8002618 <___svfprintf_internal_r+0x1798>
 8001b7c:	d8802e17 	ldw	r2,184(sp)
 8001b80:	002d883a 	mov	r22,zero
 8001b84:	15000017 	ldw	r20,0(r2)
 8001b88:	10800104 	addi	r2,r2,4
 8001b8c:	d8802e15 	stw	r2,184(sp)
 8001b90:	003f8b06 	br	80019c0 <__alt_data_end+0xfc0019c0>
 8001b94:	84000054 	ori	r16,r16,1
 8001b98:	bc400007 	ldb	r17,0(r23)
 8001b9c:	003d0d06 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001ba0:	d8802b07 	ldb	r2,172(sp)
 8001ba4:	1002a41e 	bne	r2,zero,8002638 <___svfprintf_internal_r+0x17b8>
 8001ba8:	00c00044 	movi	r3,1
 8001bac:	d8c02905 	stb	r3,164(sp)
 8001bb0:	00c00804 	movi	r3,32
 8001bb4:	d8c02b05 	stb	r3,172(sp)
 8001bb8:	bc400007 	ldb	r17,0(r23)
 8001bbc:	003d0506 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001bc0:	8025883a 	mov	r18,r16
 8001bc4:	dc002903 	ldbu	r16,164(sp)
 8001bc8:	e011883a 	mov	r8,fp
 8001bcc:	84003fcc 	andi	r16,r16,255
 8001bd0:	803e0626 	beq	r16,zero,80013ec <__alt_data_end+0xfc0013ec>
 8001bd4:	d8c02b03 	ldbu	r3,172(sp)
 8001bd8:	d8c02785 	stb	r3,158(sp)
 8001bdc:	003e0306 	br	80013ec <__alt_data_end+0xfc0013ec>
 8001be0:	bc400007 	ldb	r17,0(r23)
 8001be4:	00801b04 	movi	r2,108
 8001be8:	88830a26 	beq	r17,r2,8002814 <___svfprintf_internal_r+0x1994>
 8001bec:	84000414 	ori	r16,r16,16
 8001bf0:	003cf806 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001bf4:	8025883a 	mov	r18,r16
 8001bf8:	dc002903 	ldbu	r16,164(sp)
 8001bfc:	e011883a 	mov	r8,fp
 8001c00:	84003fcc 	andi	r16,r16,255
 8001c04:	8005471e 	bne	r16,zero,8003124 <___svfprintf_internal_r+0x22a4>
 8001c08:	9080080c 	andi	r2,r18,32
 8001c0c:	10028c26 	beq	r2,zero,8002640 <___svfprintf_internal_r+0x17c0>
 8001c10:	d9002e17 	ldw	r4,184(sp)
 8001c14:	d9402f17 	ldw	r5,188(sp)
 8001c18:	20800017 	ldw	r2,0(r4)
 8001c1c:	2807d7fa 	srai	r3,r5,31
 8001c20:	21000104 	addi	r4,r4,4
 8001c24:	d9002e15 	stw	r4,184(sp)
 8001c28:	11400015 	stw	r5,0(r2)
 8001c2c:	10c00115 	stw	r3,4(r2)
 8001c30:	003cbe06 	br	8000f2c <__alt_data_end+0xfc000f2c>
 8001c34:	84001014 	ori	r16,r16,64
 8001c38:	bc400007 	ldb	r17,0(r23)
 8001c3c:	003ce506 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8001c40:	01020074 	movhi	r4,2049
 8001c44:	2138da04 	addi	r4,r4,-7320
 8001c48:	0039883a 	mov	fp,zero
 8001c4c:	d9003a15 	stw	r4,232(sp)
 8001c50:	04401e04 	movi	r17,120
 8001c54:	003f6906 	br	80019fc <__alt_data_end+0xfc0019fc>
 8001c58:	8025883a 	mov	r18,r16
 8001c5c:	dc002903 	ldbu	r16,164(sp)
 8001c60:	e011883a 	mov	r8,fp
 8001c64:	84003fcc 	andi	r16,r16,255
 8001c68:	8005261e 	bne	r16,zero,8003104 <___svfprintf_internal_r+0x2284>
 8001c6c:	883d6526 	beq	r17,zero,8001204 <__alt_data_end+0xfc001204>
 8001c70:	00c00044 	movi	r3,1
 8001c74:	d8c02915 	stw	r3,164(sp)
 8001c78:	dc401405 	stb	r17,80(sp)
 8001c7c:	d8002785 	stb	zero,158(sp)
 8001c80:	003f7a06 	br	8001a6c <__alt_data_end+0xfc001a6c>
 8001c84:	01020074 	movhi	r4,2049
 8001c88:	2138da04 	addi	r4,r4,-7320
 8001c8c:	d9003a15 	stw	r4,232(sp)
 8001c90:	d8c02e15 	stw	r3,184(sp)
 8001c94:	1025883a 	mov	r18,r2
 8001c98:	04401e04 	movi	r17,120
 8001c9c:	a584b03a 	or	r2,r20,r22
 8001ca0:	1000fa1e 	bne	r2,zero,800208c <___svfprintf_internal_r+0x120c>
 8001ca4:	0039883a 	mov	fp,zero
 8001ca8:	00800084 	movi	r2,2
 8001cac:	10803fcc 	andi	r2,r2,255
 8001cb0:	00c00044 	movi	r3,1
 8001cb4:	10c21626 	beq	r2,r3,8002510 <___svfprintf_internal_r+0x1690>
 8001cb8:	00c00084 	movi	r3,2
 8001cbc:	10fe0e1e 	bne	r2,r3,80014f8 <__alt_data_end+0xfc0014f8>
 8001cc0:	003d4606 	br	80011dc <__alt_data_end+0xfc0011dc>
 8001cc4:	d8c02017 	ldw	r3,128(sp)
 8001cc8:	003e7306 	br	8001698 <__alt_data_end+0xfc001698>
 8001ccc:	00801944 	movi	r2,101
 8001cd0:	14407c0e 	bge	r2,r17,8001ec4 <___svfprintf_internal_r+0x1044>
 8001cd4:	d9003617 	ldw	r4,216(sp)
 8001cd8:	d9403717 	ldw	r5,220(sp)
 8001cdc:	000d883a 	mov	r6,zero
 8001ce0:	000f883a 	mov	r7,zero
 8001ce4:	d8c03d15 	stw	r3,244(sp)
 8001ce8:	da003e15 	stw	r8,248(sp)
 8001cec:	800a90c0 	call	800a90c <__eqdf2>
 8001cf0:	d8c03d17 	ldw	r3,244(sp)
 8001cf4:	da003e17 	ldw	r8,248(sp)
 8001cf8:	1000f51e 	bne	r2,zero,80020d0 <___svfprintf_internal_r+0x1250>
 8001cfc:	d8801f17 	ldw	r2,124(sp)
 8001d00:	01020074 	movhi	r4,2049
 8001d04:	2138e104 	addi	r4,r4,-7292
 8001d08:	18c00044 	addi	r3,r3,1
 8001d0c:	10800044 	addi	r2,r2,1
 8001d10:	41000015 	stw	r4,0(r8)
 8001d14:	01000044 	movi	r4,1
 8001d18:	41000115 	stw	r4,4(r8)
 8001d1c:	d8c02015 	stw	r3,128(sp)
 8001d20:	d8801f15 	stw	r2,124(sp)
 8001d24:	010001c4 	movi	r4,7
 8001d28:	20826616 	blt	r4,r2,80026c4 <___svfprintf_internal_r+0x1844>
 8001d2c:	42000204 	addi	r8,r8,8
 8001d30:	d8802617 	ldw	r2,152(sp)
 8001d34:	d9403317 	ldw	r5,204(sp)
 8001d38:	11400216 	blt	r2,r5,8001d44 <___svfprintf_internal_r+0xec4>
 8001d3c:	9080004c 	andi	r2,r18,1
 8001d40:	103eb326 	beq	r2,zero,8001810 <__alt_data_end+0xfc001810>
 8001d44:	d8803817 	ldw	r2,224(sp)
 8001d48:	d9003417 	ldw	r4,208(sp)
 8001d4c:	d9403817 	ldw	r5,224(sp)
 8001d50:	1887883a 	add	r3,r3,r2
 8001d54:	d8801f17 	ldw	r2,124(sp)
 8001d58:	41000015 	stw	r4,0(r8)
 8001d5c:	41400115 	stw	r5,4(r8)
 8001d60:	10800044 	addi	r2,r2,1
 8001d64:	d8c02015 	stw	r3,128(sp)
 8001d68:	d8801f15 	stw	r2,124(sp)
 8001d6c:	010001c4 	movi	r4,7
 8001d70:	2082af16 	blt	r4,r2,8002830 <___svfprintf_internal_r+0x19b0>
 8001d74:	42000204 	addi	r8,r8,8
 8001d78:	d8803317 	ldw	r2,204(sp)
 8001d7c:	143fffc4 	addi	r16,r2,-1
 8001d80:	043ea30e 	bge	zero,r16,8001810 <__alt_data_end+0xfc001810>
 8001d84:	04400404 	movi	r17,16
 8001d88:	d8801f17 	ldw	r2,124(sp)
 8001d8c:	8c00860e 	bge	r17,r16,8001fa8 <___svfprintf_internal_r+0x1128>
 8001d90:	01420074 	movhi	r5,2049
 8001d94:	2978e184 	addi	r5,r5,-7290
 8001d98:	d9402c15 	stw	r5,176(sp)
 8001d9c:	058001c4 	movi	r22,7
 8001da0:	dd002d17 	ldw	r20,180(sp)
 8001da4:	00000306 	br	8001db4 <___svfprintf_internal_r+0xf34>
 8001da8:	42000204 	addi	r8,r8,8
 8001dac:	843ffc04 	addi	r16,r16,-16
 8001db0:	8c00800e 	bge	r17,r16,8001fb4 <___svfprintf_internal_r+0x1134>
 8001db4:	18c00404 	addi	r3,r3,16
 8001db8:	10800044 	addi	r2,r2,1
 8001dbc:	45400015 	stw	r21,0(r8)
 8001dc0:	44400115 	stw	r17,4(r8)
 8001dc4:	d8c02015 	stw	r3,128(sp)
 8001dc8:	d8801f15 	stw	r2,124(sp)
 8001dcc:	b0bff60e 	bge	r22,r2,8001da8 <__alt_data_end+0xfc001da8>
 8001dd0:	d9801e04 	addi	r6,sp,120
 8001dd4:	a00b883a 	mov	r5,r20
 8001dd8:	9809883a 	mov	r4,r19
 8001ddc:	800675c0 	call	800675c <__ssprint_r>
 8001de0:	103d0e1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001de4:	d8c02017 	ldw	r3,128(sp)
 8001de8:	d8801f17 	ldw	r2,124(sp)
 8001dec:	da000404 	addi	r8,sp,16
 8001df0:	003fee06 	br	8001dac <__alt_data_end+0xfc001dac>
 8001df4:	d9403117 	ldw	r5,196(sp)
 8001df8:	d8802917 	ldw	r2,164(sp)
 8001dfc:	28adc83a 	sub	r22,r5,r2
 8001e00:	05be430e 	bge	zero,r22,8001710 <__alt_data_end+0xfc001710>
 8001e04:	07000404 	movi	fp,16
 8001e08:	d8801f17 	ldw	r2,124(sp)
 8001e0c:	e583a20e 	bge	fp,r22,8002c98 <___svfprintf_internal_r+0x1e18>
 8001e10:	01420074 	movhi	r5,2049
 8001e14:	2978e184 	addi	r5,r5,-7290
 8001e18:	dc403015 	stw	r17,192(sp)
 8001e1c:	d9402c15 	stw	r5,176(sp)
 8001e20:	b023883a 	mov	r17,r22
 8001e24:	050001c4 	movi	r20,7
 8001e28:	902d883a 	mov	r22,r18
 8001e2c:	8025883a 	mov	r18,r16
 8001e30:	dc002d17 	ldw	r16,180(sp)
 8001e34:	00000306 	br	8001e44 <___svfprintf_internal_r+0xfc4>
 8001e38:	8c7ffc04 	addi	r17,r17,-16
 8001e3c:	42000204 	addi	r8,r8,8
 8001e40:	e440110e 	bge	fp,r17,8001e88 <___svfprintf_internal_r+0x1008>
 8001e44:	18c00404 	addi	r3,r3,16
 8001e48:	10800044 	addi	r2,r2,1
 8001e4c:	45400015 	stw	r21,0(r8)
 8001e50:	47000115 	stw	fp,4(r8)
 8001e54:	d8c02015 	stw	r3,128(sp)
 8001e58:	d8801f15 	stw	r2,124(sp)
 8001e5c:	a0bff60e 	bge	r20,r2,8001e38 <__alt_data_end+0xfc001e38>
 8001e60:	d9801e04 	addi	r6,sp,120
 8001e64:	800b883a 	mov	r5,r16
 8001e68:	9809883a 	mov	r4,r19
 8001e6c:	800675c0 	call	800675c <__ssprint_r>
 8001e70:	103cea1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001e74:	8c7ffc04 	addi	r17,r17,-16
 8001e78:	d8c02017 	ldw	r3,128(sp)
 8001e7c:	d8801f17 	ldw	r2,124(sp)
 8001e80:	da000404 	addi	r8,sp,16
 8001e84:	e47fef16 	blt	fp,r17,8001e44 <__alt_data_end+0xfc001e44>
 8001e88:	9021883a 	mov	r16,r18
 8001e8c:	b025883a 	mov	r18,r22
 8001e90:	882d883a 	mov	r22,r17
 8001e94:	dc403017 	ldw	r17,192(sp)
 8001e98:	d9002c17 	ldw	r4,176(sp)
 8001e9c:	1d87883a 	add	r3,r3,r22
 8001ea0:	10800044 	addi	r2,r2,1
 8001ea4:	41000015 	stw	r4,0(r8)
 8001ea8:	45800115 	stw	r22,4(r8)
 8001eac:	d8c02015 	stw	r3,128(sp)
 8001eb0:	d8801f15 	stw	r2,124(sp)
 8001eb4:	010001c4 	movi	r4,7
 8001eb8:	20819a16 	blt	r4,r2,8002524 <___svfprintf_internal_r+0x16a4>
 8001ebc:	42000204 	addi	r8,r8,8
 8001ec0:	003e1306 	br	8001710 <__alt_data_end+0xfc001710>
 8001ec4:	d9403317 	ldw	r5,204(sp)
 8001ec8:	00800044 	movi	r2,1
 8001ecc:	18c00044 	addi	r3,r3,1
 8001ed0:	1141710e 	bge	r2,r5,8002498 <___svfprintf_internal_r+0x1618>
 8001ed4:	dc401f17 	ldw	r17,124(sp)
 8001ed8:	00800044 	movi	r2,1
 8001edc:	40800115 	stw	r2,4(r8)
 8001ee0:	8c400044 	addi	r17,r17,1
 8001ee4:	44000015 	stw	r16,0(r8)
 8001ee8:	d8c02015 	stw	r3,128(sp)
 8001eec:	dc401f15 	stw	r17,124(sp)
 8001ef0:	008001c4 	movi	r2,7
 8001ef4:	14417416 	blt	r2,r17,80024c8 <___svfprintf_internal_r+0x1648>
 8001ef8:	42000204 	addi	r8,r8,8
 8001efc:	d8803817 	ldw	r2,224(sp)
 8001f00:	d9003417 	ldw	r4,208(sp)
 8001f04:	8c400044 	addi	r17,r17,1
 8001f08:	10c7883a 	add	r3,r2,r3
 8001f0c:	40800115 	stw	r2,4(r8)
 8001f10:	41000015 	stw	r4,0(r8)
 8001f14:	d8c02015 	stw	r3,128(sp)
 8001f18:	dc401f15 	stw	r17,124(sp)
 8001f1c:	008001c4 	movi	r2,7
 8001f20:	14417216 	blt	r2,r17,80024ec <___svfprintf_internal_r+0x166c>
 8001f24:	45800204 	addi	r22,r8,8
 8001f28:	d9003617 	ldw	r4,216(sp)
 8001f2c:	d9403717 	ldw	r5,220(sp)
 8001f30:	000d883a 	mov	r6,zero
 8001f34:	000f883a 	mov	r7,zero
 8001f38:	d8c03d15 	stw	r3,244(sp)
 8001f3c:	800a90c0 	call	800a90c <__eqdf2>
 8001f40:	d8c03d17 	ldw	r3,244(sp)
 8001f44:	1000b326 	beq	r2,zero,8002214 <___svfprintf_internal_r+0x1394>
 8001f48:	d9403317 	ldw	r5,204(sp)
 8001f4c:	84000044 	addi	r16,r16,1
 8001f50:	8c400044 	addi	r17,r17,1
 8001f54:	28bfffc4 	addi	r2,r5,-1
 8001f58:	1887883a 	add	r3,r3,r2
 8001f5c:	b0800115 	stw	r2,4(r22)
 8001f60:	b4000015 	stw	r16,0(r22)
 8001f64:	d8c02015 	stw	r3,128(sp)
 8001f68:	dc401f15 	stw	r17,124(sp)
 8001f6c:	008001c4 	movi	r2,7
 8001f70:	1440d216 	blt	r2,r17,80022bc <___svfprintf_internal_r+0x143c>
 8001f74:	b5800204 	addi	r22,r22,8
 8001f78:	d9003b17 	ldw	r4,236(sp)
 8001f7c:	df0022c4 	addi	fp,sp,139
 8001f80:	8c400044 	addi	r17,r17,1
 8001f84:	20c7883a 	add	r3,r4,r3
 8001f88:	b7000015 	stw	fp,0(r22)
 8001f8c:	b1000115 	stw	r4,4(r22)
 8001f90:	d8c02015 	stw	r3,128(sp)
 8001f94:	dc401f15 	stw	r17,124(sp)
 8001f98:	008001c4 	movi	r2,7
 8001f9c:	14400e16 	blt	r2,r17,8001fd8 <___svfprintf_internal_r+0x1158>
 8001fa0:	b2000204 	addi	r8,r22,8
 8001fa4:	003e1a06 	br	8001810 <__alt_data_end+0xfc001810>
 8001fa8:	01020074 	movhi	r4,2049
 8001fac:	2138e184 	addi	r4,r4,-7290
 8001fb0:	d9002c15 	stw	r4,176(sp)
 8001fb4:	d9002c17 	ldw	r4,176(sp)
 8001fb8:	1c07883a 	add	r3,r3,r16
 8001fbc:	44000115 	stw	r16,4(r8)
 8001fc0:	41000015 	stw	r4,0(r8)
 8001fc4:	10800044 	addi	r2,r2,1
 8001fc8:	d8c02015 	stw	r3,128(sp)
 8001fcc:	d8801f15 	stw	r2,124(sp)
 8001fd0:	010001c4 	movi	r4,7
 8001fd4:	20be0d0e 	bge	r4,r2,800180c <__alt_data_end+0xfc00180c>
 8001fd8:	d9402d17 	ldw	r5,180(sp)
 8001fdc:	d9801e04 	addi	r6,sp,120
 8001fe0:	9809883a 	mov	r4,r19
 8001fe4:	800675c0 	call	800675c <__ssprint_r>
 8001fe8:	103c8c1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8001fec:	d8c02017 	ldw	r3,128(sp)
 8001ff0:	da000404 	addi	r8,sp,16
 8001ff4:	003e0606 	br	8001810 <__alt_data_end+0xfc001810>
 8001ff8:	d9402d17 	ldw	r5,180(sp)
 8001ffc:	d9801e04 	addi	r6,sp,120
 8002000:	9809883a 	mov	r4,r19
 8002004:	800675c0 	call	800675c <__ssprint_r>
 8002008:	103e3d26 	beq	r2,zero,8001900 <__alt_data_end+0xfc001900>
 800200c:	003c8306 	br	800121c <__alt_data_end+0xfc00121c>
 8002010:	d9402d17 	ldw	r5,180(sp)
 8002014:	d9801e04 	addi	r6,sp,120
 8002018:	9809883a 	mov	r4,r19
 800201c:	800675c0 	call	800675c <__ssprint_r>
 8002020:	103c7e1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002024:	d8c02017 	ldw	r3,128(sp)
 8002028:	da000404 	addi	r8,sp,16
 800202c:	003deb06 	br	80017dc <__alt_data_end+0xfc0017dc>
 8002030:	d9402d17 	ldw	r5,180(sp)
 8002034:	d9801e04 	addi	r6,sp,120
 8002038:	9809883a 	mov	r4,r19
 800203c:	800675c0 	call	800675c <__ssprint_r>
 8002040:	103c761e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002044:	d8c02017 	ldw	r3,128(sp)
 8002048:	da000404 	addi	r8,sp,16
 800204c:	003d9f06 	br	80016cc <__alt_data_end+0xfc0016cc>
 8002050:	d9402d17 	ldw	r5,180(sp)
 8002054:	d9801e04 	addi	r6,sp,120
 8002058:	9809883a 	mov	r4,r19
 800205c:	800675c0 	call	800675c <__ssprint_r>
 8002060:	103c6e1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002064:	d8c02017 	ldw	r3,128(sp)
 8002068:	da000404 	addi	r8,sp,16
 800206c:	003da506 	br	8001704 <__alt_data_end+0xfc001704>
 8002070:	d9402a17 	ldw	r5,168(sp)
 8002074:	d8002785 	stb	zero,158(sp)
 8002078:	283f0816 	blt	r5,zero,8001c9c <__alt_data_end+0xfc001c9c>
 800207c:	00ffdfc4 	movi	r3,-129
 8002080:	a584b03a 	or	r2,r20,r22
 8002084:	90e4703a 	and	r18,r18,r3
 8002088:	103c5126 	beq	r2,zero,80011d0 <__alt_data_end+0xfc0011d0>
 800208c:	0039883a 	mov	fp,zero
 8002090:	003e5a06 	br	80019fc <__alt_data_end+0xfc0019fc>
 8002094:	9080040c 	andi	r2,r18,16
 8002098:	10013d26 	beq	r2,zero,8002590 <___svfprintf_internal_r+0x1710>
 800209c:	d8c02e17 	ldw	r3,184(sp)
 80020a0:	d9002a17 	ldw	r4,168(sp)
 80020a4:	d8002785 	stb	zero,158(sp)
 80020a8:	18800104 	addi	r2,r3,4
 80020ac:	1d000017 	ldw	r20,0(r3)
 80020b0:	002d883a 	mov	r22,zero
 80020b4:	20013f16 	blt	r4,zero,80025b4 <___svfprintf_internal_r+0x1734>
 80020b8:	00ffdfc4 	movi	r3,-129
 80020bc:	d8802e15 	stw	r2,184(sp)
 80020c0:	90e4703a 	and	r18,r18,r3
 80020c4:	a03d0926 	beq	r20,zero,80014ec <__alt_data_end+0xfc0014ec>
 80020c8:	0039883a 	mov	fp,zero
 80020cc:	003d0c06 	br	8001500 <__alt_data_end+0xfc001500>
 80020d0:	dc402617 	ldw	r17,152(sp)
 80020d4:	0441830e 	bge	zero,r17,80026e4 <___svfprintf_internal_r+0x1864>
 80020d8:	dc403217 	ldw	r17,200(sp)
 80020dc:	d8803317 	ldw	r2,204(sp)
 80020e0:	1440010e 	bge	r2,r17,80020e8 <___svfprintf_internal_r+0x1268>
 80020e4:	1023883a 	mov	r17,r2
 80020e8:	04400a0e 	bge	zero,r17,8002114 <___svfprintf_internal_r+0x1294>
 80020ec:	d8801f17 	ldw	r2,124(sp)
 80020f0:	1c47883a 	add	r3,r3,r17
 80020f4:	44000015 	stw	r16,0(r8)
 80020f8:	10800044 	addi	r2,r2,1
 80020fc:	44400115 	stw	r17,4(r8)
 8002100:	d8c02015 	stw	r3,128(sp)
 8002104:	d8801f15 	stw	r2,124(sp)
 8002108:	010001c4 	movi	r4,7
 800210c:	20827516 	blt	r4,r2,8002ae4 <___svfprintf_internal_r+0x1c64>
 8002110:	42000204 	addi	r8,r8,8
 8002114:	88027b16 	blt	r17,zero,8002b04 <___svfprintf_internal_r+0x1c84>
 8002118:	d9003217 	ldw	r4,200(sp)
 800211c:	2463c83a 	sub	r17,r4,r17
 8002120:	0440990e 	bge	zero,r17,8002388 <___svfprintf_internal_r+0x1508>
 8002124:	05800404 	movi	r22,16
 8002128:	d8801f17 	ldw	r2,124(sp)
 800212c:	b441530e 	bge	r22,r17,800267c <___svfprintf_internal_r+0x17fc>
 8002130:	01020074 	movhi	r4,2049
 8002134:	2138e184 	addi	r4,r4,-7290
 8002138:	d9002c15 	stw	r4,176(sp)
 800213c:	070001c4 	movi	fp,7
 8002140:	dd002d17 	ldw	r20,180(sp)
 8002144:	00000306 	br	8002154 <___svfprintf_internal_r+0x12d4>
 8002148:	42000204 	addi	r8,r8,8
 800214c:	8c7ffc04 	addi	r17,r17,-16
 8002150:	b4414d0e 	bge	r22,r17,8002688 <___svfprintf_internal_r+0x1808>
 8002154:	18c00404 	addi	r3,r3,16
 8002158:	10800044 	addi	r2,r2,1
 800215c:	45400015 	stw	r21,0(r8)
 8002160:	45800115 	stw	r22,4(r8)
 8002164:	d8c02015 	stw	r3,128(sp)
 8002168:	d8801f15 	stw	r2,124(sp)
 800216c:	e0bff60e 	bge	fp,r2,8002148 <__alt_data_end+0xfc002148>
 8002170:	d9801e04 	addi	r6,sp,120
 8002174:	a00b883a 	mov	r5,r20
 8002178:	9809883a 	mov	r4,r19
 800217c:	800675c0 	call	800675c <__ssprint_r>
 8002180:	103c261e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002184:	d8c02017 	ldw	r3,128(sp)
 8002188:	d8801f17 	ldw	r2,124(sp)
 800218c:	da000404 	addi	r8,sp,16
 8002190:	003fee06 	br	800214c <__alt_data_end+0xfc00214c>
 8002194:	d9402d17 	ldw	r5,180(sp)
 8002198:	d9801e04 	addi	r6,sp,120
 800219c:	9809883a 	mov	r4,r19
 80021a0:	800675c0 	call	800675c <__ssprint_r>
 80021a4:	103c1d1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80021a8:	d8c02017 	ldw	r3,128(sp)
 80021ac:	df002787 	ldb	fp,158(sp)
 80021b0:	da000404 	addi	r8,sp,16
 80021b4:	003d3806 	br	8001698 <__alt_data_end+0xfc001698>
 80021b8:	9080040c 	andi	r2,r18,16
 80021bc:	10005c26 	beq	r2,zero,8002330 <___svfprintf_internal_r+0x14b0>
 80021c0:	d8c02e17 	ldw	r3,184(sp)
 80021c4:	d9002a17 	ldw	r4,168(sp)
 80021c8:	d8002785 	stb	zero,158(sp)
 80021cc:	18800104 	addi	r2,r3,4
 80021d0:	1d000017 	ldw	r20,0(r3)
 80021d4:	002d883a 	mov	r22,zero
 80021d8:	20005e16 	blt	r4,zero,8002354 <___svfprintf_internal_r+0x14d4>
 80021dc:	00ffdfc4 	movi	r3,-129
 80021e0:	d8802e15 	stw	r2,184(sp)
 80021e4:	90e4703a 	and	r18,r18,r3
 80021e8:	0039883a 	mov	fp,zero
 80021ec:	a03ddf26 	beq	r20,zero,800196c <__alt_data_end+0xfc00196c>
 80021f0:	00800244 	movi	r2,9
 80021f4:	153c8e36 	bltu	r2,r20,8001430 <__alt_data_end+0xfc001430>
 80021f8:	a5000c04 	addi	r20,r20,48
 80021fc:	dc001dc4 	addi	r16,sp,119
 8002200:	dd001dc5 	stb	r20,119(sp)
 8002204:	d8c02817 	ldw	r3,160(sp)
 8002208:	1c07c83a 	sub	r3,r3,r16
 800220c:	d8c02b15 	stw	r3,172(sp)
 8002210:	003cd306 	br	8001560 <__alt_data_end+0xfc001560>
 8002214:	d8803317 	ldw	r2,204(sp)
 8002218:	143fffc4 	addi	r16,r2,-1
 800221c:	043f560e 	bge	zero,r16,8001f78 <__alt_data_end+0xfc001f78>
 8002220:	07000404 	movi	fp,16
 8002224:	e403530e 	bge	fp,r16,8002f74 <___svfprintf_internal_r+0x20f4>
 8002228:	01420074 	movhi	r5,2049
 800222c:	2978e184 	addi	r5,r5,-7290
 8002230:	d9402c15 	stw	r5,176(sp)
 8002234:	01c001c4 	movi	r7,7
 8002238:	dd002d17 	ldw	r20,180(sp)
 800223c:	00000306 	br	800224c <___svfprintf_internal_r+0x13cc>
 8002240:	843ffc04 	addi	r16,r16,-16
 8002244:	b5800204 	addi	r22,r22,8
 8002248:	e400130e 	bge	fp,r16,8002298 <___svfprintf_internal_r+0x1418>
 800224c:	18c00404 	addi	r3,r3,16
 8002250:	8c400044 	addi	r17,r17,1
 8002254:	b5400015 	stw	r21,0(r22)
 8002258:	b7000115 	stw	fp,4(r22)
 800225c:	d8c02015 	stw	r3,128(sp)
 8002260:	dc401f15 	stw	r17,124(sp)
 8002264:	3c7ff60e 	bge	r7,r17,8002240 <__alt_data_end+0xfc002240>
 8002268:	d9801e04 	addi	r6,sp,120
 800226c:	a00b883a 	mov	r5,r20
 8002270:	9809883a 	mov	r4,r19
 8002274:	d9c03d15 	stw	r7,244(sp)
 8002278:	800675c0 	call	800675c <__ssprint_r>
 800227c:	d9c03d17 	ldw	r7,244(sp)
 8002280:	103be61e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002284:	843ffc04 	addi	r16,r16,-16
 8002288:	d8c02017 	ldw	r3,128(sp)
 800228c:	dc401f17 	ldw	r17,124(sp)
 8002290:	dd800404 	addi	r22,sp,16
 8002294:	e43fed16 	blt	fp,r16,800224c <__alt_data_end+0xfc00224c>
 8002298:	d8802c17 	ldw	r2,176(sp)
 800229c:	1c07883a 	add	r3,r3,r16
 80022a0:	8c400044 	addi	r17,r17,1
 80022a4:	b0800015 	stw	r2,0(r22)
 80022a8:	b4000115 	stw	r16,4(r22)
 80022ac:	d8c02015 	stw	r3,128(sp)
 80022b0:	dc401f15 	stw	r17,124(sp)
 80022b4:	008001c4 	movi	r2,7
 80022b8:	147f2e0e 	bge	r2,r17,8001f74 <__alt_data_end+0xfc001f74>
 80022bc:	d9402d17 	ldw	r5,180(sp)
 80022c0:	d9801e04 	addi	r6,sp,120
 80022c4:	9809883a 	mov	r4,r19
 80022c8:	800675c0 	call	800675c <__ssprint_r>
 80022cc:	103bd31e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80022d0:	d8c02017 	ldw	r3,128(sp)
 80022d4:	dc401f17 	ldw	r17,124(sp)
 80022d8:	dd800404 	addi	r22,sp,16
 80022dc:	003f2606 	br	8001f78 <__alt_data_end+0xfc001f78>
 80022e0:	9080040c 	andi	r2,r18,16
 80022e4:	1000c326 	beq	r2,zero,80025f4 <___svfprintf_internal_r+0x1774>
 80022e8:	d9402e17 	ldw	r5,184(sp)
 80022ec:	2d000017 	ldw	r20,0(r5)
 80022f0:	29400104 	addi	r5,r5,4
 80022f4:	d9402e15 	stw	r5,184(sp)
 80022f8:	a02dd7fa 	srai	r22,r20,31
 80022fc:	b005883a 	mov	r2,r22
 8002300:	103c430e 	bge	r2,zero,8001410 <__alt_data_end+0xfc001410>
 8002304:	d9402a17 	ldw	r5,168(sp)
 8002308:	0529c83a 	sub	r20,zero,r20
 800230c:	07000b44 	movi	fp,45
 8002310:	a004c03a 	cmpne	r2,r20,zero
 8002314:	05adc83a 	sub	r22,zero,r22
 8002318:	df002785 	stb	fp,158(sp)
 800231c:	b0adc83a 	sub	r22,r22,r2
 8002320:	28022e16 	blt	r5,zero,8002bdc <___svfprintf_internal_r+0x1d5c>
 8002324:	00bfdfc4 	movi	r2,-129
 8002328:	90a4703a 	and	r18,r18,r2
 800232c:	003c3f06 	br	800142c <__alt_data_end+0xfc00142c>
 8002330:	9080100c 	andi	r2,r18,64
 8002334:	d8002785 	stb	zero,158(sp)
 8002338:	10012526 	beq	r2,zero,80027d0 <___svfprintf_internal_r+0x1950>
 800233c:	d9402e17 	ldw	r5,184(sp)
 8002340:	d8c02a17 	ldw	r3,168(sp)
 8002344:	002d883a 	mov	r22,zero
 8002348:	28800104 	addi	r2,r5,4
 800234c:	2d00000b 	ldhu	r20,0(r5)
 8002350:	183fa20e 	bge	r3,zero,80021dc <__alt_data_end+0xfc0021dc>
 8002354:	d8802e15 	stw	r2,184(sp)
 8002358:	0039883a 	mov	fp,zero
 800235c:	a584b03a 	or	r2,r20,r22
 8002360:	103c321e 	bne	r2,zero,800142c <__alt_data_end+0xfc00142c>
 8002364:	00800044 	movi	r2,1
 8002368:	003e5006 	br	8001cac <__alt_data_end+0xfc001cac>
 800236c:	d9402d17 	ldw	r5,180(sp)
 8002370:	d9801e04 	addi	r6,sp,120
 8002374:	9809883a 	mov	r4,r19
 8002378:	800675c0 	call	800675c <__ssprint_r>
 800237c:	103ba71e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002380:	d8c02017 	ldw	r3,128(sp)
 8002384:	da000404 	addi	r8,sp,16
 8002388:	d9003217 	ldw	r4,200(sp)
 800238c:	d8802617 	ldw	r2,152(sp)
 8002390:	d9403317 	ldw	r5,204(sp)
 8002394:	8123883a 	add	r17,r16,r4
 8002398:	11400216 	blt	r2,r5,80023a4 <___svfprintf_internal_r+0x1524>
 800239c:	9100004c 	andi	r4,r18,1
 80023a0:	20000d26 	beq	r4,zero,80023d8 <___svfprintf_internal_r+0x1558>
 80023a4:	d9003817 	ldw	r4,224(sp)
 80023a8:	d9403417 	ldw	r5,208(sp)
 80023ac:	1907883a 	add	r3,r3,r4
 80023b0:	d9001f17 	ldw	r4,124(sp)
 80023b4:	41400015 	stw	r5,0(r8)
 80023b8:	d9403817 	ldw	r5,224(sp)
 80023bc:	21000044 	addi	r4,r4,1
 80023c0:	d8c02015 	stw	r3,128(sp)
 80023c4:	41400115 	stw	r5,4(r8)
 80023c8:	d9001f15 	stw	r4,124(sp)
 80023cc:	014001c4 	movi	r5,7
 80023d0:	2901dc16 	blt	r5,r4,8002b44 <___svfprintf_internal_r+0x1cc4>
 80023d4:	42000204 	addi	r8,r8,8
 80023d8:	d9003317 	ldw	r4,204(sp)
 80023dc:	8121883a 	add	r16,r16,r4
 80023e0:	2085c83a 	sub	r2,r4,r2
 80023e4:	8461c83a 	sub	r16,r16,r17
 80023e8:	1400010e 	bge	r2,r16,80023f0 <___svfprintf_internal_r+0x1570>
 80023ec:	1021883a 	mov	r16,r2
 80023f0:	04000a0e 	bge	zero,r16,800241c <___svfprintf_internal_r+0x159c>
 80023f4:	d9001f17 	ldw	r4,124(sp)
 80023f8:	1c07883a 	add	r3,r3,r16
 80023fc:	44400015 	stw	r17,0(r8)
 8002400:	21000044 	addi	r4,r4,1
 8002404:	44000115 	stw	r16,4(r8)
 8002408:	d8c02015 	stw	r3,128(sp)
 800240c:	d9001f15 	stw	r4,124(sp)
 8002410:	014001c4 	movi	r5,7
 8002414:	2901e616 	blt	r5,r4,8002bb0 <___svfprintf_internal_r+0x1d30>
 8002418:	42000204 	addi	r8,r8,8
 800241c:	8001f616 	blt	r16,zero,8002bf8 <___svfprintf_internal_r+0x1d78>
 8002420:	1421c83a 	sub	r16,r2,r16
 8002424:	043cfa0e 	bge	zero,r16,8001810 <__alt_data_end+0xfc001810>
 8002428:	04400404 	movi	r17,16
 800242c:	d8801f17 	ldw	r2,124(sp)
 8002430:	8c3edd0e 	bge	r17,r16,8001fa8 <__alt_data_end+0xfc001fa8>
 8002434:	01420074 	movhi	r5,2049
 8002438:	2978e184 	addi	r5,r5,-7290
 800243c:	d9402c15 	stw	r5,176(sp)
 8002440:	058001c4 	movi	r22,7
 8002444:	dd002d17 	ldw	r20,180(sp)
 8002448:	00000306 	br	8002458 <___svfprintf_internal_r+0x15d8>
 800244c:	42000204 	addi	r8,r8,8
 8002450:	843ffc04 	addi	r16,r16,-16
 8002454:	8c3ed70e 	bge	r17,r16,8001fb4 <__alt_data_end+0xfc001fb4>
 8002458:	18c00404 	addi	r3,r3,16
 800245c:	10800044 	addi	r2,r2,1
 8002460:	45400015 	stw	r21,0(r8)
 8002464:	44400115 	stw	r17,4(r8)
 8002468:	d8c02015 	stw	r3,128(sp)
 800246c:	d8801f15 	stw	r2,124(sp)
 8002470:	b0bff60e 	bge	r22,r2,800244c <__alt_data_end+0xfc00244c>
 8002474:	d9801e04 	addi	r6,sp,120
 8002478:	a00b883a 	mov	r5,r20
 800247c:	9809883a 	mov	r4,r19
 8002480:	800675c0 	call	800675c <__ssprint_r>
 8002484:	103b651e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002488:	d8c02017 	ldw	r3,128(sp)
 800248c:	d8801f17 	ldw	r2,124(sp)
 8002490:	da000404 	addi	r8,sp,16
 8002494:	003fee06 	br	8002450 <__alt_data_end+0xfc002450>
 8002498:	9088703a 	and	r4,r18,r2
 800249c:	203e8d1e 	bne	r4,zero,8001ed4 <__alt_data_end+0xfc001ed4>
 80024a0:	dc401f17 	ldw	r17,124(sp)
 80024a4:	40800115 	stw	r2,4(r8)
 80024a8:	44000015 	stw	r16,0(r8)
 80024ac:	8c400044 	addi	r17,r17,1
 80024b0:	d8c02015 	stw	r3,128(sp)
 80024b4:	dc401f15 	stw	r17,124(sp)
 80024b8:	008001c4 	movi	r2,7
 80024bc:	147f7f16 	blt	r2,r17,80022bc <__alt_data_end+0xfc0022bc>
 80024c0:	45800204 	addi	r22,r8,8
 80024c4:	003eac06 	br	8001f78 <__alt_data_end+0xfc001f78>
 80024c8:	d9402d17 	ldw	r5,180(sp)
 80024cc:	d9801e04 	addi	r6,sp,120
 80024d0:	9809883a 	mov	r4,r19
 80024d4:	800675c0 	call	800675c <__ssprint_r>
 80024d8:	103b501e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80024dc:	d8c02017 	ldw	r3,128(sp)
 80024e0:	dc401f17 	ldw	r17,124(sp)
 80024e4:	da000404 	addi	r8,sp,16
 80024e8:	003e8406 	br	8001efc <__alt_data_end+0xfc001efc>
 80024ec:	d9402d17 	ldw	r5,180(sp)
 80024f0:	d9801e04 	addi	r6,sp,120
 80024f4:	9809883a 	mov	r4,r19
 80024f8:	800675c0 	call	800675c <__ssprint_r>
 80024fc:	103b471e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002500:	d8c02017 	ldw	r3,128(sp)
 8002504:	dc401f17 	ldw	r17,124(sp)
 8002508:	dd800404 	addi	r22,sp,16
 800250c:	003e8606 	br	8001f28 <__alt_data_end+0xfc001f28>
 8002510:	0029883a 	mov	r20,zero
 8002514:	a5000c04 	addi	r20,r20,48
 8002518:	dc001dc4 	addi	r16,sp,119
 800251c:	dd001dc5 	stb	r20,119(sp)
 8002520:	003f3806 	br	8002204 <__alt_data_end+0xfc002204>
 8002524:	d9402d17 	ldw	r5,180(sp)
 8002528:	d9801e04 	addi	r6,sp,120
 800252c:	9809883a 	mov	r4,r19
 8002530:	800675c0 	call	800675c <__ssprint_r>
 8002534:	103b391e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002538:	d8c02017 	ldw	r3,128(sp)
 800253c:	da000404 	addi	r8,sp,16
 8002540:	003c7306 	br	8001710 <__alt_data_end+0xfc001710>
 8002544:	d9003617 	ldw	r4,216(sp)
 8002548:	d9403717 	ldw	r5,220(sp)
 800254c:	da003e15 	stw	r8,248(sp)
 8002550:	80065b80 	call	80065b8 <__fpclassifyd>
 8002554:	da003e17 	ldw	r8,248(sp)
 8002558:	1000bd1e 	bne	r2,zero,8002850 <___svfprintf_internal_r+0x19d0>
 800255c:	008011c4 	movi	r2,71
 8002560:	14411e0e 	bge	r2,r17,80029dc <___svfprintf_internal_r+0x1b5c>
 8002564:	04020074 	movhi	r16,2049
 8002568:	8438d404 	addi	r16,r16,-7344
 800256c:	00c000c4 	movi	r3,3
 8002570:	00bfdfc4 	movi	r2,-129
 8002574:	d8c02915 	stw	r3,164(sp)
 8002578:	90a4703a 	and	r18,r18,r2
 800257c:	df002783 	ldbu	fp,158(sp)
 8002580:	d8c02b15 	stw	r3,172(sp)
 8002584:	d8002a15 	stw	zero,168(sp)
 8002588:	d8003215 	stw	zero,200(sp)
 800258c:	003bfa06 	br	8001578 <__alt_data_end+0xfc001578>
 8002590:	9080100c 	andi	r2,r18,64
 8002594:	d8002785 	stb	zero,158(sp)
 8002598:	10009426 	beq	r2,zero,80027ec <___svfprintf_internal_r+0x196c>
 800259c:	d9402e17 	ldw	r5,184(sp)
 80025a0:	d8c02a17 	ldw	r3,168(sp)
 80025a4:	002d883a 	mov	r22,zero
 80025a8:	28800104 	addi	r2,r5,4
 80025ac:	2d00000b 	ldhu	r20,0(r5)
 80025b0:	183ec10e 	bge	r3,zero,80020b8 <__alt_data_end+0xfc0020b8>
 80025b4:	a586b03a 	or	r3,r20,r22
 80025b8:	d8802e15 	stw	r2,184(sp)
 80025bc:	183ec21e 	bne	r3,zero,80020c8 <__alt_data_end+0xfc0020c8>
 80025c0:	0039883a 	mov	fp,zero
 80025c4:	0005883a 	mov	r2,zero
 80025c8:	003db806 	br	8001cac <__alt_data_end+0xfc001cac>
 80025cc:	d8c02e17 	ldw	r3,184(sp)
 80025d0:	d9002e17 	ldw	r4,184(sp)
 80025d4:	d9402e17 	ldw	r5,184(sp)
 80025d8:	18c00017 	ldw	r3,0(r3)
 80025dc:	21000117 	ldw	r4,4(r4)
 80025e0:	29400204 	addi	r5,r5,8
 80025e4:	d8c03615 	stw	r3,216(sp)
 80025e8:	d9003715 	stw	r4,220(sp)
 80025ec:	d9402e15 	stw	r5,184(sp)
 80025f0:	003b5a06 	br	800135c <__alt_data_end+0xfc00135c>
 80025f4:	9080100c 	andi	r2,r18,64
 80025f8:	10010726 	beq	r2,zero,8002a18 <___svfprintf_internal_r+0x1b98>
 80025fc:	d8802e17 	ldw	r2,184(sp)
 8002600:	1500000f 	ldh	r20,0(r2)
 8002604:	10800104 	addi	r2,r2,4
 8002608:	d8802e15 	stw	r2,184(sp)
 800260c:	a02dd7fa 	srai	r22,r20,31
 8002610:	b005883a 	mov	r2,r22
 8002614:	003b7d06 	br	800140c <__alt_data_end+0xfc00140c>
 8002618:	9080100c 	andi	r2,r18,64
 800261c:	10010526 	beq	r2,zero,8002a34 <___svfprintf_internal_r+0x1bb4>
 8002620:	d8c02e17 	ldw	r3,184(sp)
 8002624:	002d883a 	mov	r22,zero
 8002628:	1d00000b 	ldhu	r20,0(r3)
 800262c:	18c00104 	addi	r3,r3,4
 8002630:	d8c02e15 	stw	r3,184(sp)
 8002634:	003ce206 	br	80019c0 <__alt_data_end+0xfc0019c0>
 8002638:	bc400007 	ldb	r17,0(r23)
 800263c:	003a6506 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8002640:	9080040c 	andi	r2,r18,16
 8002644:	10010126 	beq	r2,zero,8002a4c <___svfprintf_internal_r+0x1bcc>
 8002648:	d8c02e17 	ldw	r3,184(sp)
 800264c:	d9002f17 	ldw	r4,188(sp)
 8002650:	18800017 	ldw	r2,0(r3)
 8002654:	18c00104 	addi	r3,r3,4
 8002658:	d8c02e15 	stw	r3,184(sp)
 800265c:	11000015 	stw	r4,0(r2)
 8002660:	003a3206 	br	8000f2c <__alt_data_end+0xfc000f2c>
 8002664:	d9002a17 	ldw	r4,168(sp)
 8002668:	d8002785 	stb	zero,158(sp)
 800266c:	203d8d16 	blt	r4,zero,8001ca4 <__alt_data_end+0xfc001ca4>
 8002670:	00bfdfc4 	movi	r2,-129
 8002674:	90a4703a 	and	r18,r18,r2
 8002678:	003ad506 	br	80011d0 <__alt_data_end+0xfc0011d0>
 800267c:	01420074 	movhi	r5,2049
 8002680:	2978e184 	addi	r5,r5,-7290
 8002684:	d9402c15 	stw	r5,176(sp)
 8002688:	d9402c17 	ldw	r5,176(sp)
 800268c:	1c47883a 	add	r3,r3,r17
 8002690:	10800044 	addi	r2,r2,1
 8002694:	41400015 	stw	r5,0(r8)
 8002698:	44400115 	stw	r17,4(r8)
 800269c:	d8c02015 	stw	r3,128(sp)
 80026a0:	d8801f15 	stw	r2,124(sp)
 80026a4:	010001c4 	movi	r4,7
 80026a8:	20bf3016 	blt	r4,r2,800236c <__alt_data_end+0xfc00236c>
 80026ac:	42000204 	addi	r8,r8,8
 80026b0:	003f3506 	br	8002388 <__alt_data_end+0xfc002388>
 80026b4:	01020074 	movhi	r4,2049
 80026b8:	2138e184 	addi	r4,r4,-7290
 80026bc:	d9002c15 	stw	r4,176(sp)
 80026c0:	003c3c06 	br	80017b4 <__alt_data_end+0xfc0017b4>
 80026c4:	d9402d17 	ldw	r5,180(sp)
 80026c8:	d9801e04 	addi	r6,sp,120
 80026cc:	9809883a 	mov	r4,r19
 80026d0:	800675c0 	call	800675c <__ssprint_r>
 80026d4:	103ad11e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80026d8:	d8c02017 	ldw	r3,128(sp)
 80026dc:	da000404 	addi	r8,sp,16
 80026e0:	003d9306 	br	8001d30 <__alt_data_end+0xfc001d30>
 80026e4:	d8801f17 	ldw	r2,124(sp)
 80026e8:	01420074 	movhi	r5,2049
 80026ec:	01000044 	movi	r4,1
 80026f0:	18c00044 	addi	r3,r3,1
 80026f4:	10800044 	addi	r2,r2,1
 80026f8:	2978e104 	addi	r5,r5,-7292
 80026fc:	41000115 	stw	r4,4(r8)
 8002700:	41400015 	stw	r5,0(r8)
 8002704:	d8c02015 	stw	r3,128(sp)
 8002708:	d8801f15 	stw	r2,124(sp)
 800270c:	010001c4 	movi	r4,7
 8002710:	2080b516 	blt	r4,r2,80029e8 <___svfprintf_internal_r+0x1b68>
 8002714:	42000204 	addi	r8,r8,8
 8002718:	8800041e 	bne	r17,zero,800272c <___svfprintf_internal_r+0x18ac>
 800271c:	d8803317 	ldw	r2,204(sp)
 8002720:	1000021e 	bne	r2,zero,800272c <___svfprintf_internal_r+0x18ac>
 8002724:	9080004c 	andi	r2,r18,1
 8002728:	103c3926 	beq	r2,zero,8001810 <__alt_data_end+0xfc001810>
 800272c:	d9003817 	ldw	r4,224(sp)
 8002730:	d8801f17 	ldw	r2,124(sp)
 8002734:	d9403417 	ldw	r5,208(sp)
 8002738:	20c7883a 	add	r3,r4,r3
 800273c:	10800044 	addi	r2,r2,1
 8002740:	41000115 	stw	r4,4(r8)
 8002744:	41400015 	stw	r5,0(r8)
 8002748:	d8c02015 	stw	r3,128(sp)
 800274c:	d8801f15 	stw	r2,124(sp)
 8002750:	010001c4 	movi	r4,7
 8002754:	20818016 	blt	r4,r2,8002d58 <___svfprintf_internal_r+0x1ed8>
 8002758:	42000204 	addi	r8,r8,8
 800275c:	0463c83a 	sub	r17,zero,r17
 8002760:	0440cb0e 	bge	zero,r17,8002a90 <___svfprintf_internal_r+0x1c10>
 8002764:	05800404 	movi	r22,16
 8002768:	b440e80e 	bge	r22,r17,8002b0c <___svfprintf_internal_r+0x1c8c>
 800276c:	01420074 	movhi	r5,2049
 8002770:	2978e184 	addi	r5,r5,-7290
 8002774:	d9402c15 	stw	r5,176(sp)
 8002778:	070001c4 	movi	fp,7
 800277c:	dd002d17 	ldw	r20,180(sp)
 8002780:	00000306 	br	8002790 <___svfprintf_internal_r+0x1910>
 8002784:	42000204 	addi	r8,r8,8
 8002788:	8c7ffc04 	addi	r17,r17,-16
 800278c:	b440e20e 	bge	r22,r17,8002b18 <___svfprintf_internal_r+0x1c98>
 8002790:	18c00404 	addi	r3,r3,16
 8002794:	10800044 	addi	r2,r2,1
 8002798:	45400015 	stw	r21,0(r8)
 800279c:	45800115 	stw	r22,4(r8)
 80027a0:	d8c02015 	stw	r3,128(sp)
 80027a4:	d8801f15 	stw	r2,124(sp)
 80027a8:	e0bff60e 	bge	fp,r2,8002784 <__alt_data_end+0xfc002784>
 80027ac:	d9801e04 	addi	r6,sp,120
 80027b0:	a00b883a 	mov	r5,r20
 80027b4:	9809883a 	mov	r4,r19
 80027b8:	800675c0 	call	800675c <__ssprint_r>
 80027bc:	103a971e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80027c0:	d8c02017 	ldw	r3,128(sp)
 80027c4:	d8801f17 	ldw	r2,124(sp)
 80027c8:	da000404 	addi	r8,sp,16
 80027cc:	003fee06 	br	8002788 <__alt_data_end+0xfc002788>
 80027d0:	d9002e17 	ldw	r4,184(sp)
 80027d4:	d9402a17 	ldw	r5,168(sp)
 80027d8:	002d883a 	mov	r22,zero
 80027dc:	20800104 	addi	r2,r4,4
 80027e0:	25000017 	ldw	r20,0(r4)
 80027e4:	283e7d0e 	bge	r5,zero,80021dc <__alt_data_end+0xfc0021dc>
 80027e8:	003eda06 	br	8002354 <__alt_data_end+0xfc002354>
 80027ec:	d9002e17 	ldw	r4,184(sp)
 80027f0:	d9402a17 	ldw	r5,168(sp)
 80027f4:	002d883a 	mov	r22,zero
 80027f8:	20800104 	addi	r2,r4,4
 80027fc:	25000017 	ldw	r20,0(r4)
 8002800:	283e2d0e 	bge	r5,zero,80020b8 <__alt_data_end+0xfc0020b8>
 8002804:	003f6b06 	br	80025b4 <__alt_data_end+0xfc0025b4>
 8002808:	d8c02e15 	stw	r3,184(sp)
 800280c:	0039883a 	mov	fp,zero
 8002810:	003ed206 	br	800235c <__alt_data_end+0xfc00235c>
 8002814:	bc400043 	ldbu	r17,1(r23)
 8002818:	84000814 	ori	r16,r16,32
 800281c:	bdc00044 	addi	r23,r23,1
 8002820:	8c403fcc 	andi	r17,r17,255
 8002824:	8c40201c 	xori	r17,r17,128
 8002828:	8c7fe004 	addi	r17,r17,-128
 800282c:	0039e906 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8002830:	d9402d17 	ldw	r5,180(sp)
 8002834:	d9801e04 	addi	r6,sp,120
 8002838:	9809883a 	mov	r4,r19
 800283c:	800675c0 	call	800675c <__ssprint_r>
 8002840:	103a761e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002844:	d8c02017 	ldw	r3,128(sp)
 8002848:	da000404 	addi	r8,sp,16
 800284c:	003d4a06 	br	8001d78 <__alt_data_end+0xfc001d78>
 8002850:	d9002a17 	ldw	r4,168(sp)
 8002854:	05bff7c4 	movi	r22,-33
 8002858:	00bfffc4 	movi	r2,-1
 800285c:	8dac703a 	and	r22,r17,r22
 8002860:	20806a26 	beq	r4,r2,8002a0c <___svfprintf_internal_r+0x1b8c>
 8002864:	008011c4 	movi	r2,71
 8002868:	b0813726 	beq	r22,r2,8002d48 <___svfprintf_internal_r+0x1ec8>
 800286c:	d9003717 	ldw	r4,220(sp)
 8002870:	90c04014 	ori	r3,r18,256
 8002874:	d8c02c15 	stw	r3,176(sp)
 8002878:	20015d16 	blt	r4,zero,8002df0 <___svfprintf_internal_r+0x1f70>
 800287c:	dd003717 	ldw	r20,220(sp)
 8002880:	d8002905 	stb	zero,164(sp)
 8002884:	00801984 	movi	r2,102
 8002888:	88814026 	beq	r17,r2,8002d8c <___svfprintf_internal_r+0x1f0c>
 800288c:	00801184 	movi	r2,70
 8002890:	88817126 	beq	r17,r2,8002e58 <___svfprintf_internal_r+0x1fd8>
 8002894:	00801144 	movi	r2,69
 8002898:	b0816226 	beq	r22,r2,8002e24 <___svfprintf_internal_r+0x1fa4>
 800289c:	d8c02a17 	ldw	r3,168(sp)
 80028a0:	d8802104 	addi	r2,sp,132
 80028a4:	d8800315 	stw	r2,12(sp)
 80028a8:	d9403617 	ldw	r5,216(sp)
 80028ac:	d8802504 	addi	r2,sp,148
 80028b0:	d8800215 	stw	r2,8(sp)
 80028b4:	d8802604 	addi	r2,sp,152
 80028b8:	d8c00015 	stw	r3,0(sp)
 80028bc:	d8800115 	stw	r2,4(sp)
 80028c0:	01c00084 	movi	r7,2
 80028c4:	a00d883a 	mov	r6,r20
 80028c8:	9809883a 	mov	r4,r19
 80028cc:	d8c03d15 	stw	r3,244(sp)
 80028d0:	da003e15 	stw	r8,248(sp)
 80028d4:	80033640 	call	8003364 <_dtoa_r>
 80028d8:	1021883a 	mov	r16,r2
 80028dc:	008019c4 	movi	r2,103
 80028e0:	d8c03d17 	ldw	r3,244(sp)
 80028e4:	da003e17 	ldw	r8,248(sp)
 80028e8:	8880e726 	beq	r17,r2,8002c88 <___svfprintf_internal_r+0x1e08>
 80028ec:	008011c4 	movi	r2,71
 80028f0:	8880d426 	beq	r17,r2,8002c44 <___svfprintf_internal_r+0x1dc4>
 80028f4:	80f9883a 	add	fp,r16,r3
 80028f8:	d9003617 	ldw	r4,216(sp)
 80028fc:	000d883a 	mov	r6,zero
 8002900:	000f883a 	mov	r7,zero
 8002904:	a00b883a 	mov	r5,r20
 8002908:	da003e15 	stw	r8,248(sp)
 800290c:	800a90c0 	call	800a90c <__eqdf2>
 8002910:	da003e17 	ldw	r8,248(sp)
 8002914:	1000e426 	beq	r2,zero,8002ca8 <___svfprintf_internal_r+0x1e28>
 8002918:	d8802117 	ldw	r2,132(sp)
 800291c:	1700062e 	bgeu	r2,fp,8002938 <___svfprintf_internal_r+0x1ab8>
 8002920:	01000c04 	movi	r4,48
 8002924:	10c00044 	addi	r3,r2,1
 8002928:	d8c02115 	stw	r3,132(sp)
 800292c:	11000005 	stb	r4,0(r2)
 8002930:	d8802117 	ldw	r2,132(sp)
 8002934:	173ffb36 	bltu	r2,fp,8002924 <__alt_data_end+0xfc002924>
 8002938:	1405c83a 	sub	r2,r2,r16
 800293c:	d8803315 	stw	r2,204(sp)
 8002940:	008011c4 	movi	r2,71
 8002944:	b080c526 	beq	r22,r2,8002c5c <___svfprintf_internal_r+0x1ddc>
 8002948:	00801944 	movi	r2,101
 800294c:	1441d80e 	bge	r2,r17,80030b0 <___svfprintf_internal_r+0x2230>
 8002950:	d8c02617 	ldw	r3,152(sp)
 8002954:	00801984 	movi	r2,102
 8002958:	d8c03215 	stw	r3,200(sp)
 800295c:	88813426 	beq	r17,r2,8002e30 <___svfprintf_internal_r+0x1fb0>
 8002960:	d8c03217 	ldw	r3,200(sp)
 8002964:	d9003317 	ldw	r4,204(sp)
 8002968:	19012516 	blt	r3,r4,8002e00 <___svfprintf_internal_r+0x1f80>
 800296c:	9480004c 	andi	r18,r18,1
 8002970:	9001841e 	bne	r18,zero,8002f84 <___svfprintf_internal_r+0x2104>
 8002974:	1805883a 	mov	r2,r3
 8002978:	1801cb16 	blt	r3,zero,80030a8 <___svfprintf_internal_r+0x2228>
 800297c:	d8c03217 	ldw	r3,200(sp)
 8002980:	044019c4 	movi	r17,103
 8002984:	d8c02b15 	stw	r3,172(sp)
 8002988:	df002907 	ldb	fp,164(sp)
 800298c:	e000a61e 	bne	fp,zero,8002c28 <___svfprintf_internal_r+0x1da8>
 8002990:	df002783 	ldbu	fp,158(sp)
 8002994:	d8802915 	stw	r2,164(sp)
 8002998:	dc802c17 	ldw	r18,176(sp)
 800299c:	d8002a15 	stw	zero,168(sp)
 80029a0:	003af506 	br	8001578 <__alt_data_end+0xfc001578>
 80029a4:	04020074 	movhi	r16,2049
 80029a8:	8438d104 	addi	r16,r16,-7356
 80029ac:	003a7e06 	br	80013a8 <__alt_data_end+0xfc0013a8>
 80029b0:	d9003917 	ldw	r4,228(sp)
 80029b4:	04001004 	movi	r16,64
 80029b8:	800b883a 	mov	r5,r16
 80029bc:	8004ac80 	call	8004ac8 <_malloc_r>
 80029c0:	d9002d17 	ldw	r4,180(sp)
 80029c4:	20800015 	stw	r2,0(r4)
 80029c8:	20800415 	stw	r2,16(r4)
 80029cc:	1001d026 	beq	r2,zero,8003110 <___svfprintf_internal_r+0x2290>
 80029d0:	d8802d17 	ldw	r2,180(sp)
 80029d4:	14000515 	stw	r16,20(r2)
 80029d8:	00394406 	br	8000eec <__alt_data_end+0xfc000eec>
 80029dc:	04020074 	movhi	r16,2049
 80029e0:	8438d304 	addi	r16,r16,-7348
 80029e4:	003ee106 	br	800256c <__alt_data_end+0xfc00256c>
 80029e8:	d9402d17 	ldw	r5,180(sp)
 80029ec:	d9801e04 	addi	r6,sp,120
 80029f0:	9809883a 	mov	r4,r19
 80029f4:	800675c0 	call	800675c <__ssprint_r>
 80029f8:	103a081e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 80029fc:	dc402617 	ldw	r17,152(sp)
 8002a00:	d8c02017 	ldw	r3,128(sp)
 8002a04:	da000404 	addi	r8,sp,16
 8002a08:	003f4306 	br	8002718 <__alt_data_end+0xfc002718>
 8002a0c:	01400184 	movi	r5,6
 8002a10:	d9402a15 	stw	r5,168(sp)
 8002a14:	003f9506 	br	800286c <__alt_data_end+0xfc00286c>
 8002a18:	d8c02e17 	ldw	r3,184(sp)
 8002a1c:	1d000017 	ldw	r20,0(r3)
 8002a20:	18c00104 	addi	r3,r3,4
 8002a24:	d8c02e15 	stw	r3,184(sp)
 8002a28:	a02dd7fa 	srai	r22,r20,31
 8002a2c:	b005883a 	mov	r2,r22
 8002a30:	003a7606 	br	800140c <__alt_data_end+0xfc00140c>
 8002a34:	d9002e17 	ldw	r4,184(sp)
 8002a38:	002d883a 	mov	r22,zero
 8002a3c:	25000017 	ldw	r20,0(r4)
 8002a40:	21000104 	addi	r4,r4,4
 8002a44:	d9002e15 	stw	r4,184(sp)
 8002a48:	003bdd06 	br	80019c0 <__alt_data_end+0xfc0019c0>
 8002a4c:	9480100c 	andi	r18,r18,64
 8002a50:	90006e26 	beq	r18,zero,8002c0c <___svfprintf_internal_r+0x1d8c>
 8002a54:	d9402e17 	ldw	r5,184(sp)
 8002a58:	d8c02f17 	ldw	r3,188(sp)
 8002a5c:	28800017 	ldw	r2,0(r5)
 8002a60:	29400104 	addi	r5,r5,4
 8002a64:	d9402e15 	stw	r5,184(sp)
 8002a68:	10c0000d 	sth	r3,0(r2)
 8002a6c:	00392f06 	br	8000f2c <__alt_data_end+0xfc000f2c>
 8002a70:	d9402d17 	ldw	r5,180(sp)
 8002a74:	d9801e04 	addi	r6,sp,120
 8002a78:	9809883a 	mov	r4,r19
 8002a7c:	800675c0 	call	800675c <__ssprint_r>
 8002a80:	1039e61e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002a84:	d8c02017 	ldw	r3,128(sp)
 8002a88:	d8801f17 	ldw	r2,124(sp)
 8002a8c:	da000404 	addi	r8,sp,16
 8002a90:	d9403317 	ldw	r5,204(sp)
 8002a94:	10800044 	addi	r2,r2,1
 8002a98:	44000015 	stw	r16,0(r8)
 8002a9c:	28c7883a 	add	r3,r5,r3
 8002aa0:	003b5506 	br	80017f8 <__alt_data_end+0xfc0017f8>
 8002aa4:	8009883a 	mov	r4,r16
 8002aa8:	df003e15 	stw	fp,248(sp)
 8002aac:	8000de80 	call	8000de8 <strlen>
 8002ab0:	d8802b15 	stw	r2,172(sp)
 8002ab4:	da003e17 	ldw	r8,248(sp)
 8002ab8:	103c160e 	bge	r2,zero,8001b14 <__alt_data_end+0xfc001b14>
 8002abc:	0005883a 	mov	r2,zero
 8002ac0:	003c1406 	br	8001b14 <__alt_data_end+0xfc001b14>
 8002ac4:	00bfffc4 	movi	r2,-1
 8002ac8:	0039d906 	br	8001230 <__alt_data_end+0xfc001230>
 8002acc:	01020074 	movhi	r4,2049
 8002ad0:	2138e584 	addi	r4,r4,-7274
 8002ad4:	d9003515 	stw	r4,212(sp)
 8002ad8:	003ae406 	br	800166c <__alt_data_end+0xfc00166c>
 8002adc:	013fffc4 	movi	r4,-1
 8002ae0:	0039fa06 	br	80012cc <__alt_data_end+0xfc0012cc>
 8002ae4:	d9402d17 	ldw	r5,180(sp)
 8002ae8:	d9801e04 	addi	r6,sp,120
 8002aec:	9809883a 	mov	r4,r19
 8002af0:	800675c0 	call	800675c <__ssprint_r>
 8002af4:	1039c91e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002af8:	d8c02017 	ldw	r3,128(sp)
 8002afc:	da000404 	addi	r8,sp,16
 8002b00:	003d8406 	br	8002114 <__alt_data_end+0xfc002114>
 8002b04:	0023883a 	mov	r17,zero
 8002b08:	003d8306 	br	8002118 <__alt_data_end+0xfc002118>
 8002b0c:	01020074 	movhi	r4,2049
 8002b10:	2138e184 	addi	r4,r4,-7290
 8002b14:	d9002c15 	stw	r4,176(sp)
 8002b18:	d9002c17 	ldw	r4,176(sp)
 8002b1c:	1c47883a 	add	r3,r3,r17
 8002b20:	10800044 	addi	r2,r2,1
 8002b24:	41000015 	stw	r4,0(r8)
 8002b28:	44400115 	stw	r17,4(r8)
 8002b2c:	d8c02015 	stw	r3,128(sp)
 8002b30:	d8801f15 	stw	r2,124(sp)
 8002b34:	010001c4 	movi	r4,7
 8002b38:	20bfcd16 	blt	r4,r2,8002a70 <__alt_data_end+0xfc002a70>
 8002b3c:	42000204 	addi	r8,r8,8
 8002b40:	003fd306 	br	8002a90 <__alt_data_end+0xfc002a90>
 8002b44:	d9402d17 	ldw	r5,180(sp)
 8002b48:	d9801e04 	addi	r6,sp,120
 8002b4c:	9809883a 	mov	r4,r19
 8002b50:	800675c0 	call	800675c <__ssprint_r>
 8002b54:	1039b11e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002b58:	d8802617 	ldw	r2,152(sp)
 8002b5c:	d8c02017 	ldw	r3,128(sp)
 8002b60:	da000404 	addi	r8,sp,16
 8002b64:	003e1c06 	br	80023d8 <__alt_data_end+0xfc0023d8>
 8002b68:	d8802a17 	ldw	r2,168(sp)
 8002b6c:	00c00184 	movi	r3,6
 8002b70:	1880012e 	bgeu	r3,r2,8002b78 <___svfprintf_internal_r+0x1cf8>
 8002b74:	1805883a 	mov	r2,r3
 8002b78:	d8802b15 	stw	r2,172(sp)
 8002b7c:	1000f316 	blt	r2,zero,8002f4c <___svfprintf_internal_r+0x20cc>
 8002b80:	04020074 	movhi	r16,2049
 8002b84:	d8802915 	stw	r2,164(sp)
 8002b88:	dd002e15 	stw	r20,184(sp)
 8002b8c:	d8002a15 	stw	zero,168(sp)
 8002b90:	d8003215 	stw	zero,200(sp)
 8002b94:	8438df04 	addi	r16,r16,-7300
 8002b98:	0039883a 	mov	fp,zero
 8002b9c:	003a7d06 	br	8001594 <__alt_data_end+0xfc001594>
 8002ba0:	01020074 	movhi	r4,2049
 8002ba4:	2138e584 	addi	r4,r4,-7274
 8002ba8:	d9003515 	stw	r4,212(sp)
 8002bac:	003b3d06 	br	80018a4 <__alt_data_end+0xfc0018a4>
 8002bb0:	d9402d17 	ldw	r5,180(sp)
 8002bb4:	d9801e04 	addi	r6,sp,120
 8002bb8:	9809883a 	mov	r4,r19
 8002bbc:	800675c0 	call	800675c <__ssprint_r>
 8002bc0:	1039961e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002bc4:	d8802617 	ldw	r2,152(sp)
 8002bc8:	d9403317 	ldw	r5,204(sp)
 8002bcc:	d8c02017 	ldw	r3,128(sp)
 8002bd0:	da000404 	addi	r8,sp,16
 8002bd4:	2885c83a 	sub	r2,r5,r2
 8002bd8:	003e1006 	br	800241c <__alt_data_end+0xfc00241c>
 8002bdc:	00800044 	movi	r2,1
 8002be0:	10803fcc 	andi	r2,r2,255
 8002be4:	00c00044 	movi	r3,1
 8002be8:	10fa1026 	beq	r2,r3,800142c <__alt_data_end+0xfc00142c>
 8002bec:	00c00084 	movi	r3,2
 8002bf0:	10fb8226 	beq	r2,r3,80019fc <__alt_data_end+0xfc0019fc>
 8002bf4:	003a4206 	br	8001500 <__alt_data_end+0xfc001500>
 8002bf8:	0021883a 	mov	r16,zero
 8002bfc:	003e0806 	br	8002420 <__alt_data_end+0xfc002420>
 8002c00:	07000b44 	movi	fp,45
 8002c04:	df002785 	stb	fp,158(sp)
 8002c08:	0039e306 	br	8001398 <__alt_data_end+0xfc001398>
 8002c0c:	d9002e17 	ldw	r4,184(sp)
 8002c10:	d9402f17 	ldw	r5,188(sp)
 8002c14:	20800017 	ldw	r2,0(r4)
 8002c18:	21000104 	addi	r4,r4,4
 8002c1c:	d9002e15 	stw	r4,184(sp)
 8002c20:	11400015 	stw	r5,0(r2)
 8002c24:	0038c106 	br	8000f2c <__alt_data_end+0xfc000f2c>
 8002c28:	00c00b44 	movi	r3,45
 8002c2c:	d8c02785 	stb	r3,158(sp)
 8002c30:	d8802915 	stw	r2,164(sp)
 8002c34:	dc802c17 	ldw	r18,176(sp)
 8002c38:	d8002a15 	stw	zero,168(sp)
 8002c3c:	07000b44 	movi	fp,45
 8002c40:	003a5106 	br	8001588 <__alt_data_end+0xfc001588>
 8002c44:	9080004c 	andi	r2,r18,1
 8002c48:	1000941e 	bne	r2,zero,8002e9c <___svfprintf_internal_r+0x201c>
 8002c4c:	d8802117 	ldw	r2,132(sp)
 8002c50:	1405c83a 	sub	r2,r2,r16
 8002c54:	d8803315 	stw	r2,204(sp)
 8002c58:	b441151e 	bne	r22,r17,80030b0 <___svfprintf_internal_r+0x2230>
 8002c5c:	dd802617 	ldw	r22,152(sp)
 8002c60:	00bfff44 	movi	r2,-3
 8002c64:	b0801a16 	blt	r22,r2,8002cd0 <___svfprintf_internal_r+0x1e50>
 8002c68:	d9402a17 	ldw	r5,168(sp)
 8002c6c:	2d801816 	blt	r5,r22,8002cd0 <___svfprintf_internal_r+0x1e50>
 8002c70:	dd803215 	stw	r22,200(sp)
 8002c74:	003f3a06 	br	8002960 <__alt_data_end+0xfc002960>
 8002c78:	1025883a 	mov	r18,r2
 8002c7c:	0039883a 	mov	fp,zero
 8002c80:	00800084 	movi	r2,2
 8002c84:	003fd606 	br	8002be0 <__alt_data_end+0xfc002be0>
 8002c88:	9080004c 	andi	r2,r18,1
 8002c8c:	103f191e 	bne	r2,zero,80028f4 <__alt_data_end+0xfc0028f4>
 8002c90:	d8802117 	ldw	r2,132(sp)
 8002c94:	003f2806 	br	8002938 <__alt_data_end+0xfc002938>
 8002c98:	01020074 	movhi	r4,2049
 8002c9c:	2138e184 	addi	r4,r4,-7290
 8002ca0:	d9002c15 	stw	r4,176(sp)
 8002ca4:	003c7c06 	br	8001e98 <__alt_data_end+0xfc001e98>
 8002ca8:	e005883a 	mov	r2,fp
 8002cac:	003f2206 	br	8002938 <__alt_data_end+0xfc002938>
 8002cb0:	d9002a17 	ldw	r4,168(sp)
 8002cb4:	df002783 	ldbu	fp,158(sp)
 8002cb8:	dd002e15 	stw	r20,184(sp)
 8002cbc:	d9002915 	stw	r4,164(sp)
 8002cc0:	d9002b15 	stw	r4,172(sp)
 8002cc4:	d8002a15 	stw	zero,168(sp)
 8002cc8:	d8003215 	stw	zero,200(sp)
 8002ccc:	003a2a06 	br	8001578 <__alt_data_end+0xfc001578>
 8002cd0:	8c7fff84 	addi	r17,r17,-2
 8002cd4:	b5bfffc4 	addi	r22,r22,-1
 8002cd8:	dd802615 	stw	r22,152(sp)
 8002cdc:	dc4022c5 	stb	r17,139(sp)
 8002ce0:	b000c316 	blt	r22,zero,8002ff0 <___svfprintf_internal_r+0x2170>
 8002ce4:	00800ac4 	movi	r2,43
 8002ce8:	d8802305 	stb	r2,140(sp)
 8002cec:	00800244 	movi	r2,9
 8002cf0:	15806e16 	blt	r2,r22,8002eac <___svfprintf_internal_r+0x202c>
 8002cf4:	00800c04 	movi	r2,48
 8002cf8:	b5800c04 	addi	r22,r22,48
 8002cfc:	d8802345 	stb	r2,141(sp)
 8002d00:	dd802385 	stb	r22,142(sp)
 8002d04:	d88023c4 	addi	r2,sp,143
 8002d08:	df0022c4 	addi	fp,sp,139
 8002d0c:	d8c03317 	ldw	r3,204(sp)
 8002d10:	1739c83a 	sub	fp,r2,fp
 8002d14:	d9003317 	ldw	r4,204(sp)
 8002d18:	e0c7883a 	add	r3,fp,r3
 8002d1c:	df003b15 	stw	fp,236(sp)
 8002d20:	d8c02b15 	stw	r3,172(sp)
 8002d24:	00800044 	movi	r2,1
 8002d28:	1100b70e 	bge	r2,r4,8003008 <___svfprintf_internal_r+0x2188>
 8002d2c:	d8c02b17 	ldw	r3,172(sp)
 8002d30:	18c00044 	addi	r3,r3,1
 8002d34:	d8c02b15 	stw	r3,172(sp)
 8002d38:	1805883a 	mov	r2,r3
 8002d3c:	1800b016 	blt	r3,zero,8003000 <___svfprintf_internal_r+0x2180>
 8002d40:	d8003215 	stw	zero,200(sp)
 8002d44:	003f1006 	br	8002988 <__alt_data_end+0xfc002988>
 8002d48:	d8802a17 	ldw	r2,168(sp)
 8002d4c:	103ec71e 	bne	r2,zero,800286c <__alt_data_end+0xfc00286c>
 8002d50:	dc002a15 	stw	r16,168(sp)
 8002d54:	003ec506 	br	800286c <__alt_data_end+0xfc00286c>
 8002d58:	d9402d17 	ldw	r5,180(sp)
 8002d5c:	d9801e04 	addi	r6,sp,120
 8002d60:	9809883a 	mov	r4,r19
 8002d64:	800675c0 	call	800675c <__ssprint_r>
 8002d68:	10392c1e 	bne	r2,zero,800121c <__alt_data_end+0xfc00121c>
 8002d6c:	dc402617 	ldw	r17,152(sp)
 8002d70:	d8c02017 	ldw	r3,128(sp)
 8002d74:	d8801f17 	ldw	r2,124(sp)
 8002d78:	da000404 	addi	r8,sp,16
 8002d7c:	003e7706 	br	800275c <__alt_data_end+0xfc00275c>
 8002d80:	182f883a 	mov	r23,r3
 8002d84:	d8002a15 	stw	zero,168(sp)
 8002d88:	00389306 	br	8000fd8 <__alt_data_end+0xfc000fd8>
 8002d8c:	d8c02a17 	ldw	r3,168(sp)
 8002d90:	d8802104 	addi	r2,sp,132
 8002d94:	d8800315 	stw	r2,12(sp)
 8002d98:	d9403617 	ldw	r5,216(sp)
 8002d9c:	d8802504 	addi	r2,sp,148
 8002da0:	d8800215 	stw	r2,8(sp)
 8002da4:	d8802604 	addi	r2,sp,152
 8002da8:	d8c00015 	stw	r3,0(sp)
 8002dac:	9809883a 	mov	r4,r19
 8002db0:	d8800115 	stw	r2,4(sp)
 8002db4:	01c000c4 	movi	r7,3
 8002db8:	a00d883a 	mov	r6,r20
 8002dbc:	da003e15 	stw	r8,248(sp)
 8002dc0:	80033640 	call	8003364 <_dtoa_r>
 8002dc4:	d9002a17 	ldw	r4,168(sp)
 8002dc8:	da003e17 	ldw	r8,248(sp)
 8002dcc:	1021883a 	mov	r16,r2
 8002dd0:	1139883a 	add	fp,r2,r4
 8002dd4:	2007883a 	mov	r3,r4
 8002dd8:	81000007 	ldb	r4,0(r16)
 8002ddc:	00800c04 	movi	r2,48
 8002de0:	20806f26 	beq	r4,r2,8002fa0 <___svfprintf_internal_r+0x2120>
 8002de4:	d8c02617 	ldw	r3,152(sp)
 8002de8:	e0f9883a 	add	fp,fp,r3
 8002dec:	003ec206 	br	80028f8 <__alt_data_end+0xfc0028f8>
 8002df0:	00c00b44 	movi	r3,45
 8002df4:	2520003c 	xorhi	r20,r4,32768
 8002df8:	d8c02905 	stb	r3,164(sp)
 8002dfc:	003ea106 	br	8002884 <__alt_data_end+0xfc002884>
 8002e00:	d8c03217 	ldw	r3,200(sp)
 8002e04:	00c0890e 	bge	zero,r3,800302c <___svfprintf_internal_r+0x21ac>
 8002e08:	00800044 	movi	r2,1
 8002e0c:	d9003317 	ldw	r4,204(sp)
 8002e10:	1105883a 	add	r2,r2,r4
 8002e14:	d8802b15 	stw	r2,172(sp)
 8002e18:	10005f16 	blt	r2,zero,8002f98 <___svfprintf_internal_r+0x2118>
 8002e1c:	044019c4 	movi	r17,103
 8002e20:	003ed906 	br	8002988 <__alt_data_end+0xfc002988>
 8002e24:	d9002a17 	ldw	r4,168(sp)
 8002e28:	20c00044 	addi	r3,r4,1
 8002e2c:	003e9c06 	br	80028a0 <__alt_data_end+0xfc0028a0>
 8002e30:	d9002a17 	ldw	r4,168(sp)
 8002e34:	00c0680e 	bge	zero,r3,8002fd8 <___svfprintf_internal_r+0x2158>
 8002e38:	2000461e 	bne	r4,zero,8002f54 <___svfprintf_internal_r+0x20d4>
 8002e3c:	9480004c 	andi	r18,r18,1
 8002e40:	9000441e 	bne	r18,zero,8002f54 <___svfprintf_internal_r+0x20d4>
 8002e44:	1805883a 	mov	r2,r3
 8002e48:	1800a116 	blt	r3,zero,80030d0 <___svfprintf_internal_r+0x2250>
 8002e4c:	d8c03217 	ldw	r3,200(sp)
 8002e50:	d8c02b15 	stw	r3,172(sp)
 8002e54:	003ecc06 	br	8002988 <__alt_data_end+0xfc002988>
 8002e58:	d9402a17 	ldw	r5,168(sp)
 8002e5c:	d8802104 	addi	r2,sp,132
 8002e60:	d8800315 	stw	r2,12(sp)
 8002e64:	d9400015 	stw	r5,0(sp)
 8002e68:	d8802504 	addi	r2,sp,148
 8002e6c:	d9403617 	ldw	r5,216(sp)
 8002e70:	d8800215 	stw	r2,8(sp)
 8002e74:	d8802604 	addi	r2,sp,152
 8002e78:	d8800115 	stw	r2,4(sp)
 8002e7c:	01c000c4 	movi	r7,3
 8002e80:	a00d883a 	mov	r6,r20
 8002e84:	9809883a 	mov	r4,r19
 8002e88:	da003e15 	stw	r8,248(sp)
 8002e8c:	80033640 	call	8003364 <_dtoa_r>
 8002e90:	d8c02a17 	ldw	r3,168(sp)
 8002e94:	da003e17 	ldw	r8,248(sp)
 8002e98:	1021883a 	mov	r16,r2
 8002e9c:	00801184 	movi	r2,70
 8002ea0:	80f9883a 	add	fp,r16,r3
 8002ea4:	88bfcc26 	beq	r17,r2,8002dd8 <__alt_data_end+0xfc002dd8>
 8002ea8:	003e9306 	br	80028f8 <__alt_data_end+0xfc0028f8>
 8002eac:	df0022c4 	addi	fp,sp,139
 8002eb0:	dc002a15 	stw	r16,168(sp)
 8002eb4:	9829883a 	mov	r20,r19
 8002eb8:	e021883a 	mov	r16,fp
 8002ebc:	4027883a 	mov	r19,r8
 8002ec0:	b009883a 	mov	r4,r22
 8002ec4:	01400284 	movi	r5,10
 8002ec8:	8000b500 	call	8000b50 <__modsi3>
 8002ecc:	10800c04 	addi	r2,r2,48
 8002ed0:	843fffc4 	addi	r16,r16,-1
 8002ed4:	b009883a 	mov	r4,r22
 8002ed8:	01400284 	movi	r5,10
 8002edc:	80800005 	stb	r2,0(r16)
 8002ee0:	8000acc0 	call	8000acc <__divsi3>
 8002ee4:	102d883a 	mov	r22,r2
 8002ee8:	00800244 	movi	r2,9
 8002eec:	15bff416 	blt	r2,r22,8002ec0 <__alt_data_end+0xfc002ec0>
 8002ef0:	9811883a 	mov	r8,r19
 8002ef4:	b0800c04 	addi	r2,r22,48
 8002ef8:	a027883a 	mov	r19,r20
 8002efc:	8029883a 	mov	r20,r16
 8002f00:	a17fffc4 	addi	r5,r20,-1
 8002f04:	a0bfffc5 	stb	r2,-1(r20)
 8002f08:	dc002a17 	ldw	r16,168(sp)
 8002f0c:	2f00782e 	bgeu	r5,fp,80030f0 <___svfprintf_internal_r+0x2270>
 8002f10:	d9c02384 	addi	r7,sp,142
 8002f14:	3d0fc83a 	sub	r7,r7,r20
 8002f18:	d9002344 	addi	r4,sp,141
 8002f1c:	e1cf883a 	add	r7,fp,r7
 8002f20:	00000106 	br	8002f28 <___svfprintf_internal_r+0x20a8>
 8002f24:	28800003 	ldbu	r2,0(r5)
 8002f28:	20800005 	stb	r2,0(r4)
 8002f2c:	21000044 	addi	r4,r4,1
 8002f30:	29400044 	addi	r5,r5,1
 8002f34:	21fffb1e 	bne	r4,r7,8002f24 <__alt_data_end+0xfc002f24>
 8002f38:	d8802304 	addi	r2,sp,140
 8002f3c:	1505c83a 	sub	r2,r2,r20
 8002f40:	d8c02344 	addi	r3,sp,141
 8002f44:	1885883a 	add	r2,r3,r2
 8002f48:	003f7006 	br	8002d0c <__alt_data_end+0xfc002d0c>
 8002f4c:	0005883a 	mov	r2,zero
 8002f50:	003f0b06 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002f54:	d9002a17 	ldw	r4,168(sp)
 8002f58:	d8c03217 	ldw	r3,200(sp)
 8002f5c:	20800044 	addi	r2,r4,1
 8002f60:	1885883a 	add	r2,r3,r2
 8002f64:	d8802b15 	stw	r2,172(sp)
 8002f68:	103e870e 	bge	r2,zero,8002988 <__alt_data_end+0xfc002988>
 8002f6c:	0005883a 	mov	r2,zero
 8002f70:	003e8506 	br	8002988 <__alt_data_end+0xfc002988>
 8002f74:	01020074 	movhi	r4,2049
 8002f78:	2138e184 	addi	r4,r4,-7290
 8002f7c:	d9002c15 	stw	r4,176(sp)
 8002f80:	003cc506 	br	8002298 <__alt_data_end+0xfc002298>
 8002f84:	d8c03217 	ldw	r3,200(sp)
 8002f88:	18c00044 	addi	r3,r3,1
 8002f8c:	d8c02b15 	stw	r3,172(sp)
 8002f90:	1805883a 	mov	r2,r3
 8002f94:	183fa10e 	bge	r3,zero,8002e1c <__alt_data_end+0xfc002e1c>
 8002f98:	0005883a 	mov	r2,zero
 8002f9c:	003f9f06 	br	8002e1c <__alt_data_end+0xfc002e1c>
 8002fa0:	d9003617 	ldw	r4,216(sp)
 8002fa4:	000d883a 	mov	r6,zero
 8002fa8:	000f883a 	mov	r7,zero
 8002fac:	a00b883a 	mov	r5,r20
 8002fb0:	d8c03d15 	stw	r3,244(sp)
 8002fb4:	da003e15 	stw	r8,248(sp)
 8002fb8:	800a90c0 	call	800a90c <__eqdf2>
 8002fbc:	d8c03d17 	ldw	r3,244(sp)
 8002fc0:	da003e17 	ldw	r8,248(sp)
 8002fc4:	103f8726 	beq	r2,zero,8002de4 <__alt_data_end+0xfc002de4>
 8002fc8:	00800044 	movi	r2,1
 8002fcc:	10c7c83a 	sub	r3,r2,r3
 8002fd0:	d8c02615 	stw	r3,152(sp)
 8002fd4:	003f8406 	br	8002de8 <__alt_data_end+0xfc002de8>
 8002fd8:	20000e1e 	bne	r4,zero,8003014 <___svfprintf_internal_r+0x2194>
 8002fdc:	9480004c 	andi	r18,r18,1
 8002fe0:	90000c1e 	bne	r18,zero,8003014 <___svfprintf_internal_r+0x2194>
 8002fe4:	00800044 	movi	r2,1
 8002fe8:	d8802b15 	stw	r2,172(sp)
 8002fec:	003e6606 	br	8002988 <__alt_data_end+0xfc002988>
 8002ff0:	00800b44 	movi	r2,45
 8002ff4:	05adc83a 	sub	r22,zero,r22
 8002ff8:	d8802305 	stb	r2,140(sp)
 8002ffc:	003f3b06 	br	8002cec <__alt_data_end+0xfc002cec>
 8003000:	0005883a 	mov	r2,zero
 8003004:	003f4e06 	br	8002d40 <__alt_data_end+0xfc002d40>
 8003008:	90a4703a 	and	r18,r18,r2
 800300c:	903f4a26 	beq	r18,zero,8002d38 <__alt_data_end+0xfc002d38>
 8003010:	003f4606 	br	8002d2c <__alt_data_end+0xfc002d2c>
 8003014:	d8c02a17 	ldw	r3,168(sp)
 8003018:	18c00084 	addi	r3,r3,2
 800301c:	d8c02b15 	stw	r3,172(sp)
 8003020:	1805883a 	mov	r2,r3
 8003024:	183e580e 	bge	r3,zero,8002988 <__alt_data_end+0xfc002988>
 8003028:	003fd006 	br	8002f6c <__alt_data_end+0xfc002f6c>
 800302c:	00800084 	movi	r2,2
 8003030:	10c5c83a 	sub	r2,r2,r3
 8003034:	003f7506 	br	8002e0c <__alt_data_end+0xfc002e0c>
 8003038:	d9402e17 	ldw	r5,184(sp)
 800303c:	d9002e17 	ldw	r4,184(sp)
 8003040:	bc400043 	ldbu	r17,1(r23)
 8003044:	29400017 	ldw	r5,0(r5)
 8003048:	20800104 	addi	r2,r4,4
 800304c:	d8802e15 	stw	r2,184(sp)
 8003050:	d9402a15 	stw	r5,168(sp)
 8003054:	182f883a 	mov	r23,r3
 8003058:	283df10e 	bge	r5,zero,8002820 <__alt_data_end+0xfc002820>
 800305c:	8c403fcc 	andi	r17,r17,255
 8003060:	017fffc4 	movi	r5,-1
 8003064:	8c40201c 	xori	r17,r17,128
 8003068:	d9402a15 	stw	r5,168(sp)
 800306c:	8c7fe004 	addi	r17,r17,-128
 8003070:	0037d806 	br	8000fd4 <__alt_data_end+0xfc000fd4>
 8003074:	9080004c 	andi	r2,r18,1
 8003078:	0039883a 	mov	fp,zero
 800307c:	10000726 	beq	r2,zero,800309c <___svfprintf_internal_r+0x221c>
 8003080:	d8c02817 	ldw	r3,160(sp)
 8003084:	dc001dc4 	addi	r16,sp,119
 8003088:	00800c04 	movi	r2,48
 800308c:	1c07c83a 	sub	r3,r3,r16
 8003090:	d8801dc5 	stb	r2,119(sp)
 8003094:	d8c02b15 	stw	r3,172(sp)
 8003098:	00393106 	br	8001560 <__alt_data_end+0xfc001560>
 800309c:	d8002b15 	stw	zero,172(sp)
 80030a0:	dc001e04 	addi	r16,sp,120
 80030a4:	00392e06 	br	8001560 <__alt_data_end+0xfc001560>
 80030a8:	0005883a 	mov	r2,zero
 80030ac:	003e3306 	br	800297c <__alt_data_end+0xfc00297c>
 80030b0:	dd802617 	ldw	r22,152(sp)
 80030b4:	003f0706 	br	8002cd4 <__alt_data_end+0xfc002cd4>
 80030b8:	d8c02b03 	ldbu	r3,172(sp)
 80030bc:	d8c02785 	stb	r3,158(sp)
 80030c0:	003a3506 	br	8001998 <__alt_data_end+0xfc001998>
 80030c4:	d8c02b03 	ldbu	r3,172(sp)
 80030c8:	d8c02785 	stb	r3,158(sp)
 80030cc:	003a1706 	br	800192c <__alt_data_end+0xfc00192c>
 80030d0:	0005883a 	mov	r2,zero
 80030d4:	003f5d06 	br	8002e4c <__alt_data_end+0xfc002e4c>
 80030d8:	d8c02b03 	ldbu	r3,172(sp)
 80030dc:	d8c02785 	stb	r3,158(sp)
 80030e0:	0038f306 	br	80014b0 <__alt_data_end+0xfc0014b0>
 80030e4:	d8c02b03 	ldbu	r3,172(sp)
 80030e8:	d8c02785 	stb	r3,158(sp)
 80030ec:	0038be06 	br	80013e8 <__alt_data_end+0xfc0013e8>
 80030f0:	d8802344 	addi	r2,sp,141
 80030f4:	003f0506 	br	8002d0c <__alt_data_end+0xfc002d0c>
 80030f8:	d8c02b03 	ldbu	r3,172(sp)
 80030fc:	d8c02785 	stb	r3,158(sp)
 8003100:	00388b06 	br	8001330 <__alt_data_end+0xfc001330>
 8003104:	d8c02b03 	ldbu	r3,172(sp)
 8003108:	d8c02785 	stb	r3,158(sp)
 800310c:	003ad706 	br	8001c6c <__alt_data_end+0xfc001c6c>
 8003110:	d9403917 	ldw	r5,228(sp)
 8003114:	00800304 	movi	r2,12
 8003118:	28800015 	stw	r2,0(r5)
 800311c:	00bfffc4 	movi	r2,-1
 8003120:	00384306 	br	8001230 <__alt_data_end+0xfc001230>
 8003124:	d8c02b03 	ldbu	r3,172(sp)
 8003128:	d8c02785 	stb	r3,158(sp)
 800312c:	003ab606 	br	8001c08 <__alt_data_end+0xfc001c08>
 8003130:	d8c02b03 	ldbu	r3,172(sp)
 8003134:	d8c02785 	stb	r3,158(sp)
 8003138:	003a8906 	br	8001b60 <__alt_data_end+0xfc001b60>

0800313c <quorem>:
 800313c:	defff204 	addi	sp,sp,-56
 8003140:	ddc00b15 	stw	r23,44(sp)
 8003144:	20800417 	ldw	r2,16(r4)
 8003148:	2dc00417 	ldw	r23,16(r5)
 800314c:	dfc00d15 	stw	ra,52(sp)
 8003150:	df000c15 	stw	fp,48(sp)
 8003154:	dd800a15 	stw	r22,40(sp)
 8003158:	dd400915 	stw	r21,36(sp)
 800315c:	dd000815 	stw	r20,32(sp)
 8003160:	dcc00715 	stw	r19,28(sp)
 8003164:	dc800615 	stw	r18,24(sp)
 8003168:	dc400515 	stw	r17,20(sp)
 800316c:	dc000415 	stw	r16,16(sp)
 8003170:	15c07a16 	blt	r2,r23,800335c <quorem+0x220>
 8003174:	bdffffc4 	addi	r23,r23,-1
 8003178:	bde9883a 	add	r20,r23,r23
 800317c:	28c00504 	addi	r3,r5,20
 8003180:	a529883a 	add	r20,r20,r20
 8003184:	1d39883a 	add	fp,r3,r20
 8003188:	24c00504 	addi	r19,r4,20
 800318c:	d9400215 	stw	r5,8(sp)
 8003190:	9d29883a 	add	r20,r19,r20
 8003194:	e1400017 	ldw	r5,0(fp)
 8003198:	d9000015 	stw	r4,0(sp)
 800319c:	a1000017 	ldw	r4,0(r20)
 80031a0:	29400044 	addi	r5,r5,1
 80031a4:	d8c00115 	stw	r3,4(sp)
 80031a8:	dd000315 	stw	r20,12(sp)
 80031ac:	8000bc40 	call	8000bc4 <__udivsi3>
 80031b0:	1025883a 	mov	r18,r2
 80031b4:	10003026 	beq	r2,zero,8003278 <quorem+0x13c>
 80031b8:	dc400117 	ldw	r17,4(sp)
 80031bc:	9829883a 	mov	r20,r19
 80031c0:	002d883a 	mov	r22,zero
 80031c4:	0021883a 	mov	r16,zero
 80031c8:	8d400017 	ldw	r21,0(r17)
 80031cc:	900b883a 	mov	r5,r18
 80031d0:	8c400104 	addi	r17,r17,4
 80031d4:	a93fffcc 	andi	r4,r21,65535
 80031d8:	8000c800 	call	8000c80 <__mulsi3>
 80031dc:	a808d43a 	srli	r4,r21,16
 80031e0:	900b883a 	mov	r5,r18
 80031e4:	15ad883a 	add	r22,r2,r22
 80031e8:	8000c800 	call	8000c80 <__mulsi3>
 80031ec:	a1000017 	ldw	r4,0(r20)
 80031f0:	b00cd43a 	srli	r6,r22,16
 80031f4:	b0ffffcc 	andi	r3,r22,65535
 80031f8:	217fffcc 	andi	r5,r4,65535
 80031fc:	2c21883a 	add	r16,r5,r16
 8003200:	80c7c83a 	sub	r3,r16,r3
 8003204:	2008d43a 	srli	r4,r4,16
 8003208:	1185883a 	add	r2,r2,r6
 800320c:	1821d43a 	srai	r16,r3,16
 8003210:	117fffcc 	andi	r5,r2,65535
 8003214:	2149c83a 	sub	r4,r4,r5
 8003218:	2421883a 	add	r16,r4,r16
 800321c:	8008943a 	slli	r4,r16,16
 8003220:	18ffffcc 	andi	r3,r3,65535
 8003224:	102cd43a 	srli	r22,r2,16
 8003228:	20c8b03a 	or	r4,r4,r3
 800322c:	a1000015 	stw	r4,0(r20)
 8003230:	8021d43a 	srai	r16,r16,16
 8003234:	a5000104 	addi	r20,r20,4
 8003238:	e47fe32e 	bgeu	fp,r17,80031c8 <__alt_data_end+0xfc0031c8>
 800323c:	d8c00317 	ldw	r3,12(sp)
 8003240:	18800017 	ldw	r2,0(r3)
 8003244:	10000c1e 	bne	r2,zero,8003278 <quorem+0x13c>
 8003248:	18bfff04 	addi	r2,r3,-4
 800324c:	9880082e 	bgeu	r19,r2,8003270 <quorem+0x134>
 8003250:	18ffff17 	ldw	r3,-4(r3)
 8003254:	18000326 	beq	r3,zero,8003264 <quorem+0x128>
 8003258:	00000506 	br	8003270 <quorem+0x134>
 800325c:	10c00017 	ldw	r3,0(r2)
 8003260:	1800031e 	bne	r3,zero,8003270 <quorem+0x134>
 8003264:	10bfff04 	addi	r2,r2,-4
 8003268:	bdffffc4 	addi	r23,r23,-1
 800326c:	98bffb36 	bltu	r19,r2,800325c <__alt_data_end+0xfc00325c>
 8003270:	d8c00017 	ldw	r3,0(sp)
 8003274:	1dc00415 	stw	r23,16(r3)
 8003278:	d9400217 	ldw	r5,8(sp)
 800327c:	d9000017 	ldw	r4,0(sp)
 8003280:	8005e840 	call	8005e84 <__mcmp>
 8003284:	10002816 	blt	r2,zero,8003328 <quorem+0x1ec>
 8003288:	dc400117 	ldw	r17,4(sp)
 800328c:	94800044 	addi	r18,r18,1
 8003290:	980d883a 	mov	r6,r19
 8003294:	0007883a 	mov	r3,zero
 8003298:	31000017 	ldw	r4,0(r6)
 800329c:	89400017 	ldw	r5,0(r17)
 80032a0:	31800104 	addi	r6,r6,4
 80032a4:	20bfffcc 	andi	r2,r4,65535
 80032a8:	10c7883a 	add	r3,r2,r3
 80032ac:	28bfffcc 	andi	r2,r5,65535
 80032b0:	1885c83a 	sub	r2,r3,r2
 80032b4:	280ad43a 	srli	r5,r5,16
 80032b8:	2008d43a 	srli	r4,r4,16
 80032bc:	1007d43a 	srai	r3,r2,16
 80032c0:	10bfffcc 	andi	r2,r2,65535
 80032c4:	2149c83a 	sub	r4,r4,r5
 80032c8:	20c9883a 	add	r4,r4,r3
 80032cc:	200a943a 	slli	r5,r4,16
 80032d0:	8c400104 	addi	r17,r17,4
 80032d4:	2007d43a 	srai	r3,r4,16
 80032d8:	2884b03a 	or	r2,r5,r2
 80032dc:	30bfff15 	stw	r2,-4(r6)
 80032e0:	e47fed2e 	bgeu	fp,r17,8003298 <__alt_data_end+0xfc003298>
 80032e4:	bdc5883a 	add	r2,r23,r23
 80032e8:	1085883a 	add	r2,r2,r2
 80032ec:	9887883a 	add	r3,r19,r2
 80032f0:	18800017 	ldw	r2,0(r3)
 80032f4:	10000c1e 	bne	r2,zero,8003328 <quorem+0x1ec>
 80032f8:	18bfff04 	addi	r2,r3,-4
 80032fc:	9880082e 	bgeu	r19,r2,8003320 <quorem+0x1e4>
 8003300:	18ffff17 	ldw	r3,-4(r3)
 8003304:	18000326 	beq	r3,zero,8003314 <quorem+0x1d8>
 8003308:	00000506 	br	8003320 <quorem+0x1e4>
 800330c:	10c00017 	ldw	r3,0(r2)
 8003310:	1800031e 	bne	r3,zero,8003320 <quorem+0x1e4>
 8003314:	10bfff04 	addi	r2,r2,-4
 8003318:	bdffffc4 	addi	r23,r23,-1
 800331c:	98bffb36 	bltu	r19,r2,800330c <__alt_data_end+0xfc00330c>
 8003320:	d8c00017 	ldw	r3,0(sp)
 8003324:	1dc00415 	stw	r23,16(r3)
 8003328:	9005883a 	mov	r2,r18
 800332c:	dfc00d17 	ldw	ra,52(sp)
 8003330:	df000c17 	ldw	fp,48(sp)
 8003334:	ddc00b17 	ldw	r23,44(sp)
 8003338:	dd800a17 	ldw	r22,40(sp)
 800333c:	dd400917 	ldw	r21,36(sp)
 8003340:	dd000817 	ldw	r20,32(sp)
 8003344:	dcc00717 	ldw	r19,28(sp)
 8003348:	dc800617 	ldw	r18,24(sp)
 800334c:	dc400517 	ldw	r17,20(sp)
 8003350:	dc000417 	ldw	r16,16(sp)
 8003354:	dec00e04 	addi	sp,sp,56
 8003358:	f800283a 	ret
 800335c:	0005883a 	mov	r2,zero
 8003360:	003ff206 	br	800332c <__alt_data_end+0xfc00332c>

08003364 <_dtoa_r>:
 8003364:	20801017 	ldw	r2,64(r4)
 8003368:	deffde04 	addi	sp,sp,-136
 800336c:	df002015 	stw	fp,128(sp)
 8003370:	dcc01b15 	stw	r19,108(sp)
 8003374:	dc801a15 	stw	r18,104(sp)
 8003378:	dc401915 	stw	r17,100(sp)
 800337c:	dc001815 	stw	r16,96(sp)
 8003380:	dfc02115 	stw	ra,132(sp)
 8003384:	ddc01f15 	stw	r23,124(sp)
 8003388:	dd801e15 	stw	r22,120(sp)
 800338c:	dd401d15 	stw	r21,116(sp)
 8003390:	dd001c15 	stw	r20,112(sp)
 8003394:	d9c00315 	stw	r7,12(sp)
 8003398:	2039883a 	mov	fp,r4
 800339c:	3023883a 	mov	r17,r6
 80033a0:	2825883a 	mov	r18,r5
 80033a4:	dc002417 	ldw	r16,144(sp)
 80033a8:	3027883a 	mov	r19,r6
 80033ac:	10000826 	beq	r2,zero,80033d0 <_dtoa_r+0x6c>
 80033b0:	21801117 	ldw	r6,68(r4)
 80033b4:	00c00044 	movi	r3,1
 80033b8:	100b883a 	mov	r5,r2
 80033bc:	1986983a 	sll	r3,r3,r6
 80033c0:	11800115 	stw	r6,4(r2)
 80033c4:	10c00215 	stw	r3,8(r2)
 80033c8:	80055a80 	call	80055a8 <_Bfree>
 80033cc:	e0001015 	stw	zero,64(fp)
 80033d0:	88002e16 	blt	r17,zero,800348c <_dtoa_r+0x128>
 80033d4:	80000015 	stw	zero,0(r16)
 80033d8:	889ffc2c 	andhi	r2,r17,32752
 80033dc:	00dffc34 	movhi	r3,32752
 80033e0:	10c01c26 	beq	r2,r3,8003454 <_dtoa_r+0xf0>
 80033e4:	000d883a 	mov	r6,zero
 80033e8:	000f883a 	mov	r7,zero
 80033ec:	9009883a 	mov	r4,r18
 80033f0:	980b883a 	mov	r5,r19
 80033f4:	800a90c0 	call	800a90c <__eqdf2>
 80033f8:	10002b1e 	bne	r2,zero,80034a8 <_dtoa_r+0x144>
 80033fc:	d9c02317 	ldw	r7,140(sp)
 8003400:	00800044 	movi	r2,1
 8003404:	38800015 	stw	r2,0(r7)
 8003408:	d8802517 	ldw	r2,148(sp)
 800340c:	10019e26 	beq	r2,zero,8003a88 <_dtoa_r+0x724>
 8003410:	d8c02517 	ldw	r3,148(sp)
 8003414:	00820074 	movhi	r2,2049
 8003418:	10b8e144 	addi	r2,r2,-7291
 800341c:	18800015 	stw	r2,0(r3)
 8003420:	10bfffc4 	addi	r2,r2,-1
 8003424:	dfc02117 	ldw	ra,132(sp)
 8003428:	df002017 	ldw	fp,128(sp)
 800342c:	ddc01f17 	ldw	r23,124(sp)
 8003430:	dd801e17 	ldw	r22,120(sp)
 8003434:	dd401d17 	ldw	r21,116(sp)
 8003438:	dd001c17 	ldw	r20,112(sp)
 800343c:	dcc01b17 	ldw	r19,108(sp)
 8003440:	dc801a17 	ldw	r18,104(sp)
 8003444:	dc401917 	ldw	r17,100(sp)
 8003448:	dc001817 	ldw	r16,96(sp)
 800344c:	dec02204 	addi	sp,sp,136
 8003450:	f800283a 	ret
 8003454:	d8c02317 	ldw	r3,140(sp)
 8003458:	0089c3c4 	movi	r2,9999
 800345c:	18800015 	stw	r2,0(r3)
 8003460:	90017726 	beq	r18,zero,8003a40 <_dtoa_r+0x6dc>
 8003464:	00820074 	movhi	r2,2049
 8003468:	10b8ed04 	addi	r2,r2,-7244
 800346c:	d9002517 	ldw	r4,148(sp)
 8003470:	203fec26 	beq	r4,zero,8003424 <__alt_data_end+0xfc003424>
 8003474:	10c000c7 	ldb	r3,3(r2)
 8003478:	1801781e 	bne	r3,zero,8003a5c <_dtoa_r+0x6f8>
 800347c:	10c000c4 	addi	r3,r2,3
 8003480:	d9802517 	ldw	r6,148(sp)
 8003484:	30c00015 	stw	r3,0(r6)
 8003488:	003fe606 	br	8003424 <__alt_data_end+0xfc003424>
 800348c:	04e00034 	movhi	r19,32768
 8003490:	9cffffc4 	addi	r19,r19,-1
 8003494:	00800044 	movi	r2,1
 8003498:	8ce6703a 	and	r19,r17,r19
 800349c:	80800015 	stw	r2,0(r16)
 80034a0:	9823883a 	mov	r17,r19
 80034a4:	003fcc06 	br	80033d8 <__alt_data_end+0xfc0033d8>
 80034a8:	d8800204 	addi	r2,sp,8
 80034ac:	d8800015 	stw	r2,0(sp)
 80034b0:	d9c00104 	addi	r7,sp,4
 80034b4:	900b883a 	mov	r5,r18
 80034b8:	980d883a 	mov	r6,r19
 80034bc:	e009883a 	mov	r4,fp
 80034c0:	8820d53a 	srli	r16,r17,20
 80034c4:	80062500 	call	8006250 <__d2b>
 80034c8:	d8800915 	stw	r2,36(sp)
 80034cc:	8001651e 	bne	r16,zero,8003a64 <_dtoa_r+0x700>
 80034d0:	dd800217 	ldw	r22,8(sp)
 80034d4:	dc000117 	ldw	r16,4(sp)
 80034d8:	00800804 	movi	r2,32
 80034dc:	b421883a 	add	r16,r22,r16
 80034e0:	80c10c84 	addi	r3,r16,1074
 80034e4:	10c2d10e 	bge	r2,r3,800402c <_dtoa_r+0xcc8>
 80034e8:	00801004 	movi	r2,64
 80034ec:	81010484 	addi	r4,r16,1042
 80034f0:	10c7c83a 	sub	r3,r2,r3
 80034f4:	9108d83a 	srl	r4,r18,r4
 80034f8:	88e2983a 	sll	r17,r17,r3
 80034fc:	2448b03a 	or	r4,r4,r17
 8003500:	800be280 	call	800be28 <__floatunsidf>
 8003504:	017f8434 	movhi	r5,65040
 8003508:	01800044 	movi	r6,1
 800350c:	1009883a 	mov	r4,r2
 8003510:	194b883a 	add	r5,r3,r5
 8003514:	843fffc4 	addi	r16,r16,-1
 8003518:	d9801115 	stw	r6,68(sp)
 800351c:	000d883a 	mov	r6,zero
 8003520:	01cffe34 	movhi	r7,16376
 8003524:	800b3d00 	call	800b3d0 <__subdf3>
 8003528:	0198dbf4 	movhi	r6,25455
 800352c:	01cff4f4 	movhi	r7,16339
 8003530:	3190d844 	addi	r6,r6,17249
 8003534:	39e1e9c4 	addi	r7,r7,-30809
 8003538:	1009883a 	mov	r4,r2
 800353c:	180b883a 	mov	r5,r3
 8003540:	800ab640 	call	800ab64 <__muldf3>
 8003544:	01a2d874 	movhi	r6,35681
 8003548:	01cff1f4 	movhi	r7,16327
 800354c:	31b22cc4 	addi	r6,r6,-14157
 8003550:	39e28a04 	addi	r7,r7,-30168
 8003554:	180b883a 	mov	r5,r3
 8003558:	1009883a 	mov	r4,r2
 800355c:	80096900 	call	8009690 <__adddf3>
 8003560:	8009883a 	mov	r4,r16
 8003564:	1029883a 	mov	r20,r2
 8003568:	1823883a 	mov	r17,r3
 800356c:	800bd4c0 	call	800bd4c <__floatsidf>
 8003570:	019427f4 	movhi	r6,20639
 8003574:	01cff4f4 	movhi	r7,16339
 8003578:	319e7ec4 	addi	r6,r6,31227
 800357c:	39d104c4 	addi	r7,r7,17427
 8003580:	1009883a 	mov	r4,r2
 8003584:	180b883a 	mov	r5,r3
 8003588:	800ab640 	call	800ab64 <__muldf3>
 800358c:	100d883a 	mov	r6,r2
 8003590:	180f883a 	mov	r7,r3
 8003594:	a009883a 	mov	r4,r20
 8003598:	880b883a 	mov	r5,r17
 800359c:	80096900 	call	8009690 <__adddf3>
 80035a0:	1009883a 	mov	r4,r2
 80035a4:	180b883a 	mov	r5,r3
 80035a8:	1029883a 	mov	r20,r2
 80035ac:	1823883a 	mov	r17,r3
 80035b0:	800bccc0 	call	800bccc <__fixdfsi>
 80035b4:	000d883a 	mov	r6,zero
 80035b8:	000f883a 	mov	r7,zero
 80035bc:	a009883a 	mov	r4,r20
 80035c0:	880b883a 	mov	r5,r17
 80035c4:	d8800515 	stw	r2,20(sp)
 80035c8:	800aa700 	call	800aa70 <__ledf2>
 80035cc:	10028716 	blt	r2,zero,8003fec <_dtoa_r+0xc88>
 80035d0:	d8c00517 	ldw	r3,20(sp)
 80035d4:	00800584 	movi	r2,22
 80035d8:	10c27536 	bltu	r2,r3,8003fb0 <_dtoa_r+0xc4c>
 80035dc:	180490fa 	slli	r2,r3,3
 80035e0:	00c20074 	movhi	r3,2049
 80035e4:	18f90904 	addi	r3,r3,-7132
 80035e8:	1885883a 	add	r2,r3,r2
 80035ec:	11000017 	ldw	r4,0(r2)
 80035f0:	11400117 	ldw	r5,4(r2)
 80035f4:	900d883a 	mov	r6,r18
 80035f8:	980f883a 	mov	r7,r19
 80035fc:	800a9940 	call	800a994 <__gedf2>
 8003600:	00828d0e 	bge	zero,r2,8004038 <_dtoa_r+0xcd4>
 8003604:	d9000517 	ldw	r4,20(sp)
 8003608:	d8000e15 	stw	zero,56(sp)
 800360c:	213fffc4 	addi	r4,r4,-1
 8003610:	d9000515 	stw	r4,20(sp)
 8003614:	b42dc83a 	sub	r22,r22,r16
 8003618:	b5bfffc4 	addi	r22,r22,-1
 800361c:	b0026f16 	blt	r22,zero,8003fdc <_dtoa_r+0xc78>
 8003620:	d8000815 	stw	zero,32(sp)
 8003624:	d9c00517 	ldw	r7,20(sp)
 8003628:	38026416 	blt	r7,zero,8003fbc <_dtoa_r+0xc58>
 800362c:	b1ed883a 	add	r22,r22,r7
 8003630:	d9c00d15 	stw	r7,52(sp)
 8003634:	d8000a15 	stw	zero,40(sp)
 8003638:	d9800317 	ldw	r6,12(sp)
 800363c:	00800244 	movi	r2,9
 8003640:	11811436 	bltu	r2,r6,8003a94 <_dtoa_r+0x730>
 8003644:	00800144 	movi	r2,5
 8003648:	1184e10e 	bge	r2,r6,80049d0 <_dtoa_r+0x166c>
 800364c:	31bfff04 	addi	r6,r6,-4
 8003650:	d9800315 	stw	r6,12(sp)
 8003654:	0023883a 	mov	r17,zero
 8003658:	d9800317 	ldw	r6,12(sp)
 800365c:	008000c4 	movi	r2,3
 8003660:	30836726 	beq	r6,r2,8004400 <_dtoa_r+0x109c>
 8003664:	1183410e 	bge	r2,r6,800436c <_dtoa_r+0x1008>
 8003668:	d9c00317 	ldw	r7,12(sp)
 800366c:	00800104 	movi	r2,4
 8003670:	38827c26 	beq	r7,r2,8004064 <_dtoa_r+0xd00>
 8003674:	00800144 	movi	r2,5
 8003678:	3884c41e 	bne	r7,r2,800498c <_dtoa_r+0x1628>
 800367c:	00800044 	movi	r2,1
 8003680:	d8800b15 	stw	r2,44(sp)
 8003684:	d8c00517 	ldw	r3,20(sp)
 8003688:	d9002217 	ldw	r4,136(sp)
 800368c:	1907883a 	add	r3,r3,r4
 8003690:	19800044 	addi	r6,r3,1
 8003694:	d8c00c15 	stw	r3,48(sp)
 8003698:	d9800615 	stw	r6,24(sp)
 800369c:	0183a40e 	bge	zero,r6,8004530 <_dtoa_r+0x11cc>
 80036a0:	d9800617 	ldw	r6,24(sp)
 80036a4:	3021883a 	mov	r16,r6
 80036a8:	e0001115 	stw	zero,68(fp)
 80036ac:	008005c4 	movi	r2,23
 80036b0:	1184c92e 	bgeu	r2,r6,80049d8 <_dtoa_r+0x1674>
 80036b4:	00c00044 	movi	r3,1
 80036b8:	00800104 	movi	r2,4
 80036bc:	1085883a 	add	r2,r2,r2
 80036c0:	11000504 	addi	r4,r2,20
 80036c4:	180b883a 	mov	r5,r3
 80036c8:	18c00044 	addi	r3,r3,1
 80036cc:	313ffb2e 	bgeu	r6,r4,80036bc <__alt_data_end+0xfc0036bc>
 80036d0:	e1401115 	stw	r5,68(fp)
 80036d4:	e009883a 	mov	r4,fp
 80036d8:	80055000 	call	8005500 <_Balloc>
 80036dc:	d8800715 	stw	r2,28(sp)
 80036e0:	e0801015 	stw	r2,64(fp)
 80036e4:	00800384 	movi	r2,14
 80036e8:	1400f736 	bltu	r2,r16,8003ac8 <_dtoa_r+0x764>
 80036ec:	8800f626 	beq	r17,zero,8003ac8 <_dtoa_r+0x764>
 80036f0:	d9c00517 	ldw	r7,20(sp)
 80036f4:	01c39a0e 	bge	zero,r7,8004560 <_dtoa_r+0x11fc>
 80036f8:	388003cc 	andi	r2,r7,15
 80036fc:	100490fa 	slli	r2,r2,3
 8003700:	382bd13a 	srai	r21,r7,4
 8003704:	00c20074 	movhi	r3,2049
 8003708:	18f90904 	addi	r3,r3,-7132
 800370c:	1885883a 	add	r2,r3,r2
 8003710:	a8c0040c 	andi	r3,r21,16
 8003714:	12400017 	ldw	r9,0(r2)
 8003718:	12000117 	ldw	r8,4(r2)
 800371c:	18037926 	beq	r3,zero,8004504 <_dtoa_r+0x11a0>
 8003720:	00820074 	movhi	r2,2049
 8003724:	10b8ff04 	addi	r2,r2,-7172
 8003728:	11800817 	ldw	r6,32(r2)
 800372c:	11c00917 	ldw	r7,36(r2)
 8003730:	9009883a 	mov	r4,r18
 8003734:	980b883a 	mov	r5,r19
 8003738:	da001715 	stw	r8,92(sp)
 800373c:	da401615 	stw	r9,88(sp)
 8003740:	8009f3c0 	call	8009f3c <__divdf3>
 8003744:	da001717 	ldw	r8,92(sp)
 8003748:	da401617 	ldw	r9,88(sp)
 800374c:	ad4003cc 	andi	r21,r21,15
 8003750:	040000c4 	movi	r16,3
 8003754:	1023883a 	mov	r17,r2
 8003758:	1829883a 	mov	r20,r3
 800375c:	a8001126 	beq	r21,zero,80037a4 <_dtoa_r+0x440>
 8003760:	05c20074 	movhi	r23,2049
 8003764:	bdf8ff04 	addi	r23,r23,-7172
 8003768:	4805883a 	mov	r2,r9
 800376c:	4007883a 	mov	r3,r8
 8003770:	a980004c 	andi	r6,r21,1
 8003774:	1009883a 	mov	r4,r2
 8003778:	a82bd07a 	srai	r21,r21,1
 800377c:	180b883a 	mov	r5,r3
 8003780:	30000426 	beq	r6,zero,8003794 <_dtoa_r+0x430>
 8003784:	b9800017 	ldw	r6,0(r23)
 8003788:	b9c00117 	ldw	r7,4(r23)
 800378c:	84000044 	addi	r16,r16,1
 8003790:	800ab640 	call	800ab64 <__muldf3>
 8003794:	bdc00204 	addi	r23,r23,8
 8003798:	a83ff51e 	bne	r21,zero,8003770 <__alt_data_end+0xfc003770>
 800379c:	1013883a 	mov	r9,r2
 80037a0:	1811883a 	mov	r8,r3
 80037a4:	480d883a 	mov	r6,r9
 80037a8:	400f883a 	mov	r7,r8
 80037ac:	8809883a 	mov	r4,r17
 80037b0:	a00b883a 	mov	r5,r20
 80037b4:	8009f3c0 	call	8009f3c <__divdf3>
 80037b8:	d8800f15 	stw	r2,60(sp)
 80037bc:	d8c01015 	stw	r3,64(sp)
 80037c0:	d8c00e17 	ldw	r3,56(sp)
 80037c4:	18000626 	beq	r3,zero,80037e0 <_dtoa_r+0x47c>
 80037c8:	d9000f17 	ldw	r4,60(sp)
 80037cc:	d9401017 	ldw	r5,64(sp)
 80037d0:	000d883a 	mov	r6,zero
 80037d4:	01cffc34 	movhi	r7,16368
 80037d8:	800aa700 	call	800aa70 <__ledf2>
 80037dc:	10040b16 	blt	r2,zero,800480c <_dtoa_r+0x14a8>
 80037e0:	8009883a 	mov	r4,r16
 80037e4:	800bd4c0 	call	800bd4c <__floatsidf>
 80037e8:	d9800f17 	ldw	r6,60(sp)
 80037ec:	d9c01017 	ldw	r7,64(sp)
 80037f0:	1009883a 	mov	r4,r2
 80037f4:	180b883a 	mov	r5,r3
 80037f8:	800ab640 	call	800ab64 <__muldf3>
 80037fc:	000d883a 	mov	r6,zero
 8003800:	01d00734 	movhi	r7,16412
 8003804:	1009883a 	mov	r4,r2
 8003808:	180b883a 	mov	r5,r3
 800380c:	80096900 	call	8009690 <__adddf3>
 8003810:	1021883a 	mov	r16,r2
 8003814:	d8800617 	ldw	r2,24(sp)
 8003818:	047f3034 	movhi	r17,64704
 800381c:	1c63883a 	add	r17,r3,r17
 8003820:	10031826 	beq	r2,zero,8004484 <_dtoa_r+0x1120>
 8003824:	d8c00517 	ldw	r3,20(sp)
 8003828:	db000617 	ldw	r12,24(sp)
 800382c:	d8c01315 	stw	r3,76(sp)
 8003830:	d9000b17 	ldw	r4,44(sp)
 8003834:	20038f26 	beq	r4,zero,8004674 <_dtoa_r+0x1310>
 8003838:	60bfffc4 	addi	r2,r12,-1
 800383c:	100490fa 	slli	r2,r2,3
 8003840:	00c20074 	movhi	r3,2049
 8003844:	18f90904 	addi	r3,r3,-7132
 8003848:	1885883a 	add	r2,r3,r2
 800384c:	11800017 	ldw	r6,0(r2)
 8003850:	11c00117 	ldw	r7,4(r2)
 8003854:	d8800717 	ldw	r2,28(sp)
 8003858:	0009883a 	mov	r4,zero
 800385c:	014ff834 	movhi	r5,16352
 8003860:	db001615 	stw	r12,88(sp)
 8003864:	15c00044 	addi	r23,r2,1
 8003868:	8009f3c0 	call	8009f3c <__divdf3>
 800386c:	800d883a 	mov	r6,r16
 8003870:	880f883a 	mov	r7,r17
 8003874:	1009883a 	mov	r4,r2
 8003878:	180b883a 	mov	r5,r3
 800387c:	800b3d00 	call	800b3d0 <__subdf3>
 8003880:	d9401017 	ldw	r5,64(sp)
 8003884:	d9000f17 	ldw	r4,60(sp)
 8003888:	102b883a 	mov	r21,r2
 800388c:	d8c01215 	stw	r3,72(sp)
 8003890:	800bccc0 	call	800bccc <__fixdfsi>
 8003894:	1009883a 	mov	r4,r2
 8003898:	1029883a 	mov	r20,r2
 800389c:	800bd4c0 	call	800bd4c <__floatsidf>
 80038a0:	d9000f17 	ldw	r4,60(sp)
 80038a4:	d9401017 	ldw	r5,64(sp)
 80038a8:	100d883a 	mov	r6,r2
 80038ac:	180f883a 	mov	r7,r3
 80038b0:	800b3d00 	call	800b3d0 <__subdf3>
 80038b4:	1823883a 	mov	r17,r3
 80038b8:	d8c00717 	ldw	r3,28(sp)
 80038bc:	d9401217 	ldw	r5,72(sp)
 80038c0:	a2000c04 	addi	r8,r20,48
 80038c4:	1021883a 	mov	r16,r2
 80038c8:	1a000005 	stb	r8,0(r3)
 80038cc:	800d883a 	mov	r6,r16
 80038d0:	880f883a 	mov	r7,r17
 80038d4:	a809883a 	mov	r4,r21
 80038d8:	4029883a 	mov	r20,r8
 80038dc:	800a9940 	call	800a994 <__gedf2>
 80038e0:	00841d16 	blt	zero,r2,8004958 <_dtoa_r+0x15f4>
 80038e4:	800d883a 	mov	r6,r16
 80038e8:	880f883a 	mov	r7,r17
 80038ec:	0009883a 	mov	r4,zero
 80038f0:	014ffc34 	movhi	r5,16368
 80038f4:	800b3d00 	call	800b3d0 <__subdf3>
 80038f8:	d9401217 	ldw	r5,72(sp)
 80038fc:	100d883a 	mov	r6,r2
 8003900:	180f883a 	mov	r7,r3
 8003904:	a809883a 	mov	r4,r21
 8003908:	800a9940 	call	800a994 <__gedf2>
 800390c:	db001617 	ldw	r12,88(sp)
 8003910:	00840e16 	blt	zero,r2,800494c <_dtoa_r+0x15e8>
 8003914:	00800044 	movi	r2,1
 8003918:	13006b0e 	bge	r2,r12,8003ac8 <_dtoa_r+0x764>
 800391c:	d9000717 	ldw	r4,28(sp)
 8003920:	dd800f15 	stw	r22,60(sp)
 8003924:	dcc01015 	stw	r19,64(sp)
 8003928:	2319883a 	add	r12,r4,r12
 800392c:	dcc01217 	ldw	r19,72(sp)
 8003930:	602d883a 	mov	r22,r12
 8003934:	dc801215 	stw	r18,72(sp)
 8003938:	b825883a 	mov	r18,r23
 800393c:	00000906 	br	8003964 <_dtoa_r+0x600>
 8003940:	800b3d00 	call	800b3d0 <__subdf3>
 8003944:	a80d883a 	mov	r6,r21
 8003948:	980f883a 	mov	r7,r19
 800394c:	1009883a 	mov	r4,r2
 8003950:	180b883a 	mov	r5,r3
 8003954:	800aa700 	call	800aa70 <__ledf2>
 8003958:	1003e816 	blt	r2,zero,80048fc <_dtoa_r+0x1598>
 800395c:	b825883a 	mov	r18,r23
 8003960:	bd83e926 	beq	r23,r22,8004908 <_dtoa_r+0x15a4>
 8003964:	a809883a 	mov	r4,r21
 8003968:	980b883a 	mov	r5,r19
 800396c:	000d883a 	mov	r6,zero
 8003970:	01d00934 	movhi	r7,16420
 8003974:	800ab640 	call	800ab64 <__muldf3>
 8003978:	000d883a 	mov	r6,zero
 800397c:	01d00934 	movhi	r7,16420
 8003980:	8009883a 	mov	r4,r16
 8003984:	880b883a 	mov	r5,r17
 8003988:	102b883a 	mov	r21,r2
 800398c:	1827883a 	mov	r19,r3
 8003990:	800ab640 	call	800ab64 <__muldf3>
 8003994:	180b883a 	mov	r5,r3
 8003998:	1009883a 	mov	r4,r2
 800399c:	1821883a 	mov	r16,r3
 80039a0:	1023883a 	mov	r17,r2
 80039a4:	800bccc0 	call	800bccc <__fixdfsi>
 80039a8:	1009883a 	mov	r4,r2
 80039ac:	1029883a 	mov	r20,r2
 80039b0:	800bd4c0 	call	800bd4c <__floatsidf>
 80039b4:	8809883a 	mov	r4,r17
 80039b8:	800b883a 	mov	r5,r16
 80039bc:	100d883a 	mov	r6,r2
 80039c0:	180f883a 	mov	r7,r3
 80039c4:	800b3d00 	call	800b3d0 <__subdf3>
 80039c8:	a5000c04 	addi	r20,r20,48
 80039cc:	a80d883a 	mov	r6,r21
 80039d0:	980f883a 	mov	r7,r19
 80039d4:	1009883a 	mov	r4,r2
 80039d8:	180b883a 	mov	r5,r3
 80039dc:	95000005 	stb	r20,0(r18)
 80039e0:	1021883a 	mov	r16,r2
 80039e4:	1823883a 	mov	r17,r3
 80039e8:	800aa700 	call	800aa70 <__ledf2>
 80039ec:	bdc00044 	addi	r23,r23,1
 80039f0:	800d883a 	mov	r6,r16
 80039f4:	880f883a 	mov	r7,r17
 80039f8:	0009883a 	mov	r4,zero
 80039fc:	014ffc34 	movhi	r5,16368
 8003a00:	103fcf0e 	bge	r2,zero,8003940 <__alt_data_end+0xfc003940>
 8003a04:	d8c01317 	ldw	r3,76(sp)
 8003a08:	d8c00515 	stw	r3,20(sp)
 8003a0c:	d9400917 	ldw	r5,36(sp)
 8003a10:	e009883a 	mov	r4,fp
 8003a14:	80055a80 	call	80055a8 <_Bfree>
 8003a18:	d9000517 	ldw	r4,20(sp)
 8003a1c:	d9802317 	ldw	r6,140(sp)
 8003a20:	d9c02517 	ldw	r7,148(sp)
 8003a24:	b8000005 	stb	zero,0(r23)
 8003a28:	20800044 	addi	r2,r4,1
 8003a2c:	30800015 	stw	r2,0(r6)
 8003a30:	3802aa26 	beq	r7,zero,80044dc <_dtoa_r+0x1178>
 8003a34:	3dc00015 	stw	r23,0(r7)
 8003a38:	d8800717 	ldw	r2,28(sp)
 8003a3c:	003e7906 	br	8003424 <__alt_data_end+0xfc003424>
 8003a40:	00800434 	movhi	r2,16
 8003a44:	10bfffc4 	addi	r2,r2,-1
 8003a48:	88a2703a 	and	r17,r17,r2
 8003a4c:	883e851e 	bne	r17,zero,8003464 <__alt_data_end+0xfc003464>
 8003a50:	00820074 	movhi	r2,2049
 8003a54:	10b8ea04 	addi	r2,r2,-7256
 8003a58:	003e8406 	br	800346c <__alt_data_end+0xfc00346c>
 8003a5c:	10c00204 	addi	r3,r2,8
 8003a60:	003e8706 	br	8003480 <__alt_data_end+0xfc003480>
 8003a64:	01400434 	movhi	r5,16
 8003a68:	297fffc4 	addi	r5,r5,-1
 8003a6c:	994a703a 	and	r5,r19,r5
 8003a70:	9009883a 	mov	r4,r18
 8003a74:	843f0044 	addi	r16,r16,-1023
 8003a78:	294ffc34 	orhi	r5,r5,16368
 8003a7c:	dd800217 	ldw	r22,8(sp)
 8003a80:	d8001115 	stw	zero,68(sp)
 8003a84:	003ea506 	br	800351c <__alt_data_end+0xfc00351c>
 8003a88:	00820074 	movhi	r2,2049
 8003a8c:	10b8e104 	addi	r2,r2,-7292
 8003a90:	003e6406 	br	8003424 <__alt_data_end+0xfc003424>
 8003a94:	e0001115 	stw	zero,68(fp)
 8003a98:	000b883a 	mov	r5,zero
 8003a9c:	e009883a 	mov	r4,fp
 8003aa0:	80055000 	call	8005500 <_Balloc>
 8003aa4:	01bfffc4 	movi	r6,-1
 8003aa8:	01c00044 	movi	r7,1
 8003aac:	d8800715 	stw	r2,28(sp)
 8003ab0:	d9800c15 	stw	r6,48(sp)
 8003ab4:	e0801015 	stw	r2,64(fp)
 8003ab8:	d8000315 	stw	zero,12(sp)
 8003abc:	d9c00b15 	stw	r7,44(sp)
 8003ac0:	d9800615 	stw	r6,24(sp)
 8003ac4:	d8002215 	stw	zero,136(sp)
 8003ac8:	d8800117 	ldw	r2,4(sp)
 8003acc:	10008916 	blt	r2,zero,8003cf4 <_dtoa_r+0x990>
 8003ad0:	d9000517 	ldw	r4,20(sp)
 8003ad4:	00c00384 	movi	r3,14
 8003ad8:	19008616 	blt	r3,r4,8003cf4 <_dtoa_r+0x990>
 8003adc:	200490fa 	slli	r2,r4,3
 8003ae0:	00c20074 	movhi	r3,2049
 8003ae4:	d9802217 	ldw	r6,136(sp)
 8003ae8:	18f90904 	addi	r3,r3,-7132
 8003aec:	1885883a 	add	r2,r3,r2
 8003af0:	14000017 	ldw	r16,0(r2)
 8003af4:	14400117 	ldw	r17,4(r2)
 8003af8:	30016316 	blt	r6,zero,8004088 <_dtoa_r+0xd24>
 8003afc:	800d883a 	mov	r6,r16
 8003b00:	880f883a 	mov	r7,r17
 8003b04:	9009883a 	mov	r4,r18
 8003b08:	980b883a 	mov	r5,r19
 8003b0c:	8009f3c0 	call	8009f3c <__divdf3>
 8003b10:	180b883a 	mov	r5,r3
 8003b14:	1009883a 	mov	r4,r2
 8003b18:	800bccc0 	call	800bccc <__fixdfsi>
 8003b1c:	1009883a 	mov	r4,r2
 8003b20:	102b883a 	mov	r21,r2
 8003b24:	800bd4c0 	call	800bd4c <__floatsidf>
 8003b28:	800d883a 	mov	r6,r16
 8003b2c:	880f883a 	mov	r7,r17
 8003b30:	1009883a 	mov	r4,r2
 8003b34:	180b883a 	mov	r5,r3
 8003b38:	800ab640 	call	800ab64 <__muldf3>
 8003b3c:	100d883a 	mov	r6,r2
 8003b40:	180f883a 	mov	r7,r3
 8003b44:	9009883a 	mov	r4,r18
 8003b48:	980b883a 	mov	r5,r19
 8003b4c:	800b3d00 	call	800b3d0 <__subdf3>
 8003b50:	d9c00717 	ldw	r7,28(sp)
 8003b54:	1009883a 	mov	r4,r2
 8003b58:	a8800c04 	addi	r2,r21,48
 8003b5c:	38800005 	stb	r2,0(r7)
 8003b60:	3dc00044 	addi	r23,r7,1
 8003b64:	d9c00617 	ldw	r7,24(sp)
 8003b68:	01800044 	movi	r6,1
 8003b6c:	180b883a 	mov	r5,r3
 8003b70:	2005883a 	mov	r2,r4
 8003b74:	39803826 	beq	r7,r6,8003c58 <_dtoa_r+0x8f4>
 8003b78:	000d883a 	mov	r6,zero
 8003b7c:	01d00934 	movhi	r7,16420
 8003b80:	800ab640 	call	800ab64 <__muldf3>
 8003b84:	000d883a 	mov	r6,zero
 8003b88:	000f883a 	mov	r7,zero
 8003b8c:	1009883a 	mov	r4,r2
 8003b90:	180b883a 	mov	r5,r3
 8003b94:	1025883a 	mov	r18,r2
 8003b98:	1827883a 	mov	r19,r3
 8003b9c:	800a90c0 	call	800a90c <__eqdf2>
 8003ba0:	103f9a26 	beq	r2,zero,8003a0c <__alt_data_end+0xfc003a0c>
 8003ba4:	d9c00617 	ldw	r7,24(sp)
 8003ba8:	d8c00717 	ldw	r3,28(sp)
 8003bac:	b829883a 	mov	r20,r23
 8003bb0:	38bfffc4 	addi	r2,r7,-1
 8003bb4:	18ad883a 	add	r22,r3,r2
 8003bb8:	00000a06 	br	8003be4 <_dtoa_r+0x880>
 8003bbc:	800ab640 	call	800ab64 <__muldf3>
 8003bc0:	000d883a 	mov	r6,zero
 8003bc4:	000f883a 	mov	r7,zero
 8003bc8:	1009883a 	mov	r4,r2
 8003bcc:	180b883a 	mov	r5,r3
 8003bd0:	1025883a 	mov	r18,r2
 8003bd4:	1827883a 	mov	r19,r3
 8003bd8:	b829883a 	mov	r20,r23
 8003bdc:	800a90c0 	call	800a90c <__eqdf2>
 8003be0:	103f8a26 	beq	r2,zero,8003a0c <__alt_data_end+0xfc003a0c>
 8003be4:	800d883a 	mov	r6,r16
 8003be8:	880f883a 	mov	r7,r17
 8003bec:	9009883a 	mov	r4,r18
 8003bf0:	980b883a 	mov	r5,r19
 8003bf4:	8009f3c0 	call	8009f3c <__divdf3>
 8003bf8:	180b883a 	mov	r5,r3
 8003bfc:	1009883a 	mov	r4,r2
 8003c00:	800bccc0 	call	800bccc <__fixdfsi>
 8003c04:	1009883a 	mov	r4,r2
 8003c08:	102b883a 	mov	r21,r2
 8003c0c:	800bd4c0 	call	800bd4c <__floatsidf>
 8003c10:	800d883a 	mov	r6,r16
 8003c14:	880f883a 	mov	r7,r17
 8003c18:	1009883a 	mov	r4,r2
 8003c1c:	180b883a 	mov	r5,r3
 8003c20:	800ab640 	call	800ab64 <__muldf3>
 8003c24:	100d883a 	mov	r6,r2
 8003c28:	180f883a 	mov	r7,r3
 8003c2c:	9009883a 	mov	r4,r18
 8003c30:	980b883a 	mov	r5,r19
 8003c34:	800b3d00 	call	800b3d0 <__subdf3>
 8003c38:	aa000c04 	addi	r8,r21,48
 8003c3c:	a2000005 	stb	r8,0(r20)
 8003c40:	000d883a 	mov	r6,zero
 8003c44:	01d00934 	movhi	r7,16420
 8003c48:	1009883a 	mov	r4,r2
 8003c4c:	180b883a 	mov	r5,r3
 8003c50:	a5c00044 	addi	r23,r20,1
 8003c54:	b53fd91e 	bne	r22,r20,8003bbc <__alt_data_end+0xfc003bbc>
 8003c58:	100d883a 	mov	r6,r2
 8003c5c:	180f883a 	mov	r7,r3
 8003c60:	1009883a 	mov	r4,r2
 8003c64:	180b883a 	mov	r5,r3
 8003c68:	80096900 	call	8009690 <__adddf3>
 8003c6c:	100d883a 	mov	r6,r2
 8003c70:	180f883a 	mov	r7,r3
 8003c74:	8009883a 	mov	r4,r16
 8003c78:	880b883a 	mov	r5,r17
 8003c7c:	1027883a 	mov	r19,r2
 8003c80:	1825883a 	mov	r18,r3
 8003c84:	800aa700 	call	800aa70 <__ledf2>
 8003c88:	10000816 	blt	r2,zero,8003cac <_dtoa_r+0x948>
 8003c8c:	980d883a 	mov	r6,r19
 8003c90:	900f883a 	mov	r7,r18
 8003c94:	8009883a 	mov	r4,r16
 8003c98:	880b883a 	mov	r5,r17
 8003c9c:	800a90c0 	call	800a90c <__eqdf2>
 8003ca0:	103f5a1e 	bne	r2,zero,8003a0c <__alt_data_end+0xfc003a0c>
 8003ca4:	ad40004c 	andi	r21,r21,1
 8003ca8:	a83f5826 	beq	r21,zero,8003a0c <__alt_data_end+0xfc003a0c>
 8003cac:	bd3fffc3 	ldbu	r20,-1(r23)
 8003cb0:	b8bfffc4 	addi	r2,r23,-1
 8003cb4:	1007883a 	mov	r3,r2
 8003cb8:	01400e44 	movi	r5,57
 8003cbc:	d9800717 	ldw	r6,28(sp)
 8003cc0:	00000506 	br	8003cd8 <_dtoa_r+0x974>
 8003cc4:	18ffffc4 	addi	r3,r3,-1
 8003cc8:	11824726 	beq	r2,r6,80045e8 <_dtoa_r+0x1284>
 8003ccc:	1d000003 	ldbu	r20,0(r3)
 8003cd0:	102f883a 	mov	r23,r2
 8003cd4:	10bfffc4 	addi	r2,r2,-1
 8003cd8:	a1003fcc 	andi	r4,r20,255
 8003cdc:	2100201c 	xori	r4,r4,128
 8003ce0:	213fe004 	addi	r4,r4,-128
 8003ce4:	217ff726 	beq	r4,r5,8003cc4 <__alt_data_end+0xfc003cc4>
 8003ce8:	a2000044 	addi	r8,r20,1
 8003cec:	12000005 	stb	r8,0(r2)
 8003cf0:	003f4606 	br	8003a0c <__alt_data_end+0xfc003a0c>
 8003cf4:	d9000b17 	ldw	r4,44(sp)
 8003cf8:	2000c826 	beq	r4,zero,800401c <_dtoa_r+0xcb8>
 8003cfc:	d9800317 	ldw	r6,12(sp)
 8003d00:	00c00044 	movi	r3,1
 8003d04:	1980f90e 	bge	r3,r6,80040ec <_dtoa_r+0xd88>
 8003d08:	d8800617 	ldw	r2,24(sp)
 8003d0c:	d8c00a17 	ldw	r3,40(sp)
 8003d10:	157fffc4 	addi	r21,r2,-1
 8003d14:	1d41f316 	blt	r3,r21,80044e4 <_dtoa_r+0x1180>
 8003d18:	1d6bc83a 	sub	r21,r3,r21
 8003d1c:	d9c00617 	ldw	r7,24(sp)
 8003d20:	3802aa16 	blt	r7,zero,80047cc <_dtoa_r+0x1468>
 8003d24:	dd000817 	ldw	r20,32(sp)
 8003d28:	d8800617 	ldw	r2,24(sp)
 8003d2c:	d8c00817 	ldw	r3,32(sp)
 8003d30:	01400044 	movi	r5,1
 8003d34:	e009883a 	mov	r4,fp
 8003d38:	1887883a 	add	r3,r3,r2
 8003d3c:	d8c00815 	stw	r3,32(sp)
 8003d40:	b0ad883a 	add	r22,r22,r2
 8003d44:	80059340 	call	8005934 <__i2b>
 8003d48:	1023883a 	mov	r17,r2
 8003d4c:	a0000826 	beq	r20,zero,8003d70 <_dtoa_r+0xa0c>
 8003d50:	0580070e 	bge	zero,r22,8003d70 <_dtoa_r+0xa0c>
 8003d54:	a005883a 	mov	r2,r20
 8003d58:	b500b916 	blt	r22,r20,8004040 <_dtoa_r+0xcdc>
 8003d5c:	d9000817 	ldw	r4,32(sp)
 8003d60:	a0a9c83a 	sub	r20,r20,r2
 8003d64:	b0adc83a 	sub	r22,r22,r2
 8003d68:	2089c83a 	sub	r4,r4,r2
 8003d6c:	d9000815 	stw	r4,32(sp)
 8003d70:	d9800a17 	ldw	r6,40(sp)
 8003d74:	0181810e 	bge	zero,r6,800437c <_dtoa_r+0x1018>
 8003d78:	d9c00b17 	ldw	r7,44(sp)
 8003d7c:	3800b326 	beq	r7,zero,800404c <_dtoa_r+0xce8>
 8003d80:	a800b226 	beq	r21,zero,800404c <_dtoa_r+0xce8>
 8003d84:	880b883a 	mov	r5,r17
 8003d88:	a80d883a 	mov	r6,r21
 8003d8c:	e009883a 	mov	r4,fp
 8003d90:	8005bfc0 	call	8005bfc <__pow5mult>
 8003d94:	d9800917 	ldw	r6,36(sp)
 8003d98:	100b883a 	mov	r5,r2
 8003d9c:	e009883a 	mov	r4,fp
 8003da0:	1023883a 	mov	r17,r2
 8003da4:	80059700 	call	8005970 <__multiply>
 8003da8:	1021883a 	mov	r16,r2
 8003dac:	d8800a17 	ldw	r2,40(sp)
 8003db0:	d9400917 	ldw	r5,36(sp)
 8003db4:	e009883a 	mov	r4,fp
 8003db8:	1545c83a 	sub	r2,r2,r21
 8003dbc:	d8800a15 	stw	r2,40(sp)
 8003dc0:	80055a80 	call	80055a8 <_Bfree>
 8003dc4:	d8c00a17 	ldw	r3,40(sp)
 8003dc8:	18009f1e 	bne	r3,zero,8004048 <_dtoa_r+0xce4>
 8003dcc:	05c00044 	movi	r23,1
 8003dd0:	e009883a 	mov	r4,fp
 8003dd4:	b80b883a 	mov	r5,r23
 8003dd8:	80059340 	call	8005934 <__i2b>
 8003ddc:	d9000d17 	ldw	r4,52(sp)
 8003de0:	102b883a 	mov	r21,r2
 8003de4:	2000ce26 	beq	r4,zero,8004120 <_dtoa_r+0xdbc>
 8003de8:	200d883a 	mov	r6,r4
 8003dec:	100b883a 	mov	r5,r2
 8003df0:	e009883a 	mov	r4,fp
 8003df4:	8005bfc0 	call	8005bfc <__pow5mult>
 8003df8:	d9800317 	ldw	r6,12(sp)
 8003dfc:	102b883a 	mov	r21,r2
 8003e00:	b981810e 	bge	r23,r6,8004408 <_dtoa_r+0x10a4>
 8003e04:	0027883a 	mov	r19,zero
 8003e08:	a8800417 	ldw	r2,16(r21)
 8003e0c:	05c00804 	movi	r23,32
 8003e10:	10800104 	addi	r2,r2,4
 8003e14:	1085883a 	add	r2,r2,r2
 8003e18:	1085883a 	add	r2,r2,r2
 8003e1c:	a885883a 	add	r2,r21,r2
 8003e20:	11000017 	ldw	r4,0(r2)
 8003e24:	800581c0 	call	800581c <__hi0bits>
 8003e28:	b885c83a 	sub	r2,r23,r2
 8003e2c:	1585883a 	add	r2,r2,r22
 8003e30:	108007cc 	andi	r2,r2,31
 8003e34:	1000b326 	beq	r2,zero,8004104 <_dtoa_r+0xda0>
 8003e38:	00c00804 	movi	r3,32
 8003e3c:	1887c83a 	sub	r3,r3,r2
 8003e40:	01000104 	movi	r4,4
 8003e44:	20c2cd0e 	bge	r4,r3,800497c <_dtoa_r+0x1618>
 8003e48:	00c00704 	movi	r3,28
 8003e4c:	1885c83a 	sub	r2,r3,r2
 8003e50:	d8c00817 	ldw	r3,32(sp)
 8003e54:	a0a9883a 	add	r20,r20,r2
 8003e58:	b0ad883a 	add	r22,r22,r2
 8003e5c:	1887883a 	add	r3,r3,r2
 8003e60:	d8c00815 	stw	r3,32(sp)
 8003e64:	d9800817 	ldw	r6,32(sp)
 8003e68:	0180040e 	bge	zero,r6,8003e7c <_dtoa_r+0xb18>
 8003e6c:	800b883a 	mov	r5,r16
 8003e70:	e009883a 	mov	r4,fp
 8003e74:	8005d3c0 	call	8005d3c <__lshift>
 8003e78:	1021883a 	mov	r16,r2
 8003e7c:	0580050e 	bge	zero,r22,8003e94 <_dtoa_r+0xb30>
 8003e80:	a80b883a 	mov	r5,r21
 8003e84:	b00d883a 	mov	r6,r22
 8003e88:	e009883a 	mov	r4,fp
 8003e8c:	8005d3c0 	call	8005d3c <__lshift>
 8003e90:	102b883a 	mov	r21,r2
 8003e94:	d9c00e17 	ldw	r7,56(sp)
 8003e98:	3801211e 	bne	r7,zero,8004320 <_dtoa_r+0xfbc>
 8003e9c:	d9800617 	ldw	r6,24(sp)
 8003ea0:	0181380e 	bge	zero,r6,8004384 <_dtoa_r+0x1020>
 8003ea4:	d8c00b17 	ldw	r3,44(sp)
 8003ea8:	1800ab1e 	bne	r3,zero,8004158 <_dtoa_r+0xdf4>
 8003eac:	dc800717 	ldw	r18,28(sp)
 8003eb0:	dcc00617 	ldw	r19,24(sp)
 8003eb4:	9029883a 	mov	r20,r18
 8003eb8:	00000206 	br	8003ec4 <_dtoa_r+0xb60>
 8003ebc:	80055d00 	call	80055d0 <__multadd>
 8003ec0:	1021883a 	mov	r16,r2
 8003ec4:	a80b883a 	mov	r5,r21
 8003ec8:	8009883a 	mov	r4,r16
 8003ecc:	800313c0 	call	800313c <quorem>
 8003ed0:	10800c04 	addi	r2,r2,48
 8003ed4:	90800005 	stb	r2,0(r18)
 8003ed8:	94800044 	addi	r18,r18,1
 8003edc:	9507c83a 	sub	r3,r18,r20
 8003ee0:	000f883a 	mov	r7,zero
 8003ee4:	01800284 	movi	r6,10
 8003ee8:	800b883a 	mov	r5,r16
 8003eec:	e009883a 	mov	r4,fp
 8003ef0:	1cfff216 	blt	r3,r19,8003ebc <__alt_data_end+0xfc003ebc>
 8003ef4:	1011883a 	mov	r8,r2
 8003ef8:	d8800617 	ldw	r2,24(sp)
 8003efc:	0082370e 	bge	zero,r2,80047dc <_dtoa_r+0x1478>
 8003f00:	d9000717 	ldw	r4,28(sp)
 8003f04:	0025883a 	mov	r18,zero
 8003f08:	20af883a 	add	r23,r4,r2
 8003f0c:	01800044 	movi	r6,1
 8003f10:	800b883a 	mov	r5,r16
 8003f14:	e009883a 	mov	r4,fp
 8003f18:	da001715 	stw	r8,92(sp)
 8003f1c:	8005d3c0 	call	8005d3c <__lshift>
 8003f20:	a80b883a 	mov	r5,r21
 8003f24:	1009883a 	mov	r4,r2
 8003f28:	d8800915 	stw	r2,36(sp)
 8003f2c:	8005e840 	call	8005e84 <__mcmp>
 8003f30:	da001717 	ldw	r8,92(sp)
 8003f34:	0081800e 	bge	zero,r2,8004538 <_dtoa_r+0x11d4>
 8003f38:	b93fffc3 	ldbu	r4,-1(r23)
 8003f3c:	b8bfffc4 	addi	r2,r23,-1
 8003f40:	1007883a 	mov	r3,r2
 8003f44:	01800e44 	movi	r6,57
 8003f48:	d9c00717 	ldw	r7,28(sp)
 8003f4c:	00000506 	br	8003f64 <_dtoa_r+0xc00>
 8003f50:	18ffffc4 	addi	r3,r3,-1
 8003f54:	11c12326 	beq	r2,r7,80043e4 <_dtoa_r+0x1080>
 8003f58:	19000003 	ldbu	r4,0(r3)
 8003f5c:	102f883a 	mov	r23,r2
 8003f60:	10bfffc4 	addi	r2,r2,-1
 8003f64:	21403fcc 	andi	r5,r4,255
 8003f68:	2940201c 	xori	r5,r5,128
 8003f6c:	297fe004 	addi	r5,r5,-128
 8003f70:	29bff726 	beq	r5,r6,8003f50 <__alt_data_end+0xfc003f50>
 8003f74:	21000044 	addi	r4,r4,1
 8003f78:	11000005 	stb	r4,0(r2)
 8003f7c:	a80b883a 	mov	r5,r21
 8003f80:	e009883a 	mov	r4,fp
 8003f84:	80055a80 	call	80055a8 <_Bfree>
 8003f88:	883ea026 	beq	r17,zero,8003a0c <__alt_data_end+0xfc003a0c>
 8003f8c:	90000426 	beq	r18,zero,8003fa0 <_dtoa_r+0xc3c>
 8003f90:	94400326 	beq	r18,r17,8003fa0 <_dtoa_r+0xc3c>
 8003f94:	900b883a 	mov	r5,r18
 8003f98:	e009883a 	mov	r4,fp
 8003f9c:	80055a80 	call	80055a8 <_Bfree>
 8003fa0:	880b883a 	mov	r5,r17
 8003fa4:	e009883a 	mov	r4,fp
 8003fa8:	80055a80 	call	80055a8 <_Bfree>
 8003fac:	003e9706 	br	8003a0c <__alt_data_end+0xfc003a0c>
 8003fb0:	01800044 	movi	r6,1
 8003fb4:	d9800e15 	stw	r6,56(sp)
 8003fb8:	003d9606 	br	8003614 <__alt_data_end+0xfc003614>
 8003fbc:	d8800817 	ldw	r2,32(sp)
 8003fc0:	d8c00517 	ldw	r3,20(sp)
 8003fc4:	d8000d15 	stw	zero,52(sp)
 8003fc8:	10c5c83a 	sub	r2,r2,r3
 8003fcc:	00c9c83a 	sub	r4,zero,r3
 8003fd0:	d8800815 	stw	r2,32(sp)
 8003fd4:	d9000a15 	stw	r4,40(sp)
 8003fd8:	003d9706 	br	8003638 <__alt_data_end+0xfc003638>
 8003fdc:	05adc83a 	sub	r22,zero,r22
 8003fe0:	dd800815 	stw	r22,32(sp)
 8003fe4:	002d883a 	mov	r22,zero
 8003fe8:	003d8e06 	br	8003624 <__alt_data_end+0xfc003624>
 8003fec:	d9000517 	ldw	r4,20(sp)
 8003ff0:	800bd4c0 	call	800bd4c <__floatsidf>
 8003ff4:	100d883a 	mov	r6,r2
 8003ff8:	180f883a 	mov	r7,r3
 8003ffc:	a009883a 	mov	r4,r20
 8004000:	880b883a 	mov	r5,r17
 8004004:	800a90c0 	call	800a90c <__eqdf2>
 8004008:	103d7126 	beq	r2,zero,80035d0 <__alt_data_end+0xfc0035d0>
 800400c:	d9c00517 	ldw	r7,20(sp)
 8004010:	39ffffc4 	addi	r7,r7,-1
 8004014:	d9c00515 	stw	r7,20(sp)
 8004018:	003d6d06 	br	80035d0 <__alt_data_end+0xfc0035d0>
 800401c:	dd400a17 	ldw	r21,40(sp)
 8004020:	dd000817 	ldw	r20,32(sp)
 8004024:	0023883a 	mov	r17,zero
 8004028:	003f4806 	br	8003d4c <__alt_data_end+0xfc003d4c>
 800402c:	10e3c83a 	sub	r17,r2,r3
 8004030:	9448983a 	sll	r4,r18,r17
 8004034:	003d3206 	br	8003500 <__alt_data_end+0xfc003500>
 8004038:	d8000e15 	stw	zero,56(sp)
 800403c:	003d7506 	br	8003614 <__alt_data_end+0xfc003614>
 8004040:	b005883a 	mov	r2,r22
 8004044:	003f4506 	br	8003d5c <__alt_data_end+0xfc003d5c>
 8004048:	dc000915 	stw	r16,36(sp)
 800404c:	d9800a17 	ldw	r6,40(sp)
 8004050:	d9400917 	ldw	r5,36(sp)
 8004054:	e009883a 	mov	r4,fp
 8004058:	8005bfc0 	call	8005bfc <__pow5mult>
 800405c:	1021883a 	mov	r16,r2
 8004060:	003f5a06 	br	8003dcc <__alt_data_end+0xfc003dcc>
 8004064:	01c00044 	movi	r7,1
 8004068:	d9c00b15 	stw	r7,44(sp)
 800406c:	d8802217 	ldw	r2,136(sp)
 8004070:	0081280e 	bge	zero,r2,8004514 <_dtoa_r+0x11b0>
 8004074:	100d883a 	mov	r6,r2
 8004078:	1021883a 	mov	r16,r2
 800407c:	d8800c15 	stw	r2,48(sp)
 8004080:	d8800615 	stw	r2,24(sp)
 8004084:	003d8806 	br	80036a8 <__alt_data_end+0xfc0036a8>
 8004088:	d8800617 	ldw	r2,24(sp)
 800408c:	00be9b16 	blt	zero,r2,8003afc <__alt_data_end+0xfc003afc>
 8004090:	10010f1e 	bne	r2,zero,80044d0 <_dtoa_r+0x116c>
 8004094:	880b883a 	mov	r5,r17
 8004098:	000d883a 	mov	r6,zero
 800409c:	01d00534 	movhi	r7,16404
 80040a0:	8009883a 	mov	r4,r16
 80040a4:	800ab640 	call	800ab64 <__muldf3>
 80040a8:	900d883a 	mov	r6,r18
 80040ac:	980f883a 	mov	r7,r19
 80040b0:	1009883a 	mov	r4,r2
 80040b4:	180b883a 	mov	r5,r3
 80040b8:	800a9940 	call	800a994 <__gedf2>
 80040bc:	002b883a 	mov	r21,zero
 80040c0:	0023883a 	mov	r17,zero
 80040c4:	1000bf16 	blt	r2,zero,80043c4 <_dtoa_r+0x1060>
 80040c8:	d9802217 	ldw	r6,136(sp)
 80040cc:	ddc00717 	ldw	r23,28(sp)
 80040d0:	018c303a 	nor	r6,zero,r6
 80040d4:	d9800515 	stw	r6,20(sp)
 80040d8:	a80b883a 	mov	r5,r21
 80040dc:	e009883a 	mov	r4,fp
 80040e0:	80055a80 	call	80055a8 <_Bfree>
 80040e4:	883e4926 	beq	r17,zero,8003a0c <__alt_data_end+0xfc003a0c>
 80040e8:	003fad06 	br	8003fa0 <__alt_data_end+0xfc003fa0>
 80040ec:	d9c01117 	ldw	r7,68(sp)
 80040f0:	3801bc26 	beq	r7,zero,80047e4 <_dtoa_r+0x1480>
 80040f4:	10810cc4 	addi	r2,r2,1075
 80040f8:	dd400a17 	ldw	r21,40(sp)
 80040fc:	dd000817 	ldw	r20,32(sp)
 8004100:	003f0a06 	br	8003d2c <__alt_data_end+0xfc003d2c>
 8004104:	00800704 	movi	r2,28
 8004108:	d9000817 	ldw	r4,32(sp)
 800410c:	a0a9883a 	add	r20,r20,r2
 8004110:	b0ad883a 	add	r22,r22,r2
 8004114:	2089883a 	add	r4,r4,r2
 8004118:	d9000815 	stw	r4,32(sp)
 800411c:	003f5106 	br	8003e64 <__alt_data_end+0xfc003e64>
 8004120:	d8c00317 	ldw	r3,12(sp)
 8004124:	b8c1fc0e 	bge	r23,r3,8004918 <_dtoa_r+0x15b4>
 8004128:	0027883a 	mov	r19,zero
 800412c:	b805883a 	mov	r2,r23
 8004130:	003f3e06 	br	8003e2c <__alt_data_end+0xfc003e2c>
 8004134:	880b883a 	mov	r5,r17
 8004138:	e009883a 	mov	r4,fp
 800413c:	000f883a 	mov	r7,zero
 8004140:	01800284 	movi	r6,10
 8004144:	80055d00 	call	80055d0 <__multadd>
 8004148:	d9000c17 	ldw	r4,48(sp)
 800414c:	1023883a 	mov	r17,r2
 8004150:	0102040e 	bge	zero,r4,8004964 <_dtoa_r+0x1600>
 8004154:	d9000615 	stw	r4,24(sp)
 8004158:	0500050e 	bge	zero,r20,8004170 <_dtoa_r+0xe0c>
 800415c:	880b883a 	mov	r5,r17
 8004160:	a00d883a 	mov	r6,r20
 8004164:	e009883a 	mov	r4,fp
 8004168:	8005d3c0 	call	8005d3c <__lshift>
 800416c:	1023883a 	mov	r17,r2
 8004170:	9801241e 	bne	r19,zero,8004604 <_dtoa_r+0x12a0>
 8004174:	8829883a 	mov	r20,r17
 8004178:	d9000617 	ldw	r4,24(sp)
 800417c:	dcc00717 	ldw	r19,28(sp)
 8004180:	9480004c 	andi	r18,r18,1
 8004184:	20bfffc4 	addi	r2,r4,-1
 8004188:	9885883a 	add	r2,r19,r2
 800418c:	d8800415 	stw	r2,16(sp)
 8004190:	dc800615 	stw	r18,24(sp)
 8004194:	a80b883a 	mov	r5,r21
 8004198:	8009883a 	mov	r4,r16
 800419c:	800313c0 	call	800313c <quorem>
 80041a0:	880b883a 	mov	r5,r17
 80041a4:	8009883a 	mov	r4,r16
 80041a8:	102f883a 	mov	r23,r2
 80041ac:	8005e840 	call	8005e84 <__mcmp>
 80041b0:	a80b883a 	mov	r5,r21
 80041b4:	a00d883a 	mov	r6,r20
 80041b8:	e009883a 	mov	r4,fp
 80041bc:	102d883a 	mov	r22,r2
 80041c0:	8005ee40 	call	8005ee4 <__mdiff>
 80041c4:	1007883a 	mov	r3,r2
 80041c8:	10800317 	ldw	r2,12(r2)
 80041cc:	bc800c04 	addi	r18,r23,48
 80041d0:	180b883a 	mov	r5,r3
 80041d4:	10004e1e 	bne	r2,zero,8004310 <_dtoa_r+0xfac>
 80041d8:	8009883a 	mov	r4,r16
 80041dc:	d8c01615 	stw	r3,88(sp)
 80041e0:	8005e840 	call	8005e84 <__mcmp>
 80041e4:	d8c01617 	ldw	r3,88(sp)
 80041e8:	e009883a 	mov	r4,fp
 80041ec:	d8801615 	stw	r2,88(sp)
 80041f0:	180b883a 	mov	r5,r3
 80041f4:	80055a80 	call	80055a8 <_Bfree>
 80041f8:	d8801617 	ldw	r2,88(sp)
 80041fc:	1000041e 	bne	r2,zero,8004210 <_dtoa_r+0xeac>
 8004200:	d9800317 	ldw	r6,12(sp)
 8004204:	3000021e 	bne	r6,zero,8004210 <_dtoa_r+0xeac>
 8004208:	d8c00617 	ldw	r3,24(sp)
 800420c:	18003726 	beq	r3,zero,80042ec <_dtoa_r+0xf88>
 8004210:	b0002016 	blt	r22,zero,8004294 <_dtoa_r+0xf30>
 8004214:	b000041e 	bne	r22,zero,8004228 <_dtoa_r+0xec4>
 8004218:	d9000317 	ldw	r4,12(sp)
 800421c:	2000021e 	bne	r4,zero,8004228 <_dtoa_r+0xec4>
 8004220:	d8c00617 	ldw	r3,24(sp)
 8004224:	18001b26 	beq	r3,zero,8004294 <_dtoa_r+0xf30>
 8004228:	00810716 	blt	zero,r2,8004648 <_dtoa_r+0x12e4>
 800422c:	d8c00417 	ldw	r3,16(sp)
 8004230:	9d800044 	addi	r22,r19,1
 8004234:	9c800005 	stb	r18,0(r19)
 8004238:	b02f883a 	mov	r23,r22
 800423c:	98c10626 	beq	r19,r3,8004658 <_dtoa_r+0x12f4>
 8004240:	800b883a 	mov	r5,r16
 8004244:	000f883a 	mov	r7,zero
 8004248:	01800284 	movi	r6,10
 800424c:	e009883a 	mov	r4,fp
 8004250:	80055d00 	call	80055d0 <__multadd>
 8004254:	1021883a 	mov	r16,r2
 8004258:	000f883a 	mov	r7,zero
 800425c:	01800284 	movi	r6,10
 8004260:	880b883a 	mov	r5,r17
 8004264:	e009883a 	mov	r4,fp
 8004268:	8d002526 	beq	r17,r20,8004300 <_dtoa_r+0xf9c>
 800426c:	80055d00 	call	80055d0 <__multadd>
 8004270:	a00b883a 	mov	r5,r20
 8004274:	000f883a 	mov	r7,zero
 8004278:	01800284 	movi	r6,10
 800427c:	e009883a 	mov	r4,fp
 8004280:	1023883a 	mov	r17,r2
 8004284:	80055d00 	call	80055d0 <__multadd>
 8004288:	1029883a 	mov	r20,r2
 800428c:	b027883a 	mov	r19,r22
 8004290:	003fc006 	br	8004194 <__alt_data_end+0xfc004194>
 8004294:	9011883a 	mov	r8,r18
 8004298:	00800e0e 	bge	zero,r2,80042d4 <_dtoa_r+0xf70>
 800429c:	800b883a 	mov	r5,r16
 80042a0:	01800044 	movi	r6,1
 80042a4:	e009883a 	mov	r4,fp
 80042a8:	da001715 	stw	r8,92(sp)
 80042ac:	8005d3c0 	call	8005d3c <__lshift>
 80042b0:	a80b883a 	mov	r5,r21
 80042b4:	1009883a 	mov	r4,r2
 80042b8:	1021883a 	mov	r16,r2
 80042bc:	8005e840 	call	8005e84 <__mcmp>
 80042c0:	da001717 	ldw	r8,92(sp)
 80042c4:	0081960e 	bge	zero,r2,8004920 <_dtoa_r+0x15bc>
 80042c8:	00800e44 	movi	r2,57
 80042cc:	40817026 	beq	r8,r2,8004890 <_dtoa_r+0x152c>
 80042d0:	ba000c44 	addi	r8,r23,49
 80042d4:	8825883a 	mov	r18,r17
 80042d8:	9dc00044 	addi	r23,r19,1
 80042dc:	9a000005 	stb	r8,0(r19)
 80042e0:	a023883a 	mov	r17,r20
 80042e4:	dc000915 	stw	r16,36(sp)
 80042e8:	003f2406 	br	8003f7c <__alt_data_end+0xfc003f7c>
 80042ec:	00800e44 	movi	r2,57
 80042f0:	9011883a 	mov	r8,r18
 80042f4:	90816626 	beq	r18,r2,8004890 <_dtoa_r+0x152c>
 80042f8:	05bff516 	blt	zero,r22,80042d0 <__alt_data_end+0xfc0042d0>
 80042fc:	003ff506 	br	80042d4 <__alt_data_end+0xfc0042d4>
 8004300:	80055d00 	call	80055d0 <__multadd>
 8004304:	1023883a 	mov	r17,r2
 8004308:	1029883a 	mov	r20,r2
 800430c:	003fdf06 	br	800428c <__alt_data_end+0xfc00428c>
 8004310:	e009883a 	mov	r4,fp
 8004314:	80055a80 	call	80055a8 <_Bfree>
 8004318:	00800044 	movi	r2,1
 800431c:	003fbc06 	br	8004210 <__alt_data_end+0xfc004210>
 8004320:	a80b883a 	mov	r5,r21
 8004324:	8009883a 	mov	r4,r16
 8004328:	8005e840 	call	8005e84 <__mcmp>
 800432c:	103edb0e 	bge	r2,zero,8003e9c <__alt_data_end+0xfc003e9c>
 8004330:	800b883a 	mov	r5,r16
 8004334:	000f883a 	mov	r7,zero
 8004338:	01800284 	movi	r6,10
 800433c:	e009883a 	mov	r4,fp
 8004340:	80055d00 	call	80055d0 <__multadd>
 8004344:	1021883a 	mov	r16,r2
 8004348:	d8800517 	ldw	r2,20(sp)
 800434c:	d8c00b17 	ldw	r3,44(sp)
 8004350:	10bfffc4 	addi	r2,r2,-1
 8004354:	d8800515 	stw	r2,20(sp)
 8004358:	183f761e 	bne	r3,zero,8004134 <__alt_data_end+0xfc004134>
 800435c:	d9000c17 	ldw	r4,48(sp)
 8004360:	0101730e 	bge	zero,r4,8004930 <_dtoa_r+0x15cc>
 8004364:	d9000615 	stw	r4,24(sp)
 8004368:	003ed006 	br	8003eac <__alt_data_end+0xfc003eac>
 800436c:	00800084 	movi	r2,2
 8004370:	3081861e 	bne	r6,r2,800498c <_dtoa_r+0x1628>
 8004374:	d8000b15 	stw	zero,44(sp)
 8004378:	003f3c06 	br	800406c <__alt_data_end+0xfc00406c>
 800437c:	dc000917 	ldw	r16,36(sp)
 8004380:	003e9206 	br	8003dcc <__alt_data_end+0xfc003dcc>
 8004384:	d9c00317 	ldw	r7,12(sp)
 8004388:	00800084 	movi	r2,2
 800438c:	11fec50e 	bge	r2,r7,8003ea4 <__alt_data_end+0xfc003ea4>
 8004390:	d9000617 	ldw	r4,24(sp)
 8004394:	20013c1e 	bne	r4,zero,8004888 <_dtoa_r+0x1524>
 8004398:	a80b883a 	mov	r5,r21
 800439c:	000f883a 	mov	r7,zero
 80043a0:	01800144 	movi	r6,5
 80043a4:	e009883a 	mov	r4,fp
 80043a8:	80055d00 	call	80055d0 <__multadd>
 80043ac:	100b883a 	mov	r5,r2
 80043b0:	8009883a 	mov	r4,r16
 80043b4:	102b883a 	mov	r21,r2
 80043b8:	8005e840 	call	8005e84 <__mcmp>
 80043bc:	dc000915 	stw	r16,36(sp)
 80043c0:	00bf410e 	bge	zero,r2,80040c8 <__alt_data_end+0xfc0040c8>
 80043c4:	d9c00717 	ldw	r7,28(sp)
 80043c8:	00800c44 	movi	r2,49
 80043cc:	38800005 	stb	r2,0(r7)
 80043d0:	d8800517 	ldw	r2,20(sp)
 80043d4:	3dc00044 	addi	r23,r7,1
 80043d8:	10800044 	addi	r2,r2,1
 80043dc:	d8800515 	stw	r2,20(sp)
 80043e0:	003f3d06 	br	80040d8 <__alt_data_end+0xfc0040d8>
 80043e4:	d9800517 	ldw	r6,20(sp)
 80043e8:	d9c00717 	ldw	r7,28(sp)
 80043ec:	00800c44 	movi	r2,49
 80043f0:	31800044 	addi	r6,r6,1
 80043f4:	d9800515 	stw	r6,20(sp)
 80043f8:	38800005 	stb	r2,0(r7)
 80043fc:	003edf06 	br	8003f7c <__alt_data_end+0xfc003f7c>
 8004400:	d8000b15 	stw	zero,44(sp)
 8004404:	003c9f06 	br	8003684 <__alt_data_end+0xfc003684>
 8004408:	903e7e1e 	bne	r18,zero,8003e04 <__alt_data_end+0xfc003e04>
 800440c:	00800434 	movhi	r2,16
 8004410:	10bfffc4 	addi	r2,r2,-1
 8004414:	9884703a 	and	r2,r19,r2
 8004418:	1000ea1e 	bne	r2,zero,80047c4 <_dtoa_r+0x1460>
 800441c:	9cdffc2c 	andhi	r19,r19,32752
 8004420:	9800e826 	beq	r19,zero,80047c4 <_dtoa_r+0x1460>
 8004424:	d9c00817 	ldw	r7,32(sp)
 8004428:	b5800044 	addi	r22,r22,1
 800442c:	04c00044 	movi	r19,1
 8004430:	39c00044 	addi	r7,r7,1
 8004434:	d9c00815 	stw	r7,32(sp)
 8004438:	d8800d17 	ldw	r2,52(sp)
 800443c:	103e721e 	bne	r2,zero,8003e08 <__alt_data_end+0xfc003e08>
 8004440:	00800044 	movi	r2,1
 8004444:	003e7906 	br	8003e2c <__alt_data_end+0xfc003e2c>
 8004448:	8009883a 	mov	r4,r16
 800444c:	800bd4c0 	call	800bd4c <__floatsidf>
 8004450:	d9800f17 	ldw	r6,60(sp)
 8004454:	d9c01017 	ldw	r7,64(sp)
 8004458:	1009883a 	mov	r4,r2
 800445c:	180b883a 	mov	r5,r3
 8004460:	800ab640 	call	800ab64 <__muldf3>
 8004464:	000d883a 	mov	r6,zero
 8004468:	01d00734 	movhi	r7,16412
 800446c:	1009883a 	mov	r4,r2
 8004470:	180b883a 	mov	r5,r3
 8004474:	80096900 	call	8009690 <__adddf3>
 8004478:	047f3034 	movhi	r17,64704
 800447c:	1021883a 	mov	r16,r2
 8004480:	1c63883a 	add	r17,r3,r17
 8004484:	d9000f17 	ldw	r4,60(sp)
 8004488:	d9401017 	ldw	r5,64(sp)
 800448c:	000d883a 	mov	r6,zero
 8004490:	01d00534 	movhi	r7,16404
 8004494:	800b3d00 	call	800b3d0 <__subdf3>
 8004498:	800d883a 	mov	r6,r16
 800449c:	880f883a 	mov	r7,r17
 80044a0:	1009883a 	mov	r4,r2
 80044a4:	180b883a 	mov	r5,r3
 80044a8:	102b883a 	mov	r21,r2
 80044ac:	1829883a 	mov	r20,r3
 80044b0:	800a9940 	call	800a994 <__gedf2>
 80044b4:	00806c16 	blt	zero,r2,8004668 <_dtoa_r+0x1304>
 80044b8:	89e0003c 	xorhi	r7,r17,32768
 80044bc:	800d883a 	mov	r6,r16
 80044c0:	a809883a 	mov	r4,r21
 80044c4:	a00b883a 	mov	r5,r20
 80044c8:	800aa700 	call	800aa70 <__ledf2>
 80044cc:	103d7e0e 	bge	r2,zero,8003ac8 <__alt_data_end+0xfc003ac8>
 80044d0:	002b883a 	mov	r21,zero
 80044d4:	0023883a 	mov	r17,zero
 80044d8:	003efb06 	br	80040c8 <__alt_data_end+0xfc0040c8>
 80044dc:	d8800717 	ldw	r2,28(sp)
 80044e0:	003bd006 	br	8003424 <__alt_data_end+0xfc003424>
 80044e4:	d9000a17 	ldw	r4,40(sp)
 80044e8:	d9800d17 	ldw	r6,52(sp)
 80044ec:	dd400a15 	stw	r21,40(sp)
 80044f0:	a905c83a 	sub	r2,r21,r4
 80044f4:	308d883a 	add	r6,r6,r2
 80044f8:	d9800d15 	stw	r6,52(sp)
 80044fc:	002b883a 	mov	r21,zero
 8004500:	003e0606 	br	8003d1c <__alt_data_end+0xfc003d1c>
 8004504:	9023883a 	mov	r17,r18
 8004508:	9829883a 	mov	r20,r19
 800450c:	04000084 	movi	r16,2
 8004510:	003c9206 	br	800375c <__alt_data_end+0xfc00375c>
 8004514:	04000044 	movi	r16,1
 8004518:	dc000c15 	stw	r16,48(sp)
 800451c:	dc000615 	stw	r16,24(sp)
 8004520:	dc002215 	stw	r16,136(sp)
 8004524:	e0001115 	stw	zero,68(fp)
 8004528:	000b883a 	mov	r5,zero
 800452c:	003c6906 	br	80036d4 <__alt_data_end+0xfc0036d4>
 8004530:	3021883a 	mov	r16,r6
 8004534:	003ffb06 	br	8004524 <__alt_data_end+0xfc004524>
 8004538:	1000021e 	bne	r2,zero,8004544 <_dtoa_r+0x11e0>
 800453c:	4200004c 	andi	r8,r8,1
 8004540:	403e7d1e 	bne	r8,zero,8003f38 <__alt_data_end+0xfc003f38>
 8004544:	01000c04 	movi	r4,48
 8004548:	00000106 	br	8004550 <_dtoa_r+0x11ec>
 800454c:	102f883a 	mov	r23,r2
 8004550:	b8bfffc4 	addi	r2,r23,-1
 8004554:	10c00007 	ldb	r3,0(r2)
 8004558:	193ffc26 	beq	r3,r4,800454c <__alt_data_end+0xfc00454c>
 800455c:	003e8706 	br	8003f7c <__alt_data_end+0xfc003f7c>
 8004560:	d8800517 	ldw	r2,20(sp)
 8004564:	00a3c83a 	sub	r17,zero,r2
 8004568:	8800a426 	beq	r17,zero,80047fc <_dtoa_r+0x1498>
 800456c:	888003cc 	andi	r2,r17,15
 8004570:	100490fa 	slli	r2,r2,3
 8004574:	00c20074 	movhi	r3,2049
 8004578:	18f90904 	addi	r3,r3,-7132
 800457c:	1885883a 	add	r2,r3,r2
 8004580:	11800017 	ldw	r6,0(r2)
 8004584:	11c00117 	ldw	r7,4(r2)
 8004588:	9009883a 	mov	r4,r18
 800458c:	980b883a 	mov	r5,r19
 8004590:	8823d13a 	srai	r17,r17,4
 8004594:	800ab640 	call	800ab64 <__muldf3>
 8004598:	d8800f15 	stw	r2,60(sp)
 800459c:	d8c01015 	stw	r3,64(sp)
 80045a0:	8800e826 	beq	r17,zero,8004944 <_dtoa_r+0x15e0>
 80045a4:	05020074 	movhi	r20,2049
 80045a8:	a538ff04 	addi	r20,r20,-7172
 80045ac:	04000084 	movi	r16,2
 80045b0:	8980004c 	andi	r6,r17,1
 80045b4:	1009883a 	mov	r4,r2
 80045b8:	8823d07a 	srai	r17,r17,1
 80045bc:	180b883a 	mov	r5,r3
 80045c0:	30000426 	beq	r6,zero,80045d4 <_dtoa_r+0x1270>
 80045c4:	a1800017 	ldw	r6,0(r20)
 80045c8:	a1c00117 	ldw	r7,4(r20)
 80045cc:	84000044 	addi	r16,r16,1
 80045d0:	800ab640 	call	800ab64 <__muldf3>
 80045d4:	a5000204 	addi	r20,r20,8
 80045d8:	883ff51e 	bne	r17,zero,80045b0 <__alt_data_end+0xfc0045b0>
 80045dc:	d8800f15 	stw	r2,60(sp)
 80045e0:	d8c01015 	stw	r3,64(sp)
 80045e4:	003c7606 	br	80037c0 <__alt_data_end+0xfc0037c0>
 80045e8:	00c00c04 	movi	r3,48
 80045ec:	10c00005 	stb	r3,0(r2)
 80045f0:	d8c00517 	ldw	r3,20(sp)
 80045f4:	bd3fffc3 	ldbu	r20,-1(r23)
 80045f8:	18c00044 	addi	r3,r3,1
 80045fc:	d8c00515 	stw	r3,20(sp)
 8004600:	003db906 	br	8003ce8 <__alt_data_end+0xfc003ce8>
 8004604:	89400117 	ldw	r5,4(r17)
 8004608:	e009883a 	mov	r4,fp
 800460c:	80055000 	call	8005500 <_Balloc>
 8004610:	89800417 	ldw	r6,16(r17)
 8004614:	89400304 	addi	r5,r17,12
 8004618:	11000304 	addi	r4,r2,12
 800461c:	31800084 	addi	r6,r6,2
 8004620:	318d883a 	add	r6,r6,r6
 8004624:	318d883a 	add	r6,r6,r6
 8004628:	1027883a 	mov	r19,r2
 800462c:	80053b80 	call	80053b8 <memcpy>
 8004630:	01800044 	movi	r6,1
 8004634:	980b883a 	mov	r5,r19
 8004638:	e009883a 	mov	r4,fp
 800463c:	8005d3c0 	call	8005d3c <__lshift>
 8004640:	1029883a 	mov	r20,r2
 8004644:	003ecc06 	br	8004178 <__alt_data_end+0xfc004178>
 8004648:	00800e44 	movi	r2,57
 800464c:	90809026 	beq	r18,r2,8004890 <_dtoa_r+0x152c>
 8004650:	92000044 	addi	r8,r18,1
 8004654:	003f1f06 	br	80042d4 <__alt_data_end+0xfc0042d4>
 8004658:	9011883a 	mov	r8,r18
 800465c:	8825883a 	mov	r18,r17
 8004660:	a023883a 	mov	r17,r20
 8004664:	003e2906 	br	8003f0c <__alt_data_end+0xfc003f0c>
 8004668:	002b883a 	mov	r21,zero
 800466c:	0023883a 	mov	r17,zero
 8004670:	003f5406 	br	80043c4 <__alt_data_end+0xfc0043c4>
 8004674:	61bfffc4 	addi	r6,r12,-1
 8004678:	300490fa 	slli	r2,r6,3
 800467c:	00c20074 	movhi	r3,2049
 8004680:	18f90904 	addi	r3,r3,-7132
 8004684:	1885883a 	add	r2,r3,r2
 8004688:	11000017 	ldw	r4,0(r2)
 800468c:	11400117 	ldw	r5,4(r2)
 8004690:	d8800717 	ldw	r2,28(sp)
 8004694:	880f883a 	mov	r7,r17
 8004698:	d9801215 	stw	r6,72(sp)
 800469c:	800d883a 	mov	r6,r16
 80046a0:	db001615 	stw	r12,88(sp)
 80046a4:	15c00044 	addi	r23,r2,1
 80046a8:	800ab640 	call	800ab64 <__muldf3>
 80046ac:	d9401017 	ldw	r5,64(sp)
 80046b0:	d9000f17 	ldw	r4,60(sp)
 80046b4:	d8c01515 	stw	r3,84(sp)
 80046b8:	d8801415 	stw	r2,80(sp)
 80046bc:	800bccc0 	call	800bccc <__fixdfsi>
 80046c0:	1009883a 	mov	r4,r2
 80046c4:	1021883a 	mov	r16,r2
 80046c8:	800bd4c0 	call	800bd4c <__floatsidf>
 80046cc:	d9000f17 	ldw	r4,60(sp)
 80046d0:	d9401017 	ldw	r5,64(sp)
 80046d4:	100d883a 	mov	r6,r2
 80046d8:	180f883a 	mov	r7,r3
 80046dc:	800b3d00 	call	800b3d0 <__subdf3>
 80046e0:	1829883a 	mov	r20,r3
 80046e4:	d8c00717 	ldw	r3,28(sp)
 80046e8:	84000c04 	addi	r16,r16,48
 80046ec:	1023883a 	mov	r17,r2
 80046f0:	1c000005 	stb	r16,0(r3)
 80046f4:	db001617 	ldw	r12,88(sp)
 80046f8:	00800044 	movi	r2,1
 80046fc:	60802226 	beq	r12,r2,8004788 <_dtoa_r+0x1424>
 8004700:	d9c00717 	ldw	r7,28(sp)
 8004704:	8805883a 	mov	r2,r17
 8004708:	b82b883a 	mov	r21,r23
 800470c:	3b19883a 	add	r12,r7,r12
 8004710:	6023883a 	mov	r17,r12
 8004714:	a007883a 	mov	r3,r20
 8004718:	dc800f15 	stw	r18,60(sp)
 800471c:	000d883a 	mov	r6,zero
 8004720:	01d00934 	movhi	r7,16420
 8004724:	1009883a 	mov	r4,r2
 8004728:	180b883a 	mov	r5,r3
 800472c:	800ab640 	call	800ab64 <__muldf3>
 8004730:	180b883a 	mov	r5,r3
 8004734:	1009883a 	mov	r4,r2
 8004738:	1829883a 	mov	r20,r3
 800473c:	1025883a 	mov	r18,r2
 8004740:	800bccc0 	call	800bccc <__fixdfsi>
 8004744:	1009883a 	mov	r4,r2
 8004748:	1021883a 	mov	r16,r2
 800474c:	800bd4c0 	call	800bd4c <__floatsidf>
 8004750:	100d883a 	mov	r6,r2
 8004754:	180f883a 	mov	r7,r3
 8004758:	9009883a 	mov	r4,r18
 800475c:	a00b883a 	mov	r5,r20
 8004760:	84000c04 	addi	r16,r16,48
 8004764:	800b3d00 	call	800b3d0 <__subdf3>
 8004768:	ad400044 	addi	r21,r21,1
 800476c:	ac3fffc5 	stb	r16,-1(r21)
 8004770:	ac7fea1e 	bne	r21,r17,800471c <__alt_data_end+0xfc00471c>
 8004774:	1023883a 	mov	r17,r2
 8004778:	d8801217 	ldw	r2,72(sp)
 800477c:	dc800f17 	ldw	r18,60(sp)
 8004780:	1829883a 	mov	r20,r3
 8004784:	b8af883a 	add	r23,r23,r2
 8004788:	d9001417 	ldw	r4,80(sp)
 800478c:	d9401517 	ldw	r5,84(sp)
 8004790:	000d883a 	mov	r6,zero
 8004794:	01cff834 	movhi	r7,16352
 8004798:	80096900 	call	8009690 <__adddf3>
 800479c:	880d883a 	mov	r6,r17
 80047a0:	a00f883a 	mov	r7,r20
 80047a4:	1009883a 	mov	r4,r2
 80047a8:	180b883a 	mov	r5,r3
 80047ac:	800aa700 	call	800aa70 <__ledf2>
 80047b0:	10003e0e 	bge	r2,zero,80048ac <_dtoa_r+0x1548>
 80047b4:	d9001317 	ldw	r4,76(sp)
 80047b8:	bd3fffc3 	ldbu	r20,-1(r23)
 80047bc:	d9000515 	stw	r4,20(sp)
 80047c0:	003d3b06 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 80047c4:	0027883a 	mov	r19,zero
 80047c8:	003f1b06 	br	8004438 <__alt_data_end+0xfc004438>
 80047cc:	d8800817 	ldw	r2,32(sp)
 80047d0:	11e9c83a 	sub	r20,r2,r7
 80047d4:	0005883a 	mov	r2,zero
 80047d8:	003d5406 	br	8003d2c <__alt_data_end+0xfc003d2c>
 80047dc:	00800044 	movi	r2,1
 80047e0:	003dc706 	br	8003f00 <__alt_data_end+0xfc003f00>
 80047e4:	d8c00217 	ldw	r3,8(sp)
 80047e8:	00800d84 	movi	r2,54
 80047ec:	dd400a17 	ldw	r21,40(sp)
 80047f0:	10c5c83a 	sub	r2,r2,r3
 80047f4:	dd000817 	ldw	r20,32(sp)
 80047f8:	003d4c06 	br	8003d2c <__alt_data_end+0xfc003d2c>
 80047fc:	dc800f15 	stw	r18,60(sp)
 8004800:	dcc01015 	stw	r19,64(sp)
 8004804:	04000084 	movi	r16,2
 8004808:	003bed06 	br	80037c0 <__alt_data_end+0xfc0037c0>
 800480c:	d9000617 	ldw	r4,24(sp)
 8004810:	203f0d26 	beq	r4,zero,8004448 <__alt_data_end+0xfc004448>
 8004814:	d9800c17 	ldw	r6,48(sp)
 8004818:	01bcab0e 	bge	zero,r6,8003ac8 <__alt_data_end+0xfc003ac8>
 800481c:	d9401017 	ldw	r5,64(sp)
 8004820:	d9000f17 	ldw	r4,60(sp)
 8004824:	000d883a 	mov	r6,zero
 8004828:	01d00934 	movhi	r7,16420
 800482c:	800ab640 	call	800ab64 <__muldf3>
 8004830:	81000044 	addi	r4,r16,1
 8004834:	d8800f15 	stw	r2,60(sp)
 8004838:	d8c01015 	stw	r3,64(sp)
 800483c:	800bd4c0 	call	800bd4c <__floatsidf>
 8004840:	d9800f17 	ldw	r6,60(sp)
 8004844:	d9c01017 	ldw	r7,64(sp)
 8004848:	1009883a 	mov	r4,r2
 800484c:	180b883a 	mov	r5,r3
 8004850:	800ab640 	call	800ab64 <__muldf3>
 8004854:	01d00734 	movhi	r7,16412
 8004858:	000d883a 	mov	r6,zero
 800485c:	1009883a 	mov	r4,r2
 8004860:	180b883a 	mov	r5,r3
 8004864:	80096900 	call	8009690 <__adddf3>
 8004868:	d9c00517 	ldw	r7,20(sp)
 800486c:	047f3034 	movhi	r17,64704
 8004870:	1021883a 	mov	r16,r2
 8004874:	39ffffc4 	addi	r7,r7,-1
 8004878:	d9c01315 	stw	r7,76(sp)
 800487c:	1c63883a 	add	r17,r3,r17
 8004880:	db000c17 	ldw	r12,48(sp)
 8004884:	003bea06 	br	8003830 <__alt_data_end+0xfc003830>
 8004888:	dc000915 	stw	r16,36(sp)
 800488c:	003e0e06 	br	80040c8 <__alt_data_end+0xfc0040c8>
 8004890:	01000e44 	movi	r4,57
 8004894:	8825883a 	mov	r18,r17
 8004898:	9dc00044 	addi	r23,r19,1
 800489c:	99000005 	stb	r4,0(r19)
 80048a0:	a023883a 	mov	r17,r20
 80048a4:	dc000915 	stw	r16,36(sp)
 80048a8:	003da406 	br	8003f3c <__alt_data_end+0xfc003f3c>
 80048ac:	d9801417 	ldw	r6,80(sp)
 80048b0:	d9c01517 	ldw	r7,84(sp)
 80048b4:	0009883a 	mov	r4,zero
 80048b8:	014ff834 	movhi	r5,16352
 80048bc:	800b3d00 	call	800b3d0 <__subdf3>
 80048c0:	880d883a 	mov	r6,r17
 80048c4:	a00f883a 	mov	r7,r20
 80048c8:	1009883a 	mov	r4,r2
 80048cc:	180b883a 	mov	r5,r3
 80048d0:	800a9940 	call	800a994 <__gedf2>
 80048d4:	00bc7c0e 	bge	zero,r2,8003ac8 <__alt_data_end+0xfc003ac8>
 80048d8:	01000c04 	movi	r4,48
 80048dc:	00000106 	br	80048e4 <_dtoa_r+0x1580>
 80048e0:	102f883a 	mov	r23,r2
 80048e4:	b8bfffc4 	addi	r2,r23,-1
 80048e8:	10c00007 	ldb	r3,0(r2)
 80048ec:	193ffc26 	beq	r3,r4,80048e0 <__alt_data_end+0xfc0048e0>
 80048f0:	d9801317 	ldw	r6,76(sp)
 80048f4:	d9800515 	stw	r6,20(sp)
 80048f8:	003c4406 	br	8003a0c <__alt_data_end+0xfc003a0c>
 80048fc:	d9801317 	ldw	r6,76(sp)
 8004900:	d9800515 	stw	r6,20(sp)
 8004904:	003cea06 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 8004908:	dd800f17 	ldw	r22,60(sp)
 800490c:	dcc01017 	ldw	r19,64(sp)
 8004910:	dc801217 	ldw	r18,72(sp)
 8004914:	003c6c06 	br	8003ac8 <__alt_data_end+0xfc003ac8>
 8004918:	903e031e 	bne	r18,zero,8004128 <__alt_data_end+0xfc004128>
 800491c:	003ebb06 	br	800440c <__alt_data_end+0xfc00440c>
 8004920:	103e6c1e 	bne	r2,zero,80042d4 <__alt_data_end+0xfc0042d4>
 8004924:	4080004c 	andi	r2,r8,1
 8004928:	103e6a26 	beq	r2,zero,80042d4 <__alt_data_end+0xfc0042d4>
 800492c:	003e6606 	br	80042c8 <__alt_data_end+0xfc0042c8>
 8004930:	d8c00317 	ldw	r3,12(sp)
 8004934:	00800084 	movi	r2,2
 8004938:	10c02916 	blt	r2,r3,80049e0 <_dtoa_r+0x167c>
 800493c:	d9000c17 	ldw	r4,48(sp)
 8004940:	003e8806 	br	8004364 <__alt_data_end+0xfc004364>
 8004944:	04000084 	movi	r16,2
 8004948:	003b9d06 	br	80037c0 <__alt_data_end+0xfc0037c0>
 800494c:	d9001317 	ldw	r4,76(sp)
 8004950:	d9000515 	stw	r4,20(sp)
 8004954:	003cd606 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 8004958:	d8801317 	ldw	r2,76(sp)
 800495c:	d8800515 	stw	r2,20(sp)
 8004960:	003c2a06 	br	8003a0c <__alt_data_end+0xfc003a0c>
 8004964:	d9800317 	ldw	r6,12(sp)
 8004968:	00800084 	movi	r2,2
 800496c:	11801516 	blt	r2,r6,80049c4 <_dtoa_r+0x1660>
 8004970:	d9c00c17 	ldw	r7,48(sp)
 8004974:	d9c00615 	stw	r7,24(sp)
 8004978:	003df706 	br	8004158 <__alt_data_end+0xfc004158>
 800497c:	193d3926 	beq	r3,r4,8003e64 <__alt_data_end+0xfc003e64>
 8004980:	00c00f04 	movi	r3,60
 8004984:	1885c83a 	sub	r2,r3,r2
 8004988:	003ddf06 	br	8004108 <__alt_data_end+0xfc004108>
 800498c:	e009883a 	mov	r4,fp
 8004990:	e0001115 	stw	zero,68(fp)
 8004994:	000b883a 	mov	r5,zero
 8004998:	80055000 	call	8005500 <_Balloc>
 800499c:	d8800715 	stw	r2,28(sp)
 80049a0:	d8c00717 	ldw	r3,28(sp)
 80049a4:	00bfffc4 	movi	r2,-1
 80049a8:	01000044 	movi	r4,1
 80049ac:	d8800c15 	stw	r2,48(sp)
 80049b0:	e0c01015 	stw	r3,64(fp)
 80049b4:	d9000b15 	stw	r4,44(sp)
 80049b8:	d8800615 	stw	r2,24(sp)
 80049bc:	d8002215 	stw	zero,136(sp)
 80049c0:	003c4106 	br	8003ac8 <__alt_data_end+0xfc003ac8>
 80049c4:	d8c00c17 	ldw	r3,48(sp)
 80049c8:	d8c00615 	stw	r3,24(sp)
 80049cc:	003e7006 	br	8004390 <__alt_data_end+0xfc004390>
 80049d0:	04400044 	movi	r17,1
 80049d4:	003b2006 	br	8003658 <__alt_data_end+0xfc003658>
 80049d8:	000b883a 	mov	r5,zero
 80049dc:	003b3d06 	br	80036d4 <__alt_data_end+0xfc0036d4>
 80049e0:	d8800c17 	ldw	r2,48(sp)
 80049e4:	d8800615 	stw	r2,24(sp)
 80049e8:	003e6906 	br	8004390 <__alt_data_end+0xfc004390>

080049ec <_setlocale_r>:
 80049ec:	30001b26 	beq	r6,zero,8004a5c <_setlocale_r+0x70>
 80049f0:	01420074 	movhi	r5,2049
 80049f4:	defffe04 	addi	sp,sp,-8
 80049f8:	2978ef04 	addi	r5,r5,-7236
 80049fc:	3009883a 	mov	r4,r6
 8004a00:	dc000015 	stw	r16,0(sp)
 8004a04:	dfc00115 	stw	ra,4(sp)
 8004a08:	3021883a 	mov	r16,r6
 8004a0c:	80066800 	call	8006680 <strcmp>
 8004a10:	1000061e 	bne	r2,zero,8004a2c <_setlocale_r+0x40>
 8004a14:	00820074 	movhi	r2,2049
 8004a18:	10b8ee04 	addi	r2,r2,-7240
 8004a1c:	dfc00117 	ldw	ra,4(sp)
 8004a20:	dc000017 	ldw	r16,0(sp)
 8004a24:	dec00204 	addi	sp,sp,8
 8004a28:	f800283a 	ret
 8004a2c:	01420074 	movhi	r5,2049
 8004a30:	2978ee04 	addi	r5,r5,-7240
 8004a34:	8009883a 	mov	r4,r16
 8004a38:	80066800 	call	8006680 <strcmp>
 8004a3c:	103ff526 	beq	r2,zero,8004a14 <__alt_data_end+0xfc004a14>
 8004a40:	01420074 	movhi	r5,2049
 8004a44:	2978d904 	addi	r5,r5,-7324
 8004a48:	8009883a 	mov	r4,r16
 8004a4c:	80066800 	call	8006680 <strcmp>
 8004a50:	103ff026 	beq	r2,zero,8004a14 <__alt_data_end+0xfc004a14>
 8004a54:	0005883a 	mov	r2,zero
 8004a58:	003ff006 	br	8004a1c <__alt_data_end+0xfc004a1c>
 8004a5c:	00820074 	movhi	r2,2049
 8004a60:	10b8ee04 	addi	r2,r2,-7240
 8004a64:	f800283a 	ret

08004a68 <__locale_charset>:
 8004a68:	00820074 	movhi	r2,2049
 8004a6c:	10bb5904 	addi	r2,r2,-4764
 8004a70:	f800283a 	ret

08004a74 <__locale_mb_cur_max>:
 8004a74:	00820074 	movhi	r2,2049
 8004a78:	1080f704 	addi	r2,r2,988
 8004a7c:	10800017 	ldw	r2,0(r2)
 8004a80:	f800283a 	ret

08004a84 <__locale_msgcharset>:
 8004a84:	00820074 	movhi	r2,2049
 8004a88:	10bb5104 	addi	r2,r2,-4796
 8004a8c:	f800283a 	ret

08004a90 <__locale_cjk_lang>:
 8004a90:	0005883a 	mov	r2,zero
 8004a94:	f800283a 	ret

08004a98 <_localeconv_r>:
 8004a98:	00820074 	movhi	r2,2049
 8004a9c:	10bb6104 	addi	r2,r2,-4732
 8004aa0:	f800283a 	ret

08004aa4 <setlocale>:
 8004aa4:	00820074 	movhi	r2,2049
 8004aa8:	1080f604 	addi	r2,r2,984
 8004aac:	280d883a 	mov	r6,r5
 8004ab0:	200b883a 	mov	r5,r4
 8004ab4:	11000017 	ldw	r4,0(r2)
 8004ab8:	80049ec1 	jmpi	80049ec <_setlocale_r>

08004abc <localeconv>:
 8004abc:	00820074 	movhi	r2,2049
 8004ac0:	10bb6104 	addi	r2,r2,-4732
 8004ac4:	f800283a 	ret

08004ac8 <_malloc_r>:
 8004ac8:	defff504 	addi	sp,sp,-44
 8004acc:	dc800315 	stw	r18,12(sp)
 8004ad0:	dfc00a15 	stw	ra,40(sp)
 8004ad4:	df000915 	stw	fp,36(sp)
 8004ad8:	ddc00815 	stw	r23,32(sp)
 8004adc:	dd800715 	stw	r22,28(sp)
 8004ae0:	dd400615 	stw	r21,24(sp)
 8004ae4:	dd000515 	stw	r20,20(sp)
 8004ae8:	dcc00415 	stw	r19,16(sp)
 8004aec:	dc400215 	stw	r17,8(sp)
 8004af0:	dc000115 	stw	r16,4(sp)
 8004af4:	288002c4 	addi	r2,r5,11
 8004af8:	00c00584 	movi	r3,22
 8004afc:	2025883a 	mov	r18,r4
 8004b00:	18807f2e 	bgeu	r3,r2,8004d00 <_malloc_r+0x238>
 8004b04:	047ffe04 	movi	r17,-8
 8004b08:	1462703a 	and	r17,r2,r17
 8004b0c:	8800a316 	blt	r17,zero,8004d9c <_malloc_r+0x2d4>
 8004b10:	8940a236 	bltu	r17,r5,8004d9c <_malloc_r+0x2d4>
 8004b14:	800c09c0 	call	800c09c <__malloc_lock>
 8004b18:	00807dc4 	movi	r2,503
 8004b1c:	1441e92e 	bgeu	r2,r17,80052c4 <_malloc_r+0x7fc>
 8004b20:	8804d27a 	srli	r2,r17,9
 8004b24:	1000a126 	beq	r2,zero,8004dac <_malloc_r+0x2e4>
 8004b28:	00c00104 	movi	r3,4
 8004b2c:	18811e36 	bltu	r3,r2,8004fa8 <_malloc_r+0x4e0>
 8004b30:	8804d1ba 	srli	r2,r17,6
 8004b34:	12000e44 	addi	r8,r2,57
 8004b38:	11c00e04 	addi	r7,r2,56
 8004b3c:	4209883a 	add	r4,r8,r8
 8004b40:	04c20074 	movhi	r19,2049
 8004b44:	2109883a 	add	r4,r4,r4
 8004b48:	9cfb6f04 	addi	r19,r19,-4676
 8004b4c:	2109883a 	add	r4,r4,r4
 8004b50:	9909883a 	add	r4,r19,r4
 8004b54:	24000117 	ldw	r16,4(r4)
 8004b58:	213ffe04 	addi	r4,r4,-8
 8004b5c:	24009726 	beq	r4,r16,8004dbc <_malloc_r+0x2f4>
 8004b60:	80800117 	ldw	r2,4(r16)
 8004b64:	01bfff04 	movi	r6,-4
 8004b68:	014003c4 	movi	r5,15
 8004b6c:	1184703a 	and	r2,r2,r6
 8004b70:	1447c83a 	sub	r3,r2,r17
 8004b74:	28c00716 	blt	r5,r3,8004b94 <_malloc_r+0xcc>
 8004b78:	1800920e 	bge	r3,zero,8004dc4 <_malloc_r+0x2fc>
 8004b7c:	84000317 	ldw	r16,12(r16)
 8004b80:	24008e26 	beq	r4,r16,8004dbc <_malloc_r+0x2f4>
 8004b84:	80800117 	ldw	r2,4(r16)
 8004b88:	1184703a 	and	r2,r2,r6
 8004b8c:	1447c83a 	sub	r3,r2,r17
 8004b90:	28fff90e 	bge	r5,r3,8004b78 <__alt_data_end+0xfc004b78>
 8004b94:	3809883a 	mov	r4,r7
 8004b98:	01820074 	movhi	r6,2049
 8004b9c:	9c000417 	ldw	r16,16(r19)
 8004ba0:	31bb6f04 	addi	r6,r6,-4676
 8004ba4:	32000204 	addi	r8,r6,8
 8004ba8:	82013426 	beq	r16,r8,800507c <_malloc_r+0x5b4>
 8004bac:	80c00117 	ldw	r3,4(r16)
 8004bb0:	00bfff04 	movi	r2,-4
 8004bb4:	188e703a 	and	r7,r3,r2
 8004bb8:	3c45c83a 	sub	r2,r7,r17
 8004bbc:	00c003c4 	movi	r3,15
 8004bc0:	18811f16 	blt	r3,r2,8005040 <_malloc_r+0x578>
 8004bc4:	32000515 	stw	r8,20(r6)
 8004bc8:	32000415 	stw	r8,16(r6)
 8004bcc:	10007f0e 	bge	r2,zero,8004dcc <_malloc_r+0x304>
 8004bd0:	00807fc4 	movi	r2,511
 8004bd4:	11c0fd36 	bltu	r2,r7,8004fcc <_malloc_r+0x504>
 8004bd8:	3806d0fa 	srli	r3,r7,3
 8004bdc:	01c00044 	movi	r7,1
 8004be0:	30800117 	ldw	r2,4(r6)
 8004be4:	19400044 	addi	r5,r3,1
 8004be8:	294b883a 	add	r5,r5,r5
 8004bec:	1807d0ba 	srai	r3,r3,2
 8004bf0:	294b883a 	add	r5,r5,r5
 8004bf4:	294b883a 	add	r5,r5,r5
 8004bf8:	298b883a 	add	r5,r5,r6
 8004bfc:	38c6983a 	sll	r3,r7,r3
 8004c00:	29c00017 	ldw	r7,0(r5)
 8004c04:	2a7ffe04 	addi	r9,r5,-8
 8004c08:	1886b03a 	or	r3,r3,r2
 8004c0c:	82400315 	stw	r9,12(r16)
 8004c10:	81c00215 	stw	r7,8(r16)
 8004c14:	30c00115 	stw	r3,4(r6)
 8004c18:	2c000015 	stw	r16,0(r5)
 8004c1c:	3c000315 	stw	r16,12(r7)
 8004c20:	2005d0ba 	srai	r2,r4,2
 8004c24:	01400044 	movi	r5,1
 8004c28:	288a983a 	sll	r5,r5,r2
 8004c2c:	19406f36 	bltu	r3,r5,8004dec <_malloc_r+0x324>
 8004c30:	28c4703a 	and	r2,r5,r3
 8004c34:	10000a1e 	bne	r2,zero,8004c60 <_malloc_r+0x198>
 8004c38:	00bfff04 	movi	r2,-4
 8004c3c:	294b883a 	add	r5,r5,r5
 8004c40:	2088703a 	and	r4,r4,r2
 8004c44:	28c4703a 	and	r2,r5,r3
 8004c48:	21000104 	addi	r4,r4,4
 8004c4c:	1000041e 	bne	r2,zero,8004c60 <_malloc_r+0x198>
 8004c50:	294b883a 	add	r5,r5,r5
 8004c54:	28c4703a 	and	r2,r5,r3
 8004c58:	21000104 	addi	r4,r4,4
 8004c5c:	103ffc26 	beq	r2,zero,8004c50 <__alt_data_end+0xfc004c50>
 8004c60:	02bfff04 	movi	r10,-4
 8004c64:	024003c4 	movi	r9,15
 8004c68:	21800044 	addi	r6,r4,1
 8004c6c:	318d883a 	add	r6,r6,r6
 8004c70:	318d883a 	add	r6,r6,r6
 8004c74:	318d883a 	add	r6,r6,r6
 8004c78:	998d883a 	add	r6,r19,r6
 8004c7c:	333ffe04 	addi	r12,r6,-8
 8004c80:	2017883a 	mov	r11,r4
 8004c84:	31800104 	addi	r6,r6,4
 8004c88:	34000017 	ldw	r16,0(r6)
 8004c8c:	31fffd04 	addi	r7,r6,-12
 8004c90:	81c0041e 	bne	r16,r7,8004ca4 <_malloc_r+0x1dc>
 8004c94:	0000fb06 	br	8005084 <_malloc_r+0x5bc>
 8004c98:	1801030e 	bge	r3,zero,80050a8 <_malloc_r+0x5e0>
 8004c9c:	84000317 	ldw	r16,12(r16)
 8004ca0:	81c0f826 	beq	r16,r7,8005084 <_malloc_r+0x5bc>
 8004ca4:	80800117 	ldw	r2,4(r16)
 8004ca8:	1284703a 	and	r2,r2,r10
 8004cac:	1447c83a 	sub	r3,r2,r17
 8004cb0:	48fff90e 	bge	r9,r3,8004c98 <__alt_data_end+0xfc004c98>
 8004cb4:	80800317 	ldw	r2,12(r16)
 8004cb8:	81000217 	ldw	r4,8(r16)
 8004cbc:	89400054 	ori	r5,r17,1
 8004cc0:	81400115 	stw	r5,4(r16)
 8004cc4:	20800315 	stw	r2,12(r4)
 8004cc8:	11000215 	stw	r4,8(r2)
 8004ccc:	8463883a 	add	r17,r16,r17
 8004cd0:	9c400515 	stw	r17,20(r19)
 8004cd4:	9c400415 	stw	r17,16(r19)
 8004cd8:	18800054 	ori	r2,r3,1
 8004cdc:	88800115 	stw	r2,4(r17)
 8004ce0:	8a000315 	stw	r8,12(r17)
 8004ce4:	8a000215 	stw	r8,8(r17)
 8004ce8:	88e3883a 	add	r17,r17,r3
 8004cec:	88c00015 	stw	r3,0(r17)
 8004cf0:	9009883a 	mov	r4,r18
 8004cf4:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8004cf8:	80800204 	addi	r2,r16,8
 8004cfc:	00001b06 	br	8004d6c <_malloc_r+0x2a4>
 8004d00:	04400404 	movi	r17,16
 8004d04:	89402536 	bltu	r17,r5,8004d9c <_malloc_r+0x2d4>
 8004d08:	800c09c0 	call	800c09c <__malloc_lock>
 8004d0c:	00800184 	movi	r2,6
 8004d10:	01000084 	movi	r4,2
 8004d14:	04c20074 	movhi	r19,2049
 8004d18:	1085883a 	add	r2,r2,r2
 8004d1c:	9cfb6f04 	addi	r19,r19,-4676
 8004d20:	1085883a 	add	r2,r2,r2
 8004d24:	9885883a 	add	r2,r19,r2
 8004d28:	14000117 	ldw	r16,4(r2)
 8004d2c:	10fffe04 	addi	r3,r2,-8
 8004d30:	80c0d926 	beq	r16,r3,8005098 <_malloc_r+0x5d0>
 8004d34:	80c00117 	ldw	r3,4(r16)
 8004d38:	81000317 	ldw	r4,12(r16)
 8004d3c:	00bfff04 	movi	r2,-4
 8004d40:	1884703a 	and	r2,r3,r2
 8004d44:	81400217 	ldw	r5,8(r16)
 8004d48:	8085883a 	add	r2,r16,r2
 8004d4c:	10c00117 	ldw	r3,4(r2)
 8004d50:	29000315 	stw	r4,12(r5)
 8004d54:	21400215 	stw	r5,8(r4)
 8004d58:	18c00054 	ori	r3,r3,1
 8004d5c:	10c00115 	stw	r3,4(r2)
 8004d60:	9009883a 	mov	r4,r18
 8004d64:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8004d68:	80800204 	addi	r2,r16,8
 8004d6c:	dfc00a17 	ldw	ra,40(sp)
 8004d70:	df000917 	ldw	fp,36(sp)
 8004d74:	ddc00817 	ldw	r23,32(sp)
 8004d78:	dd800717 	ldw	r22,28(sp)
 8004d7c:	dd400617 	ldw	r21,24(sp)
 8004d80:	dd000517 	ldw	r20,20(sp)
 8004d84:	dcc00417 	ldw	r19,16(sp)
 8004d88:	dc800317 	ldw	r18,12(sp)
 8004d8c:	dc400217 	ldw	r17,8(sp)
 8004d90:	dc000117 	ldw	r16,4(sp)
 8004d94:	dec00b04 	addi	sp,sp,44
 8004d98:	f800283a 	ret
 8004d9c:	00800304 	movi	r2,12
 8004da0:	90800015 	stw	r2,0(r18)
 8004da4:	0005883a 	mov	r2,zero
 8004da8:	003ff006 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004dac:	01002004 	movi	r4,128
 8004db0:	02001004 	movi	r8,64
 8004db4:	01c00fc4 	movi	r7,63
 8004db8:	003f6106 	br	8004b40 <__alt_data_end+0xfc004b40>
 8004dbc:	4009883a 	mov	r4,r8
 8004dc0:	003f7506 	br	8004b98 <__alt_data_end+0xfc004b98>
 8004dc4:	81000317 	ldw	r4,12(r16)
 8004dc8:	003fde06 	br	8004d44 <__alt_data_end+0xfc004d44>
 8004dcc:	81c5883a 	add	r2,r16,r7
 8004dd0:	11400117 	ldw	r5,4(r2)
 8004dd4:	9009883a 	mov	r4,r18
 8004dd8:	29400054 	ori	r5,r5,1
 8004ddc:	11400115 	stw	r5,4(r2)
 8004de0:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8004de4:	80800204 	addi	r2,r16,8
 8004de8:	003fe006 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004dec:	9c000217 	ldw	r16,8(r19)
 8004df0:	00bfff04 	movi	r2,-4
 8004df4:	85800117 	ldw	r22,4(r16)
 8004df8:	b0ac703a 	and	r22,r22,r2
 8004dfc:	b4400336 	bltu	r22,r17,8004e0c <_malloc_r+0x344>
 8004e00:	b445c83a 	sub	r2,r22,r17
 8004e04:	00c003c4 	movi	r3,15
 8004e08:	18805d16 	blt	r3,r2,8004f80 <_malloc_r+0x4b8>
 8004e0c:	05c20074 	movhi	r23,2049
 8004e10:	00820074 	movhi	r2,2049
 8004e14:	10887d04 	addi	r2,r2,8692
 8004e18:	bdc0f804 	addi	r23,r23,992
 8004e1c:	15400017 	ldw	r21,0(r2)
 8004e20:	b8c00017 	ldw	r3,0(r23)
 8004e24:	00bfffc4 	movi	r2,-1
 8004e28:	858d883a 	add	r6,r16,r22
 8004e2c:	8d6b883a 	add	r21,r17,r21
 8004e30:	1880ea26 	beq	r3,r2,80051dc <_malloc_r+0x714>
 8004e34:	ad4403c4 	addi	r21,r21,4111
 8004e38:	00bc0004 	movi	r2,-4096
 8004e3c:	a8aa703a 	and	r21,r21,r2
 8004e40:	a80b883a 	mov	r5,r21
 8004e44:	9009883a 	mov	r4,r18
 8004e48:	d9800015 	stw	r6,0(sp)
 8004e4c:	800662c0 	call	800662c <_sbrk_r>
 8004e50:	1029883a 	mov	r20,r2
 8004e54:	00bfffc4 	movi	r2,-1
 8004e58:	d9800017 	ldw	r6,0(sp)
 8004e5c:	a080e826 	beq	r20,r2,8005200 <_malloc_r+0x738>
 8004e60:	a180a636 	bltu	r20,r6,80050fc <_malloc_r+0x634>
 8004e64:	07020074 	movhi	fp,2049
 8004e68:	e7088604 	addi	fp,fp,8728
 8004e6c:	e0800017 	ldw	r2,0(fp)
 8004e70:	a887883a 	add	r3,r21,r2
 8004e74:	e0c00015 	stw	r3,0(fp)
 8004e78:	3500e626 	beq	r6,r20,8005214 <_malloc_r+0x74c>
 8004e7c:	b9000017 	ldw	r4,0(r23)
 8004e80:	00bfffc4 	movi	r2,-1
 8004e84:	2080ee26 	beq	r4,r2,8005240 <_malloc_r+0x778>
 8004e88:	a185c83a 	sub	r2,r20,r6
 8004e8c:	10c5883a 	add	r2,r2,r3
 8004e90:	e0800015 	stw	r2,0(fp)
 8004e94:	a0c001cc 	andi	r3,r20,7
 8004e98:	1800bc26 	beq	r3,zero,800518c <_malloc_r+0x6c4>
 8004e9c:	a0e9c83a 	sub	r20,r20,r3
 8004ea0:	00840204 	movi	r2,4104
 8004ea4:	a5000204 	addi	r20,r20,8
 8004ea8:	10c7c83a 	sub	r3,r2,r3
 8004eac:	a545883a 	add	r2,r20,r21
 8004eb0:	1083ffcc 	andi	r2,r2,4095
 8004eb4:	18abc83a 	sub	r21,r3,r2
 8004eb8:	a80b883a 	mov	r5,r21
 8004ebc:	9009883a 	mov	r4,r18
 8004ec0:	800662c0 	call	800662c <_sbrk_r>
 8004ec4:	00ffffc4 	movi	r3,-1
 8004ec8:	10c0e126 	beq	r2,r3,8005250 <_malloc_r+0x788>
 8004ecc:	1505c83a 	sub	r2,r2,r20
 8004ed0:	1545883a 	add	r2,r2,r21
 8004ed4:	10800054 	ori	r2,r2,1
 8004ed8:	e0c00017 	ldw	r3,0(fp)
 8004edc:	9d000215 	stw	r20,8(r19)
 8004ee0:	a0800115 	stw	r2,4(r20)
 8004ee4:	a8c7883a 	add	r3,r21,r3
 8004ee8:	e0c00015 	stw	r3,0(fp)
 8004eec:	84c00e26 	beq	r16,r19,8004f28 <_malloc_r+0x460>
 8004ef0:	018003c4 	movi	r6,15
 8004ef4:	3580a72e 	bgeu	r6,r22,8005194 <_malloc_r+0x6cc>
 8004ef8:	81400117 	ldw	r5,4(r16)
 8004efc:	013ffe04 	movi	r4,-8
 8004f00:	b0bffd04 	addi	r2,r22,-12
 8004f04:	1104703a 	and	r2,r2,r4
 8004f08:	2900004c 	andi	r4,r5,1
 8004f0c:	2088b03a 	or	r4,r4,r2
 8004f10:	81000115 	stw	r4,4(r16)
 8004f14:	01400144 	movi	r5,5
 8004f18:	8089883a 	add	r4,r16,r2
 8004f1c:	21400115 	stw	r5,4(r4)
 8004f20:	21400215 	stw	r5,8(r4)
 8004f24:	3080cd36 	bltu	r6,r2,800525c <_malloc_r+0x794>
 8004f28:	00820074 	movhi	r2,2049
 8004f2c:	10887c04 	addi	r2,r2,8688
 8004f30:	11000017 	ldw	r4,0(r2)
 8004f34:	20c0012e 	bgeu	r4,r3,8004f3c <_malloc_r+0x474>
 8004f38:	10c00015 	stw	r3,0(r2)
 8004f3c:	00820074 	movhi	r2,2049
 8004f40:	10887b04 	addi	r2,r2,8684
 8004f44:	11000017 	ldw	r4,0(r2)
 8004f48:	9c000217 	ldw	r16,8(r19)
 8004f4c:	20c0012e 	bgeu	r4,r3,8004f54 <_malloc_r+0x48c>
 8004f50:	10c00015 	stw	r3,0(r2)
 8004f54:	80c00117 	ldw	r3,4(r16)
 8004f58:	00bfff04 	movi	r2,-4
 8004f5c:	1886703a 	and	r3,r3,r2
 8004f60:	1c45c83a 	sub	r2,r3,r17
 8004f64:	1c400236 	bltu	r3,r17,8004f70 <_malloc_r+0x4a8>
 8004f68:	00c003c4 	movi	r3,15
 8004f6c:	18800416 	blt	r3,r2,8004f80 <_malloc_r+0x4b8>
 8004f70:	9009883a 	mov	r4,r18
 8004f74:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8004f78:	0005883a 	mov	r2,zero
 8004f7c:	003f7b06 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004f80:	88c00054 	ori	r3,r17,1
 8004f84:	80c00115 	stw	r3,4(r16)
 8004f88:	8463883a 	add	r17,r16,r17
 8004f8c:	10800054 	ori	r2,r2,1
 8004f90:	9c400215 	stw	r17,8(r19)
 8004f94:	88800115 	stw	r2,4(r17)
 8004f98:	9009883a 	mov	r4,r18
 8004f9c:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8004fa0:	80800204 	addi	r2,r16,8
 8004fa4:	003f7106 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004fa8:	00c00504 	movi	r3,20
 8004fac:	18804a2e 	bgeu	r3,r2,80050d8 <_malloc_r+0x610>
 8004fb0:	00c01504 	movi	r3,84
 8004fb4:	18806e36 	bltu	r3,r2,8005170 <_malloc_r+0x6a8>
 8004fb8:	8804d33a 	srli	r2,r17,12
 8004fbc:	12001bc4 	addi	r8,r2,111
 8004fc0:	11c01b84 	addi	r7,r2,110
 8004fc4:	4209883a 	add	r4,r8,r8
 8004fc8:	003edd06 	br	8004b40 <__alt_data_end+0xfc004b40>
 8004fcc:	3804d27a 	srli	r2,r7,9
 8004fd0:	00c00104 	movi	r3,4
 8004fd4:	1880442e 	bgeu	r3,r2,80050e8 <_malloc_r+0x620>
 8004fd8:	00c00504 	movi	r3,20
 8004fdc:	18808136 	bltu	r3,r2,80051e4 <_malloc_r+0x71c>
 8004fe0:	11401704 	addi	r5,r2,92
 8004fe4:	10c016c4 	addi	r3,r2,91
 8004fe8:	294b883a 	add	r5,r5,r5
 8004fec:	294b883a 	add	r5,r5,r5
 8004ff0:	294b883a 	add	r5,r5,r5
 8004ff4:	994b883a 	add	r5,r19,r5
 8004ff8:	28800017 	ldw	r2,0(r5)
 8004ffc:	01820074 	movhi	r6,2049
 8005000:	297ffe04 	addi	r5,r5,-8
 8005004:	31bb6f04 	addi	r6,r6,-4676
 8005008:	28806526 	beq	r5,r2,80051a0 <_malloc_r+0x6d8>
 800500c:	01bfff04 	movi	r6,-4
 8005010:	10c00117 	ldw	r3,4(r2)
 8005014:	1986703a 	and	r3,r3,r6
 8005018:	38c0022e 	bgeu	r7,r3,8005024 <_malloc_r+0x55c>
 800501c:	10800217 	ldw	r2,8(r2)
 8005020:	28bffb1e 	bne	r5,r2,8005010 <__alt_data_end+0xfc005010>
 8005024:	11400317 	ldw	r5,12(r2)
 8005028:	98c00117 	ldw	r3,4(r19)
 800502c:	81400315 	stw	r5,12(r16)
 8005030:	80800215 	stw	r2,8(r16)
 8005034:	2c000215 	stw	r16,8(r5)
 8005038:	14000315 	stw	r16,12(r2)
 800503c:	003ef806 	br	8004c20 <__alt_data_end+0xfc004c20>
 8005040:	88c00054 	ori	r3,r17,1
 8005044:	80c00115 	stw	r3,4(r16)
 8005048:	8463883a 	add	r17,r16,r17
 800504c:	34400515 	stw	r17,20(r6)
 8005050:	34400415 	stw	r17,16(r6)
 8005054:	10c00054 	ori	r3,r2,1
 8005058:	8a000315 	stw	r8,12(r17)
 800505c:	8a000215 	stw	r8,8(r17)
 8005060:	88c00115 	stw	r3,4(r17)
 8005064:	88a3883a 	add	r17,r17,r2
 8005068:	88800015 	stw	r2,0(r17)
 800506c:	9009883a 	mov	r4,r18
 8005070:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8005074:	80800204 	addi	r2,r16,8
 8005078:	003f3c06 	br	8004d6c <__alt_data_end+0xfc004d6c>
 800507c:	30c00117 	ldw	r3,4(r6)
 8005080:	003ee706 	br	8004c20 <__alt_data_end+0xfc004c20>
 8005084:	5ac00044 	addi	r11,r11,1
 8005088:	588000cc 	andi	r2,r11,3
 800508c:	31800204 	addi	r6,r6,8
 8005090:	103efd1e 	bne	r2,zero,8004c88 <__alt_data_end+0xfc004c88>
 8005094:	00002406 	br	8005128 <_malloc_r+0x660>
 8005098:	14000317 	ldw	r16,12(r2)
 800509c:	143f251e 	bne	r2,r16,8004d34 <__alt_data_end+0xfc004d34>
 80050a0:	21000084 	addi	r4,r4,2
 80050a4:	003ebc06 	br	8004b98 <__alt_data_end+0xfc004b98>
 80050a8:	8085883a 	add	r2,r16,r2
 80050ac:	10c00117 	ldw	r3,4(r2)
 80050b0:	81000317 	ldw	r4,12(r16)
 80050b4:	81400217 	ldw	r5,8(r16)
 80050b8:	18c00054 	ori	r3,r3,1
 80050bc:	10c00115 	stw	r3,4(r2)
 80050c0:	29000315 	stw	r4,12(r5)
 80050c4:	21400215 	stw	r5,8(r4)
 80050c8:	9009883a 	mov	r4,r18
 80050cc:	800c0c00 	call	800c0c0 <__malloc_unlock>
 80050d0:	80800204 	addi	r2,r16,8
 80050d4:	003f2506 	br	8004d6c <__alt_data_end+0xfc004d6c>
 80050d8:	12001704 	addi	r8,r2,92
 80050dc:	11c016c4 	addi	r7,r2,91
 80050e0:	4209883a 	add	r4,r8,r8
 80050e4:	003e9606 	br	8004b40 <__alt_data_end+0xfc004b40>
 80050e8:	3804d1ba 	srli	r2,r7,6
 80050ec:	11400e44 	addi	r5,r2,57
 80050f0:	10c00e04 	addi	r3,r2,56
 80050f4:	294b883a 	add	r5,r5,r5
 80050f8:	003fbc06 	br	8004fec <__alt_data_end+0xfc004fec>
 80050fc:	84ff5926 	beq	r16,r19,8004e64 <__alt_data_end+0xfc004e64>
 8005100:	00820074 	movhi	r2,2049
 8005104:	10bb6f04 	addi	r2,r2,-4676
 8005108:	14000217 	ldw	r16,8(r2)
 800510c:	00bfff04 	movi	r2,-4
 8005110:	80c00117 	ldw	r3,4(r16)
 8005114:	1886703a 	and	r3,r3,r2
 8005118:	003f9106 	br	8004f60 <__alt_data_end+0xfc004f60>
 800511c:	60800217 	ldw	r2,8(r12)
 8005120:	213fffc4 	addi	r4,r4,-1
 8005124:	1300651e 	bne	r2,r12,80052bc <_malloc_r+0x7f4>
 8005128:	208000cc 	andi	r2,r4,3
 800512c:	633ffe04 	addi	r12,r12,-8
 8005130:	103ffa1e 	bne	r2,zero,800511c <__alt_data_end+0xfc00511c>
 8005134:	98800117 	ldw	r2,4(r19)
 8005138:	0146303a 	nor	r3,zero,r5
 800513c:	1884703a 	and	r2,r3,r2
 8005140:	98800115 	stw	r2,4(r19)
 8005144:	294b883a 	add	r5,r5,r5
 8005148:	117f2836 	bltu	r2,r5,8004dec <__alt_data_end+0xfc004dec>
 800514c:	283f2726 	beq	r5,zero,8004dec <__alt_data_end+0xfc004dec>
 8005150:	2886703a 	and	r3,r5,r2
 8005154:	5809883a 	mov	r4,r11
 8005158:	183ec31e 	bne	r3,zero,8004c68 <__alt_data_end+0xfc004c68>
 800515c:	294b883a 	add	r5,r5,r5
 8005160:	2886703a 	and	r3,r5,r2
 8005164:	21000104 	addi	r4,r4,4
 8005168:	183ffc26 	beq	r3,zero,800515c <__alt_data_end+0xfc00515c>
 800516c:	003ebe06 	br	8004c68 <__alt_data_end+0xfc004c68>
 8005170:	00c05504 	movi	r3,340
 8005174:	18801236 	bltu	r3,r2,80051c0 <_malloc_r+0x6f8>
 8005178:	8804d3fa 	srli	r2,r17,15
 800517c:	12001e04 	addi	r8,r2,120
 8005180:	11c01dc4 	addi	r7,r2,119
 8005184:	4209883a 	add	r4,r8,r8
 8005188:	003e6d06 	br	8004b40 <__alt_data_end+0xfc004b40>
 800518c:	00c40004 	movi	r3,4096
 8005190:	003f4606 	br	8004eac <__alt_data_end+0xfc004eac>
 8005194:	00800044 	movi	r2,1
 8005198:	a0800115 	stw	r2,4(r20)
 800519c:	003f7406 	br	8004f70 <__alt_data_end+0xfc004f70>
 80051a0:	1805d0ba 	srai	r2,r3,2
 80051a4:	01c00044 	movi	r7,1
 80051a8:	30c00117 	ldw	r3,4(r6)
 80051ac:	388e983a 	sll	r7,r7,r2
 80051b0:	2805883a 	mov	r2,r5
 80051b4:	38c6b03a 	or	r3,r7,r3
 80051b8:	30c00115 	stw	r3,4(r6)
 80051bc:	003f9b06 	br	800502c <__alt_data_end+0xfc00502c>
 80051c0:	00c15504 	movi	r3,1364
 80051c4:	18801a36 	bltu	r3,r2,8005230 <_malloc_r+0x768>
 80051c8:	8804d4ba 	srli	r2,r17,18
 80051cc:	12001f44 	addi	r8,r2,125
 80051d0:	11c01f04 	addi	r7,r2,124
 80051d4:	4209883a 	add	r4,r8,r8
 80051d8:	003e5906 	br	8004b40 <__alt_data_end+0xfc004b40>
 80051dc:	ad400404 	addi	r21,r21,16
 80051e0:	003f1706 	br	8004e40 <__alt_data_end+0xfc004e40>
 80051e4:	00c01504 	movi	r3,84
 80051e8:	18802336 	bltu	r3,r2,8005278 <_malloc_r+0x7b0>
 80051ec:	3804d33a 	srli	r2,r7,12
 80051f0:	11401bc4 	addi	r5,r2,111
 80051f4:	10c01b84 	addi	r3,r2,110
 80051f8:	294b883a 	add	r5,r5,r5
 80051fc:	003f7b06 	br	8004fec <__alt_data_end+0xfc004fec>
 8005200:	9c000217 	ldw	r16,8(r19)
 8005204:	00bfff04 	movi	r2,-4
 8005208:	80c00117 	ldw	r3,4(r16)
 800520c:	1886703a 	and	r3,r3,r2
 8005210:	003f5306 	br	8004f60 <__alt_data_end+0xfc004f60>
 8005214:	3083ffcc 	andi	r2,r6,4095
 8005218:	103f181e 	bne	r2,zero,8004e7c <__alt_data_end+0xfc004e7c>
 800521c:	99000217 	ldw	r4,8(r19)
 8005220:	b545883a 	add	r2,r22,r21
 8005224:	10800054 	ori	r2,r2,1
 8005228:	20800115 	stw	r2,4(r4)
 800522c:	003f3e06 	br	8004f28 <__alt_data_end+0xfc004f28>
 8005230:	01003f84 	movi	r4,254
 8005234:	02001fc4 	movi	r8,127
 8005238:	01c01f84 	movi	r7,126
 800523c:	003e4006 	br	8004b40 <__alt_data_end+0xfc004b40>
 8005240:	00820074 	movhi	r2,2049
 8005244:	1080f804 	addi	r2,r2,992
 8005248:	15000015 	stw	r20,0(r2)
 800524c:	003f1106 	br	8004e94 <__alt_data_end+0xfc004e94>
 8005250:	00800044 	movi	r2,1
 8005254:	002b883a 	mov	r21,zero
 8005258:	003f1f06 	br	8004ed8 <__alt_data_end+0xfc004ed8>
 800525c:	81400204 	addi	r5,r16,8
 8005260:	9009883a 	mov	r4,r18
 8005264:	8007ecc0 	call	8007ecc <_free_r>
 8005268:	00820074 	movhi	r2,2049
 800526c:	10888604 	addi	r2,r2,8728
 8005270:	10c00017 	ldw	r3,0(r2)
 8005274:	003f2c06 	br	8004f28 <__alt_data_end+0xfc004f28>
 8005278:	00c05504 	movi	r3,340
 800527c:	18800536 	bltu	r3,r2,8005294 <_malloc_r+0x7cc>
 8005280:	3804d3fa 	srli	r2,r7,15
 8005284:	11401e04 	addi	r5,r2,120
 8005288:	10c01dc4 	addi	r3,r2,119
 800528c:	294b883a 	add	r5,r5,r5
 8005290:	003f5606 	br	8004fec <__alt_data_end+0xfc004fec>
 8005294:	00c15504 	movi	r3,1364
 8005298:	18800536 	bltu	r3,r2,80052b0 <_malloc_r+0x7e8>
 800529c:	3804d4ba 	srli	r2,r7,18
 80052a0:	11401f44 	addi	r5,r2,125
 80052a4:	10c01f04 	addi	r3,r2,124
 80052a8:	294b883a 	add	r5,r5,r5
 80052ac:	003f4f06 	br	8004fec <__alt_data_end+0xfc004fec>
 80052b0:	01403f84 	movi	r5,254
 80052b4:	00c01f84 	movi	r3,126
 80052b8:	003f4c06 	br	8004fec <__alt_data_end+0xfc004fec>
 80052bc:	98800117 	ldw	r2,4(r19)
 80052c0:	003fa006 	br	8005144 <__alt_data_end+0xfc005144>
 80052c4:	8808d0fa 	srli	r4,r17,3
 80052c8:	20800044 	addi	r2,r4,1
 80052cc:	1085883a 	add	r2,r2,r2
 80052d0:	003e9006 	br	8004d14 <__alt_data_end+0xfc004d14>

080052d4 <memchr>:
 80052d4:	208000cc 	andi	r2,r4,3
 80052d8:	280f883a 	mov	r7,r5
 80052dc:	10003426 	beq	r2,zero,80053b0 <memchr+0xdc>
 80052e0:	30bfffc4 	addi	r2,r6,-1
 80052e4:	30001a26 	beq	r6,zero,8005350 <memchr+0x7c>
 80052e8:	20c00003 	ldbu	r3,0(r4)
 80052ec:	29803fcc 	andi	r6,r5,255
 80052f0:	30c0051e 	bne	r6,r3,8005308 <memchr+0x34>
 80052f4:	00001806 	br	8005358 <memchr+0x84>
 80052f8:	10001526 	beq	r2,zero,8005350 <memchr+0x7c>
 80052fc:	20c00003 	ldbu	r3,0(r4)
 8005300:	10bfffc4 	addi	r2,r2,-1
 8005304:	30c01426 	beq	r6,r3,8005358 <memchr+0x84>
 8005308:	21000044 	addi	r4,r4,1
 800530c:	20c000cc 	andi	r3,r4,3
 8005310:	183ff91e 	bne	r3,zero,80052f8 <__alt_data_end+0xfc0052f8>
 8005314:	020000c4 	movi	r8,3
 8005318:	40801136 	bltu	r8,r2,8005360 <memchr+0x8c>
 800531c:	10000c26 	beq	r2,zero,8005350 <memchr+0x7c>
 8005320:	20c00003 	ldbu	r3,0(r4)
 8005324:	29403fcc 	andi	r5,r5,255
 8005328:	28c00b26 	beq	r5,r3,8005358 <memchr+0x84>
 800532c:	20c00044 	addi	r3,r4,1
 8005330:	39803fcc 	andi	r6,r7,255
 8005334:	2089883a 	add	r4,r4,r2
 8005338:	00000306 	br	8005348 <memchr+0x74>
 800533c:	18c00044 	addi	r3,r3,1
 8005340:	197fffc3 	ldbu	r5,-1(r3)
 8005344:	31400526 	beq	r6,r5,800535c <memchr+0x88>
 8005348:	1805883a 	mov	r2,r3
 800534c:	20fffb1e 	bne	r4,r3,800533c <__alt_data_end+0xfc00533c>
 8005350:	0005883a 	mov	r2,zero
 8005354:	f800283a 	ret
 8005358:	2005883a 	mov	r2,r4
 800535c:	f800283a 	ret
 8005360:	28c03fcc 	andi	r3,r5,255
 8005364:	1812923a 	slli	r9,r3,8
 8005368:	02ffbff4 	movhi	r11,65279
 800536c:	02a02074 	movhi	r10,32897
 8005370:	48d2b03a 	or	r9,r9,r3
 8005374:	4806943a 	slli	r3,r9,16
 8005378:	5affbfc4 	addi	r11,r11,-257
 800537c:	52a02004 	addi	r10,r10,-32640
 8005380:	48d2b03a 	or	r9,r9,r3
 8005384:	20c00017 	ldw	r3,0(r4)
 8005388:	48c6f03a 	xor	r3,r9,r3
 800538c:	1acd883a 	add	r6,r3,r11
 8005390:	00c6303a 	nor	r3,zero,r3
 8005394:	30c6703a 	and	r3,r6,r3
 8005398:	1a86703a 	and	r3,r3,r10
 800539c:	183fe01e 	bne	r3,zero,8005320 <__alt_data_end+0xfc005320>
 80053a0:	10bfff04 	addi	r2,r2,-4
 80053a4:	21000104 	addi	r4,r4,4
 80053a8:	40bff636 	bltu	r8,r2,8005384 <__alt_data_end+0xfc005384>
 80053ac:	003fdb06 	br	800531c <__alt_data_end+0xfc00531c>
 80053b0:	3005883a 	mov	r2,r6
 80053b4:	003fd706 	br	8005314 <__alt_data_end+0xfc005314>

080053b8 <memcpy>:
 80053b8:	defffd04 	addi	sp,sp,-12
 80053bc:	dfc00215 	stw	ra,8(sp)
 80053c0:	dc400115 	stw	r17,4(sp)
 80053c4:	dc000015 	stw	r16,0(sp)
 80053c8:	00c003c4 	movi	r3,15
 80053cc:	2005883a 	mov	r2,r4
 80053d0:	1980452e 	bgeu	r3,r6,80054e8 <memcpy+0x130>
 80053d4:	2906b03a 	or	r3,r5,r4
 80053d8:	18c000cc 	andi	r3,r3,3
 80053dc:	1800441e 	bne	r3,zero,80054f0 <memcpy+0x138>
 80053e0:	347ffc04 	addi	r17,r6,-16
 80053e4:	8822d13a 	srli	r17,r17,4
 80053e8:	28c00104 	addi	r3,r5,4
 80053ec:	23400104 	addi	r13,r4,4
 80053f0:	8820913a 	slli	r16,r17,4
 80053f4:	2b000204 	addi	r12,r5,8
 80053f8:	22c00204 	addi	r11,r4,8
 80053fc:	84000504 	addi	r16,r16,20
 8005400:	2a800304 	addi	r10,r5,12
 8005404:	22400304 	addi	r9,r4,12
 8005408:	2c21883a 	add	r16,r5,r16
 800540c:	2811883a 	mov	r8,r5
 8005410:	200f883a 	mov	r7,r4
 8005414:	41000017 	ldw	r4,0(r8)
 8005418:	1fc00017 	ldw	ra,0(r3)
 800541c:	63c00017 	ldw	r15,0(r12)
 8005420:	39000015 	stw	r4,0(r7)
 8005424:	53800017 	ldw	r14,0(r10)
 8005428:	6fc00015 	stw	ra,0(r13)
 800542c:	5bc00015 	stw	r15,0(r11)
 8005430:	4b800015 	stw	r14,0(r9)
 8005434:	18c00404 	addi	r3,r3,16
 8005438:	39c00404 	addi	r7,r7,16
 800543c:	42000404 	addi	r8,r8,16
 8005440:	6b400404 	addi	r13,r13,16
 8005444:	63000404 	addi	r12,r12,16
 8005448:	5ac00404 	addi	r11,r11,16
 800544c:	52800404 	addi	r10,r10,16
 8005450:	4a400404 	addi	r9,r9,16
 8005454:	1c3fef1e 	bne	r3,r16,8005414 <__alt_data_end+0xfc005414>
 8005458:	89c00044 	addi	r7,r17,1
 800545c:	380e913a 	slli	r7,r7,4
 8005460:	310003cc 	andi	r4,r6,15
 8005464:	02c000c4 	movi	r11,3
 8005468:	11c7883a 	add	r3,r2,r7
 800546c:	29cb883a 	add	r5,r5,r7
 8005470:	5900212e 	bgeu	r11,r4,80054f8 <memcpy+0x140>
 8005474:	1813883a 	mov	r9,r3
 8005478:	2811883a 	mov	r8,r5
 800547c:	200f883a 	mov	r7,r4
 8005480:	42800017 	ldw	r10,0(r8)
 8005484:	4a400104 	addi	r9,r9,4
 8005488:	39ffff04 	addi	r7,r7,-4
 800548c:	4abfff15 	stw	r10,-4(r9)
 8005490:	42000104 	addi	r8,r8,4
 8005494:	59fffa36 	bltu	r11,r7,8005480 <__alt_data_end+0xfc005480>
 8005498:	213fff04 	addi	r4,r4,-4
 800549c:	2008d0ba 	srli	r4,r4,2
 80054a0:	318000cc 	andi	r6,r6,3
 80054a4:	21000044 	addi	r4,r4,1
 80054a8:	2109883a 	add	r4,r4,r4
 80054ac:	2109883a 	add	r4,r4,r4
 80054b0:	1907883a 	add	r3,r3,r4
 80054b4:	290b883a 	add	r5,r5,r4
 80054b8:	30000626 	beq	r6,zero,80054d4 <memcpy+0x11c>
 80054bc:	198d883a 	add	r6,r3,r6
 80054c0:	29c00003 	ldbu	r7,0(r5)
 80054c4:	18c00044 	addi	r3,r3,1
 80054c8:	29400044 	addi	r5,r5,1
 80054cc:	19ffffc5 	stb	r7,-1(r3)
 80054d0:	19bffb1e 	bne	r3,r6,80054c0 <__alt_data_end+0xfc0054c0>
 80054d4:	dfc00217 	ldw	ra,8(sp)
 80054d8:	dc400117 	ldw	r17,4(sp)
 80054dc:	dc000017 	ldw	r16,0(sp)
 80054e0:	dec00304 	addi	sp,sp,12
 80054e4:	f800283a 	ret
 80054e8:	2007883a 	mov	r3,r4
 80054ec:	003ff206 	br	80054b8 <__alt_data_end+0xfc0054b8>
 80054f0:	2007883a 	mov	r3,r4
 80054f4:	003ff106 	br	80054bc <__alt_data_end+0xfc0054bc>
 80054f8:	200d883a 	mov	r6,r4
 80054fc:	003fee06 	br	80054b8 <__alt_data_end+0xfc0054b8>

08005500 <_Balloc>:
 8005500:	20801317 	ldw	r2,76(r4)
 8005504:	defffc04 	addi	sp,sp,-16
 8005508:	dc400115 	stw	r17,4(sp)
 800550c:	dc000015 	stw	r16,0(sp)
 8005510:	dfc00315 	stw	ra,12(sp)
 8005514:	dc800215 	stw	r18,8(sp)
 8005518:	2023883a 	mov	r17,r4
 800551c:	2821883a 	mov	r16,r5
 8005520:	10000f26 	beq	r2,zero,8005560 <_Balloc+0x60>
 8005524:	8407883a 	add	r3,r16,r16
 8005528:	18c7883a 	add	r3,r3,r3
 800552c:	10c7883a 	add	r3,r2,r3
 8005530:	18800017 	ldw	r2,0(r3)
 8005534:	10001126 	beq	r2,zero,800557c <_Balloc+0x7c>
 8005538:	11000017 	ldw	r4,0(r2)
 800553c:	19000015 	stw	r4,0(r3)
 8005540:	10000415 	stw	zero,16(r2)
 8005544:	10000315 	stw	zero,12(r2)
 8005548:	dfc00317 	ldw	ra,12(sp)
 800554c:	dc800217 	ldw	r18,8(sp)
 8005550:	dc400117 	ldw	r17,4(sp)
 8005554:	dc000017 	ldw	r16,0(sp)
 8005558:	dec00404 	addi	sp,sp,16
 800555c:	f800283a 	ret
 8005560:	01800844 	movi	r6,33
 8005564:	01400104 	movi	r5,4
 8005568:	8007ccc0 	call	8007ccc <_calloc_r>
 800556c:	88801315 	stw	r2,76(r17)
 8005570:	103fec1e 	bne	r2,zero,8005524 <__alt_data_end+0xfc005524>
 8005574:	0005883a 	mov	r2,zero
 8005578:	003ff306 	br	8005548 <__alt_data_end+0xfc005548>
 800557c:	01400044 	movi	r5,1
 8005580:	2c24983a 	sll	r18,r5,r16
 8005584:	8809883a 	mov	r4,r17
 8005588:	91800144 	addi	r6,r18,5
 800558c:	318d883a 	add	r6,r6,r6
 8005590:	318d883a 	add	r6,r6,r6
 8005594:	8007ccc0 	call	8007ccc <_calloc_r>
 8005598:	103ff626 	beq	r2,zero,8005574 <__alt_data_end+0xfc005574>
 800559c:	14000115 	stw	r16,4(r2)
 80055a0:	14800215 	stw	r18,8(r2)
 80055a4:	003fe606 	br	8005540 <__alt_data_end+0xfc005540>

080055a8 <_Bfree>:
 80055a8:	28000826 	beq	r5,zero,80055cc <_Bfree+0x24>
 80055ac:	28c00117 	ldw	r3,4(r5)
 80055b0:	20801317 	ldw	r2,76(r4)
 80055b4:	18c7883a 	add	r3,r3,r3
 80055b8:	18c7883a 	add	r3,r3,r3
 80055bc:	10c5883a 	add	r2,r2,r3
 80055c0:	10c00017 	ldw	r3,0(r2)
 80055c4:	28c00015 	stw	r3,0(r5)
 80055c8:	11400015 	stw	r5,0(r2)
 80055cc:	f800283a 	ret

080055d0 <__multadd>:
 80055d0:	defff704 	addi	sp,sp,-36
 80055d4:	dc800215 	stw	r18,8(sp)
 80055d8:	2c800417 	ldw	r18,16(r5)
 80055dc:	dd800615 	stw	r22,24(sp)
 80055e0:	dd400515 	stw	r21,20(sp)
 80055e4:	dd000415 	stw	r20,16(sp)
 80055e8:	dcc00315 	stw	r19,12(sp)
 80055ec:	dc400115 	stw	r17,4(sp)
 80055f0:	dc000015 	stw	r16,0(sp)
 80055f4:	dfc00815 	stw	ra,32(sp)
 80055f8:	ddc00715 	stw	r23,28(sp)
 80055fc:	2827883a 	mov	r19,r5
 8005600:	2029883a 	mov	r20,r4
 8005604:	3023883a 	mov	r17,r6
 8005608:	3821883a 	mov	r16,r7
 800560c:	2d400504 	addi	r21,r5,20
 8005610:	002d883a 	mov	r22,zero
 8005614:	adc00017 	ldw	r23,0(r21)
 8005618:	880b883a 	mov	r5,r17
 800561c:	ad400104 	addi	r21,r21,4
 8005620:	b93fffcc 	andi	r4,r23,65535
 8005624:	8000c800 	call	8000c80 <__mulsi3>
 8005628:	b808d43a 	srli	r4,r23,16
 800562c:	880b883a 	mov	r5,r17
 8005630:	1421883a 	add	r16,r2,r16
 8005634:	8000c800 	call	8000c80 <__mulsi3>
 8005638:	800ed43a 	srli	r7,r16,16
 800563c:	80ffffcc 	andi	r3,r16,65535
 8005640:	b5800044 	addi	r22,r22,1
 8005644:	11c5883a 	add	r2,r2,r7
 8005648:	100e943a 	slli	r7,r2,16
 800564c:	1020d43a 	srli	r16,r2,16
 8005650:	38c7883a 	add	r3,r7,r3
 8005654:	a8ffff15 	stw	r3,-4(r21)
 8005658:	b4bfee16 	blt	r22,r18,8005614 <__alt_data_end+0xfc005614>
 800565c:	80000926 	beq	r16,zero,8005684 <__multadd+0xb4>
 8005660:	98800217 	ldw	r2,8(r19)
 8005664:	9080130e 	bge	r18,r2,80056b4 <__multadd+0xe4>
 8005668:	90800144 	addi	r2,r18,5
 800566c:	1085883a 	add	r2,r2,r2
 8005670:	1085883a 	add	r2,r2,r2
 8005674:	9885883a 	add	r2,r19,r2
 8005678:	14000015 	stw	r16,0(r2)
 800567c:	94800044 	addi	r18,r18,1
 8005680:	9c800415 	stw	r18,16(r19)
 8005684:	9805883a 	mov	r2,r19
 8005688:	dfc00817 	ldw	ra,32(sp)
 800568c:	ddc00717 	ldw	r23,28(sp)
 8005690:	dd800617 	ldw	r22,24(sp)
 8005694:	dd400517 	ldw	r21,20(sp)
 8005698:	dd000417 	ldw	r20,16(sp)
 800569c:	dcc00317 	ldw	r19,12(sp)
 80056a0:	dc800217 	ldw	r18,8(sp)
 80056a4:	dc400117 	ldw	r17,4(sp)
 80056a8:	dc000017 	ldw	r16,0(sp)
 80056ac:	dec00904 	addi	sp,sp,36
 80056b0:	f800283a 	ret
 80056b4:	99400117 	ldw	r5,4(r19)
 80056b8:	a009883a 	mov	r4,r20
 80056bc:	29400044 	addi	r5,r5,1
 80056c0:	80055000 	call	8005500 <_Balloc>
 80056c4:	99800417 	ldw	r6,16(r19)
 80056c8:	99400304 	addi	r5,r19,12
 80056cc:	11000304 	addi	r4,r2,12
 80056d0:	31800084 	addi	r6,r6,2
 80056d4:	318d883a 	add	r6,r6,r6
 80056d8:	318d883a 	add	r6,r6,r6
 80056dc:	1023883a 	mov	r17,r2
 80056e0:	80053b80 	call	80053b8 <memcpy>
 80056e4:	98000a26 	beq	r19,zero,8005710 <__multadd+0x140>
 80056e8:	98c00117 	ldw	r3,4(r19)
 80056ec:	a0801317 	ldw	r2,76(r20)
 80056f0:	18c7883a 	add	r3,r3,r3
 80056f4:	18c7883a 	add	r3,r3,r3
 80056f8:	10c5883a 	add	r2,r2,r3
 80056fc:	10c00017 	ldw	r3,0(r2)
 8005700:	98c00015 	stw	r3,0(r19)
 8005704:	14c00015 	stw	r19,0(r2)
 8005708:	8827883a 	mov	r19,r17
 800570c:	003fd606 	br	8005668 <__alt_data_end+0xfc005668>
 8005710:	8827883a 	mov	r19,r17
 8005714:	003fd406 	br	8005668 <__alt_data_end+0xfc005668>

08005718 <__s2b>:
 8005718:	defff904 	addi	sp,sp,-28
 800571c:	dc400115 	stw	r17,4(sp)
 8005720:	dc000015 	stw	r16,0(sp)
 8005724:	2023883a 	mov	r17,r4
 8005728:	2821883a 	mov	r16,r5
 800572c:	39000204 	addi	r4,r7,8
 8005730:	01400244 	movi	r5,9
 8005734:	dcc00315 	stw	r19,12(sp)
 8005738:	dc800215 	stw	r18,8(sp)
 800573c:	dfc00615 	stw	ra,24(sp)
 8005740:	dd400515 	stw	r21,20(sp)
 8005744:	dd000415 	stw	r20,16(sp)
 8005748:	3825883a 	mov	r18,r7
 800574c:	3027883a 	mov	r19,r6
 8005750:	8000acc0 	call	8000acc <__divsi3>
 8005754:	00c00044 	movi	r3,1
 8005758:	000b883a 	mov	r5,zero
 800575c:	1880030e 	bge	r3,r2,800576c <__s2b+0x54>
 8005760:	18c7883a 	add	r3,r3,r3
 8005764:	29400044 	addi	r5,r5,1
 8005768:	18bffd16 	blt	r3,r2,8005760 <__alt_data_end+0xfc005760>
 800576c:	8809883a 	mov	r4,r17
 8005770:	80055000 	call	8005500 <_Balloc>
 8005774:	d8c00717 	ldw	r3,28(sp)
 8005778:	10c00515 	stw	r3,20(r2)
 800577c:	00c00044 	movi	r3,1
 8005780:	10c00415 	stw	r3,16(r2)
 8005784:	00c00244 	movi	r3,9
 8005788:	1cc0210e 	bge	r3,r19,8005810 <__s2b+0xf8>
 800578c:	80eb883a 	add	r21,r16,r3
 8005790:	a829883a 	mov	r20,r21
 8005794:	84e1883a 	add	r16,r16,r19
 8005798:	a1c00007 	ldb	r7,0(r20)
 800579c:	01800284 	movi	r6,10
 80057a0:	a5000044 	addi	r20,r20,1
 80057a4:	100b883a 	mov	r5,r2
 80057a8:	39fff404 	addi	r7,r7,-48
 80057ac:	8809883a 	mov	r4,r17
 80057b0:	80055d00 	call	80055d0 <__multadd>
 80057b4:	a43ff81e 	bne	r20,r16,8005798 <__alt_data_end+0xfc005798>
 80057b8:	ace1883a 	add	r16,r21,r19
 80057bc:	843ffe04 	addi	r16,r16,-8
 80057c0:	9c800a0e 	bge	r19,r18,80057ec <__s2b+0xd4>
 80057c4:	94e5c83a 	sub	r18,r18,r19
 80057c8:	84a5883a 	add	r18,r16,r18
 80057cc:	81c00007 	ldb	r7,0(r16)
 80057d0:	01800284 	movi	r6,10
 80057d4:	84000044 	addi	r16,r16,1
 80057d8:	100b883a 	mov	r5,r2
 80057dc:	39fff404 	addi	r7,r7,-48
 80057e0:	8809883a 	mov	r4,r17
 80057e4:	80055d00 	call	80055d0 <__multadd>
 80057e8:	84bff81e 	bne	r16,r18,80057cc <__alt_data_end+0xfc0057cc>
 80057ec:	dfc00617 	ldw	ra,24(sp)
 80057f0:	dd400517 	ldw	r21,20(sp)
 80057f4:	dd000417 	ldw	r20,16(sp)
 80057f8:	dcc00317 	ldw	r19,12(sp)
 80057fc:	dc800217 	ldw	r18,8(sp)
 8005800:	dc400117 	ldw	r17,4(sp)
 8005804:	dc000017 	ldw	r16,0(sp)
 8005808:	dec00704 	addi	sp,sp,28
 800580c:	f800283a 	ret
 8005810:	84000284 	addi	r16,r16,10
 8005814:	1827883a 	mov	r19,r3
 8005818:	003fe906 	br	80057c0 <__alt_data_end+0xfc0057c0>

0800581c <__hi0bits>:
 800581c:	20bfffec 	andhi	r2,r4,65535
 8005820:	1000141e 	bne	r2,zero,8005874 <__hi0bits+0x58>
 8005824:	2008943a 	slli	r4,r4,16
 8005828:	00800404 	movi	r2,16
 800582c:	20ffc02c 	andhi	r3,r4,65280
 8005830:	1800021e 	bne	r3,zero,800583c <__hi0bits+0x20>
 8005834:	2008923a 	slli	r4,r4,8
 8005838:	10800204 	addi	r2,r2,8
 800583c:	20fc002c 	andhi	r3,r4,61440
 8005840:	1800021e 	bne	r3,zero,800584c <__hi0bits+0x30>
 8005844:	2008913a 	slli	r4,r4,4
 8005848:	10800104 	addi	r2,r2,4
 800584c:	20f0002c 	andhi	r3,r4,49152
 8005850:	1800031e 	bne	r3,zero,8005860 <__hi0bits+0x44>
 8005854:	2109883a 	add	r4,r4,r4
 8005858:	10800084 	addi	r2,r2,2
 800585c:	2109883a 	add	r4,r4,r4
 8005860:	20000316 	blt	r4,zero,8005870 <__hi0bits+0x54>
 8005864:	2110002c 	andhi	r4,r4,16384
 8005868:	2000041e 	bne	r4,zero,800587c <__hi0bits+0x60>
 800586c:	00800804 	movi	r2,32
 8005870:	f800283a 	ret
 8005874:	0005883a 	mov	r2,zero
 8005878:	003fec06 	br	800582c <__alt_data_end+0xfc00582c>
 800587c:	10800044 	addi	r2,r2,1
 8005880:	f800283a 	ret

08005884 <__lo0bits>:
 8005884:	20c00017 	ldw	r3,0(r4)
 8005888:	188001cc 	andi	r2,r3,7
 800588c:	10000826 	beq	r2,zero,80058b0 <__lo0bits+0x2c>
 8005890:	1880004c 	andi	r2,r3,1
 8005894:	1000211e 	bne	r2,zero,800591c <__lo0bits+0x98>
 8005898:	1880008c 	andi	r2,r3,2
 800589c:	1000211e 	bne	r2,zero,8005924 <__lo0bits+0xa0>
 80058a0:	1806d0ba 	srli	r3,r3,2
 80058a4:	00800084 	movi	r2,2
 80058a8:	20c00015 	stw	r3,0(r4)
 80058ac:	f800283a 	ret
 80058b0:	18bfffcc 	andi	r2,r3,65535
 80058b4:	10001326 	beq	r2,zero,8005904 <__lo0bits+0x80>
 80058b8:	0005883a 	mov	r2,zero
 80058bc:	19403fcc 	andi	r5,r3,255
 80058c0:	2800021e 	bne	r5,zero,80058cc <__lo0bits+0x48>
 80058c4:	1806d23a 	srli	r3,r3,8
 80058c8:	10800204 	addi	r2,r2,8
 80058cc:	194003cc 	andi	r5,r3,15
 80058d0:	2800021e 	bne	r5,zero,80058dc <__lo0bits+0x58>
 80058d4:	1806d13a 	srli	r3,r3,4
 80058d8:	10800104 	addi	r2,r2,4
 80058dc:	194000cc 	andi	r5,r3,3
 80058e0:	2800021e 	bne	r5,zero,80058ec <__lo0bits+0x68>
 80058e4:	1806d0ba 	srli	r3,r3,2
 80058e8:	10800084 	addi	r2,r2,2
 80058ec:	1940004c 	andi	r5,r3,1
 80058f0:	2800081e 	bne	r5,zero,8005914 <__lo0bits+0x90>
 80058f4:	1806d07a 	srli	r3,r3,1
 80058f8:	1800051e 	bne	r3,zero,8005910 <__lo0bits+0x8c>
 80058fc:	00800804 	movi	r2,32
 8005900:	f800283a 	ret
 8005904:	1806d43a 	srli	r3,r3,16
 8005908:	00800404 	movi	r2,16
 800590c:	003feb06 	br	80058bc <__alt_data_end+0xfc0058bc>
 8005910:	10800044 	addi	r2,r2,1
 8005914:	20c00015 	stw	r3,0(r4)
 8005918:	f800283a 	ret
 800591c:	0005883a 	mov	r2,zero
 8005920:	f800283a 	ret
 8005924:	1806d07a 	srli	r3,r3,1
 8005928:	00800044 	movi	r2,1
 800592c:	20c00015 	stw	r3,0(r4)
 8005930:	f800283a 	ret

08005934 <__i2b>:
 8005934:	defffd04 	addi	sp,sp,-12
 8005938:	dc000015 	stw	r16,0(sp)
 800593c:	04000044 	movi	r16,1
 8005940:	dc400115 	stw	r17,4(sp)
 8005944:	2823883a 	mov	r17,r5
 8005948:	800b883a 	mov	r5,r16
 800594c:	dfc00215 	stw	ra,8(sp)
 8005950:	80055000 	call	8005500 <_Balloc>
 8005954:	14400515 	stw	r17,20(r2)
 8005958:	14000415 	stw	r16,16(r2)
 800595c:	dfc00217 	ldw	ra,8(sp)
 8005960:	dc400117 	ldw	r17,4(sp)
 8005964:	dc000017 	ldw	r16,0(sp)
 8005968:	dec00304 	addi	sp,sp,12
 800596c:	f800283a 	ret

08005970 <__multiply>:
 8005970:	deffef04 	addi	sp,sp,-68
 8005974:	dc400815 	stw	r17,32(sp)
 8005978:	dc000715 	stw	r16,28(sp)
 800597c:	34400417 	ldw	r17,16(r6)
 8005980:	2c000417 	ldw	r16,16(r5)
 8005984:	dd800d15 	stw	r22,52(sp)
 8005988:	dc800915 	stw	r18,36(sp)
 800598c:	dfc01015 	stw	ra,64(sp)
 8005990:	df000f15 	stw	fp,60(sp)
 8005994:	ddc00e15 	stw	r23,56(sp)
 8005998:	dd400c15 	stw	r21,48(sp)
 800599c:	dd000b15 	stw	r20,44(sp)
 80059a0:	dcc00a15 	stw	r19,40(sp)
 80059a4:	2825883a 	mov	r18,r5
 80059a8:	302d883a 	mov	r22,r6
 80059ac:	8440050e 	bge	r16,r17,80059c4 <__multiply+0x54>
 80059b0:	8007883a 	mov	r3,r16
 80059b4:	3025883a 	mov	r18,r6
 80059b8:	8821883a 	mov	r16,r17
 80059bc:	282d883a 	mov	r22,r5
 80059c0:	1823883a 	mov	r17,r3
 80059c4:	90800217 	ldw	r2,8(r18)
 80059c8:	8447883a 	add	r3,r16,r17
 80059cc:	d8c00215 	stw	r3,8(sp)
 80059d0:	91400117 	ldw	r5,4(r18)
 80059d4:	10c0010e 	bge	r2,r3,80059dc <__multiply+0x6c>
 80059d8:	29400044 	addi	r5,r5,1
 80059dc:	80055000 	call	8005500 <_Balloc>
 80059e0:	d8c00217 	ldw	r3,8(sp)
 80059e4:	d8800615 	stw	r2,24(sp)
 80059e8:	18eb883a 	add	r21,r3,r3
 80059ec:	ad6b883a 	add	r21,r21,r21
 80059f0:	10c00504 	addi	r3,r2,20
 80059f4:	1d6b883a 	add	r21,r3,r21
 80059f8:	d8c00115 	stw	r3,4(sp)
 80059fc:	dd400315 	stw	r21,12(sp)
 8005a00:	1805883a 	mov	r2,r3
 8005a04:	1d40042e 	bgeu	r3,r21,8005a18 <__multiply+0xa8>
 8005a08:	d8c00317 	ldw	r3,12(sp)
 8005a0c:	10000015 	stw	zero,0(r2)
 8005a10:	10800104 	addi	r2,r2,4
 8005a14:	10fffc36 	bltu	r2,r3,8005a08 <__alt_data_end+0xfc005a08>
 8005a18:	8c63883a 	add	r17,r17,r17
 8005a1c:	b5800504 	addi	r22,r22,20
 8005a20:	8c63883a 	add	r17,r17,r17
 8005a24:	94800504 	addi	r18,r18,20
 8005a28:	8421883a 	add	r16,r16,r16
 8005a2c:	b463883a 	add	r17,r22,r17
 8005a30:	8421883a 	add	r16,r16,r16
 8005a34:	dd800015 	stw	r22,0(sp)
 8005a38:	dc800415 	stw	r18,16(sp)
 8005a3c:	dc400515 	stw	r17,20(sp)
 8005a40:	9429883a 	add	r20,r18,r16
 8005a44:	b4404f2e 	bgeu	r22,r17,8005b84 <__multiply+0x214>
 8005a48:	d8c00017 	ldw	r3,0(sp)
 8005a4c:	1c800017 	ldw	r18,0(r3)
 8005a50:	947fffcc 	andi	r17,r18,65535
 8005a54:	88001e26 	beq	r17,zero,8005ad0 <__multiply+0x160>
 8005a58:	dd800117 	ldw	r22,4(sp)
 8005a5c:	dd400417 	ldw	r21,16(sp)
 8005a60:	0027883a 	mov	r19,zero
 8005a64:	ac800017 	ldw	r18,0(r21)
 8005a68:	b4000017 	ldw	r16,0(r22)
 8005a6c:	880b883a 	mov	r5,r17
 8005a70:	913fffcc 	andi	r4,r18,65535
 8005a74:	8000c800 	call	8000c80 <__mulsi3>
 8005a78:	9008d43a 	srli	r4,r18,16
 8005a7c:	84bfffcc 	andi	r18,r16,65535
 8005a80:	1485883a 	add	r2,r2,r18
 8005a84:	14e5883a 	add	r18,r2,r19
 8005a88:	8020d43a 	srli	r16,r16,16
 8005a8c:	9026d43a 	srli	r19,r18,16
 8005a90:	880b883a 	mov	r5,r17
 8005a94:	8000c800 	call	8000c80 <__mulsi3>
 8005a98:	1405883a 	add	r2,r2,r16
 8005a9c:	14e1883a 	add	r16,r2,r19
 8005aa0:	90ffffcc 	andi	r3,r18,65535
 8005aa4:	8024943a 	slli	r18,r16,16
 8005aa8:	ad400104 	addi	r21,r21,4
 8005aac:	b005883a 	mov	r2,r22
 8005ab0:	90c6b03a 	or	r3,r18,r3
 8005ab4:	b0c00015 	stw	r3,0(r22)
 8005ab8:	8026d43a 	srli	r19,r16,16
 8005abc:	b5800104 	addi	r22,r22,4
 8005ac0:	ad3fe836 	bltu	r21,r20,8005a64 <__alt_data_end+0xfc005a64>
 8005ac4:	d8c00017 	ldw	r3,0(sp)
 8005ac8:	14c00115 	stw	r19,4(r2)
 8005acc:	1c800017 	ldw	r18,0(r3)
 8005ad0:	9024d43a 	srli	r18,r18,16
 8005ad4:	90002226 	beq	r18,zero,8005b60 <__multiply+0x1f0>
 8005ad8:	d8c00117 	ldw	r3,4(sp)
 8005adc:	dd800417 	ldw	r22,16(sp)
 8005ae0:	002f883a 	mov	r23,zero
 8005ae4:	1f000017 	ldw	fp,0(r3)
 8005ae8:	1823883a 	mov	r17,r3
 8005aec:	182b883a 	mov	r21,r3
 8005af0:	e021883a 	mov	r16,fp
 8005af4:	00000106 	br	8005afc <__multiply+0x18c>
 8005af8:	982b883a 	mov	r21,r19
 8005afc:	b100000b 	ldhu	r4,0(r22)
 8005b00:	8020d43a 	srli	r16,r16,16
 8005b04:	900b883a 	mov	r5,r18
 8005b08:	8000c800 	call	8000c80 <__mulsi3>
 8005b0c:	1405883a 	add	r2,r2,r16
 8005b10:	15ef883a 	add	r23,r2,r23
 8005b14:	b804943a 	slli	r2,r23,16
 8005b18:	e0ffffcc 	andi	r3,fp,65535
 8005b1c:	8c400104 	addi	r17,r17,4
 8005b20:	10c6b03a 	or	r3,r2,r3
 8005b24:	88ffff15 	stw	r3,-4(r17)
 8005b28:	b5800104 	addi	r22,r22,4
 8005b2c:	b13fff17 	ldw	r4,-4(r22)
 8005b30:	acc00104 	addi	r19,r21,4
 8005b34:	900b883a 	mov	r5,r18
 8005b38:	2008d43a 	srli	r4,r4,16
 8005b3c:	9c000017 	ldw	r16,0(r19)
 8005b40:	8000c800 	call	8000c80 <__mulsi3>
 8005b44:	b806d43a 	srli	r3,r23,16
 8005b48:	813fffcc 	andi	r4,r16,65535
 8005b4c:	1105883a 	add	r2,r2,r4
 8005b50:	10f9883a 	add	fp,r2,r3
 8005b54:	e02ed43a 	srli	r23,fp,16
 8005b58:	b53fe736 	bltu	r22,r20,8005af8 <__alt_data_end+0xfc005af8>
 8005b5c:	af000115 	stw	fp,4(r21)
 8005b60:	d8c00017 	ldw	r3,0(sp)
 8005b64:	d9000517 	ldw	r4,20(sp)
 8005b68:	18c00104 	addi	r3,r3,4
 8005b6c:	d8c00015 	stw	r3,0(sp)
 8005b70:	d8c00117 	ldw	r3,4(sp)
 8005b74:	18c00104 	addi	r3,r3,4
 8005b78:	d8c00115 	stw	r3,4(sp)
 8005b7c:	d8c00017 	ldw	r3,0(sp)
 8005b80:	193fb136 	bltu	r3,r4,8005a48 <__alt_data_end+0xfc005a48>
 8005b84:	d8c00217 	ldw	r3,8(sp)
 8005b88:	00c00c0e 	bge	zero,r3,8005bbc <__multiply+0x24c>
 8005b8c:	d8c00317 	ldw	r3,12(sp)
 8005b90:	18bfff17 	ldw	r2,-4(r3)
 8005b94:	1d7fff04 	addi	r21,r3,-4
 8005b98:	10000326 	beq	r2,zero,8005ba8 <__multiply+0x238>
 8005b9c:	00000706 	br	8005bbc <__multiply+0x24c>
 8005ba0:	a8800017 	ldw	r2,0(r21)
 8005ba4:	1000051e 	bne	r2,zero,8005bbc <__multiply+0x24c>
 8005ba8:	d8c00217 	ldw	r3,8(sp)
 8005bac:	ad7fff04 	addi	r21,r21,-4
 8005bb0:	18ffffc4 	addi	r3,r3,-1
 8005bb4:	d8c00215 	stw	r3,8(sp)
 8005bb8:	183ff91e 	bne	r3,zero,8005ba0 <__alt_data_end+0xfc005ba0>
 8005bbc:	d8c00617 	ldw	r3,24(sp)
 8005bc0:	d9000217 	ldw	r4,8(sp)
 8005bc4:	1805883a 	mov	r2,r3
 8005bc8:	19000415 	stw	r4,16(r3)
 8005bcc:	dfc01017 	ldw	ra,64(sp)
 8005bd0:	df000f17 	ldw	fp,60(sp)
 8005bd4:	ddc00e17 	ldw	r23,56(sp)
 8005bd8:	dd800d17 	ldw	r22,52(sp)
 8005bdc:	dd400c17 	ldw	r21,48(sp)
 8005be0:	dd000b17 	ldw	r20,44(sp)
 8005be4:	dcc00a17 	ldw	r19,40(sp)
 8005be8:	dc800917 	ldw	r18,36(sp)
 8005bec:	dc400817 	ldw	r17,32(sp)
 8005bf0:	dc000717 	ldw	r16,28(sp)
 8005bf4:	dec01104 	addi	sp,sp,68
 8005bf8:	f800283a 	ret

08005bfc <__pow5mult>:
 8005bfc:	defffa04 	addi	sp,sp,-24
 8005c00:	dcc00315 	stw	r19,12(sp)
 8005c04:	dc000015 	stw	r16,0(sp)
 8005c08:	dfc00515 	stw	ra,20(sp)
 8005c0c:	dd000415 	stw	r20,16(sp)
 8005c10:	dc800215 	stw	r18,8(sp)
 8005c14:	dc400115 	stw	r17,4(sp)
 8005c18:	308000cc 	andi	r2,r6,3
 8005c1c:	3021883a 	mov	r16,r6
 8005c20:	2027883a 	mov	r19,r4
 8005c24:	10002f1e 	bne	r2,zero,8005ce4 <__pow5mult+0xe8>
 8005c28:	2825883a 	mov	r18,r5
 8005c2c:	8021d0ba 	srai	r16,r16,2
 8005c30:	80001a26 	beq	r16,zero,8005c9c <__pow5mult+0xa0>
 8005c34:	9c401217 	ldw	r17,72(r19)
 8005c38:	8800061e 	bne	r17,zero,8005c54 <__pow5mult+0x58>
 8005c3c:	00003406 	br	8005d10 <__pow5mult+0x114>
 8005c40:	8021d07a 	srai	r16,r16,1
 8005c44:	80001526 	beq	r16,zero,8005c9c <__pow5mult+0xa0>
 8005c48:	88800017 	ldw	r2,0(r17)
 8005c4c:	10001c26 	beq	r2,zero,8005cc0 <__pow5mult+0xc4>
 8005c50:	1023883a 	mov	r17,r2
 8005c54:	8080004c 	andi	r2,r16,1
 8005c58:	103ff926 	beq	r2,zero,8005c40 <__alt_data_end+0xfc005c40>
 8005c5c:	880d883a 	mov	r6,r17
 8005c60:	900b883a 	mov	r5,r18
 8005c64:	9809883a 	mov	r4,r19
 8005c68:	80059700 	call	8005970 <__multiply>
 8005c6c:	90001b26 	beq	r18,zero,8005cdc <__pow5mult+0xe0>
 8005c70:	91000117 	ldw	r4,4(r18)
 8005c74:	98c01317 	ldw	r3,76(r19)
 8005c78:	8021d07a 	srai	r16,r16,1
 8005c7c:	2109883a 	add	r4,r4,r4
 8005c80:	2109883a 	add	r4,r4,r4
 8005c84:	1907883a 	add	r3,r3,r4
 8005c88:	19000017 	ldw	r4,0(r3)
 8005c8c:	91000015 	stw	r4,0(r18)
 8005c90:	1c800015 	stw	r18,0(r3)
 8005c94:	1025883a 	mov	r18,r2
 8005c98:	803feb1e 	bne	r16,zero,8005c48 <__alt_data_end+0xfc005c48>
 8005c9c:	9005883a 	mov	r2,r18
 8005ca0:	dfc00517 	ldw	ra,20(sp)
 8005ca4:	dd000417 	ldw	r20,16(sp)
 8005ca8:	dcc00317 	ldw	r19,12(sp)
 8005cac:	dc800217 	ldw	r18,8(sp)
 8005cb0:	dc400117 	ldw	r17,4(sp)
 8005cb4:	dc000017 	ldw	r16,0(sp)
 8005cb8:	dec00604 	addi	sp,sp,24
 8005cbc:	f800283a 	ret
 8005cc0:	880d883a 	mov	r6,r17
 8005cc4:	880b883a 	mov	r5,r17
 8005cc8:	9809883a 	mov	r4,r19
 8005ccc:	80059700 	call	8005970 <__multiply>
 8005cd0:	88800015 	stw	r2,0(r17)
 8005cd4:	10000015 	stw	zero,0(r2)
 8005cd8:	003fdd06 	br	8005c50 <__alt_data_end+0xfc005c50>
 8005cdc:	1025883a 	mov	r18,r2
 8005ce0:	003fd706 	br	8005c40 <__alt_data_end+0xfc005c40>
 8005ce4:	10bfffc4 	addi	r2,r2,-1
 8005ce8:	1085883a 	add	r2,r2,r2
 8005cec:	00c20074 	movhi	r3,2049
 8005cf0:	18f8f204 	addi	r3,r3,-7224
 8005cf4:	1085883a 	add	r2,r2,r2
 8005cf8:	1885883a 	add	r2,r3,r2
 8005cfc:	11800017 	ldw	r6,0(r2)
 8005d00:	000f883a 	mov	r7,zero
 8005d04:	80055d00 	call	80055d0 <__multadd>
 8005d08:	1025883a 	mov	r18,r2
 8005d0c:	003fc706 	br	8005c2c <__alt_data_end+0xfc005c2c>
 8005d10:	05000044 	movi	r20,1
 8005d14:	a00b883a 	mov	r5,r20
 8005d18:	9809883a 	mov	r4,r19
 8005d1c:	80055000 	call	8005500 <_Balloc>
 8005d20:	1023883a 	mov	r17,r2
 8005d24:	00809c44 	movi	r2,625
 8005d28:	88800515 	stw	r2,20(r17)
 8005d2c:	8d000415 	stw	r20,16(r17)
 8005d30:	9c401215 	stw	r17,72(r19)
 8005d34:	88000015 	stw	zero,0(r17)
 8005d38:	003fc606 	br	8005c54 <__alt_data_end+0xfc005c54>

08005d3c <__lshift>:
 8005d3c:	defff904 	addi	sp,sp,-28
 8005d40:	dd400515 	stw	r21,20(sp)
 8005d44:	dcc00315 	stw	r19,12(sp)
 8005d48:	302bd17a 	srai	r21,r6,5
 8005d4c:	2cc00417 	ldw	r19,16(r5)
 8005d50:	28800217 	ldw	r2,8(r5)
 8005d54:	dd000415 	stw	r20,16(sp)
 8005d58:	ace7883a 	add	r19,r21,r19
 8005d5c:	dc800215 	stw	r18,8(sp)
 8005d60:	dc400115 	stw	r17,4(sp)
 8005d64:	dc000015 	stw	r16,0(sp)
 8005d68:	dfc00615 	stw	ra,24(sp)
 8005d6c:	9c000044 	addi	r16,r19,1
 8005d70:	2823883a 	mov	r17,r5
 8005d74:	3029883a 	mov	r20,r6
 8005d78:	2025883a 	mov	r18,r4
 8005d7c:	29400117 	ldw	r5,4(r5)
 8005d80:	1400030e 	bge	r2,r16,8005d90 <__lshift+0x54>
 8005d84:	1085883a 	add	r2,r2,r2
 8005d88:	29400044 	addi	r5,r5,1
 8005d8c:	143ffd16 	blt	r2,r16,8005d84 <__alt_data_end+0xfc005d84>
 8005d90:	9009883a 	mov	r4,r18
 8005d94:	80055000 	call	8005500 <_Balloc>
 8005d98:	10c00504 	addi	r3,r2,20
 8005d9c:	0540070e 	bge	zero,r21,8005dbc <__lshift+0x80>
 8005da0:	ad6b883a 	add	r21,r21,r21
 8005da4:	ad6b883a 	add	r21,r21,r21
 8005da8:	1809883a 	mov	r4,r3
 8005dac:	1d47883a 	add	r3,r3,r21
 8005db0:	20000015 	stw	zero,0(r4)
 8005db4:	21000104 	addi	r4,r4,4
 8005db8:	193ffd1e 	bne	r3,r4,8005db0 <__alt_data_end+0xfc005db0>
 8005dbc:	8a000417 	ldw	r8,16(r17)
 8005dc0:	89000504 	addi	r4,r17,20
 8005dc4:	a18007cc 	andi	r6,r20,31
 8005dc8:	4211883a 	add	r8,r8,r8
 8005dcc:	4211883a 	add	r8,r8,r8
 8005dd0:	2211883a 	add	r8,r4,r8
 8005dd4:	30002326 	beq	r6,zero,8005e64 <__lshift+0x128>
 8005dd8:	02400804 	movi	r9,32
 8005ddc:	4993c83a 	sub	r9,r9,r6
 8005de0:	000b883a 	mov	r5,zero
 8005de4:	21c00017 	ldw	r7,0(r4)
 8005de8:	1815883a 	mov	r10,r3
 8005dec:	18c00104 	addi	r3,r3,4
 8005df0:	398e983a 	sll	r7,r7,r6
 8005df4:	21000104 	addi	r4,r4,4
 8005df8:	394ab03a 	or	r5,r7,r5
 8005dfc:	197fff15 	stw	r5,-4(r3)
 8005e00:	217fff17 	ldw	r5,-4(r4)
 8005e04:	2a4ad83a 	srl	r5,r5,r9
 8005e08:	223ff636 	bltu	r4,r8,8005de4 <__alt_data_end+0xfc005de4>
 8005e0c:	51400115 	stw	r5,4(r10)
 8005e10:	28001a1e 	bne	r5,zero,8005e7c <__lshift+0x140>
 8005e14:	843fffc4 	addi	r16,r16,-1
 8005e18:	14000415 	stw	r16,16(r2)
 8005e1c:	88000826 	beq	r17,zero,8005e40 <__lshift+0x104>
 8005e20:	89000117 	ldw	r4,4(r17)
 8005e24:	90c01317 	ldw	r3,76(r18)
 8005e28:	2109883a 	add	r4,r4,r4
 8005e2c:	2109883a 	add	r4,r4,r4
 8005e30:	1907883a 	add	r3,r3,r4
 8005e34:	19000017 	ldw	r4,0(r3)
 8005e38:	89000015 	stw	r4,0(r17)
 8005e3c:	1c400015 	stw	r17,0(r3)
 8005e40:	dfc00617 	ldw	ra,24(sp)
 8005e44:	dd400517 	ldw	r21,20(sp)
 8005e48:	dd000417 	ldw	r20,16(sp)
 8005e4c:	dcc00317 	ldw	r19,12(sp)
 8005e50:	dc800217 	ldw	r18,8(sp)
 8005e54:	dc400117 	ldw	r17,4(sp)
 8005e58:	dc000017 	ldw	r16,0(sp)
 8005e5c:	dec00704 	addi	sp,sp,28
 8005e60:	f800283a 	ret
 8005e64:	21400017 	ldw	r5,0(r4)
 8005e68:	18c00104 	addi	r3,r3,4
 8005e6c:	21000104 	addi	r4,r4,4
 8005e70:	197fff15 	stw	r5,-4(r3)
 8005e74:	223ffb36 	bltu	r4,r8,8005e64 <__alt_data_end+0xfc005e64>
 8005e78:	003fe606 	br	8005e14 <__alt_data_end+0xfc005e14>
 8005e7c:	9c000084 	addi	r16,r19,2
 8005e80:	003fe406 	br	8005e14 <__alt_data_end+0xfc005e14>

08005e84 <__mcmp>:
 8005e84:	20800417 	ldw	r2,16(r4)
 8005e88:	28c00417 	ldw	r3,16(r5)
 8005e8c:	10c5c83a 	sub	r2,r2,r3
 8005e90:	1000111e 	bne	r2,zero,8005ed8 <__mcmp+0x54>
 8005e94:	18c7883a 	add	r3,r3,r3
 8005e98:	18c7883a 	add	r3,r3,r3
 8005e9c:	21000504 	addi	r4,r4,20
 8005ea0:	29400504 	addi	r5,r5,20
 8005ea4:	20c5883a 	add	r2,r4,r3
 8005ea8:	28cb883a 	add	r5,r5,r3
 8005eac:	00000106 	br	8005eb4 <__mcmp+0x30>
 8005eb0:	20800a2e 	bgeu	r4,r2,8005edc <__mcmp+0x58>
 8005eb4:	10bfff04 	addi	r2,r2,-4
 8005eb8:	297fff04 	addi	r5,r5,-4
 8005ebc:	11800017 	ldw	r6,0(r2)
 8005ec0:	28c00017 	ldw	r3,0(r5)
 8005ec4:	30fffa26 	beq	r6,r3,8005eb0 <__alt_data_end+0xfc005eb0>
 8005ec8:	30c00236 	bltu	r6,r3,8005ed4 <__mcmp+0x50>
 8005ecc:	00800044 	movi	r2,1
 8005ed0:	f800283a 	ret
 8005ed4:	00bfffc4 	movi	r2,-1
 8005ed8:	f800283a 	ret
 8005edc:	0005883a 	mov	r2,zero
 8005ee0:	f800283a 	ret

08005ee4 <__mdiff>:
 8005ee4:	28c00417 	ldw	r3,16(r5)
 8005ee8:	30800417 	ldw	r2,16(r6)
 8005eec:	defffa04 	addi	sp,sp,-24
 8005ef0:	dcc00315 	stw	r19,12(sp)
 8005ef4:	dc800215 	stw	r18,8(sp)
 8005ef8:	dfc00515 	stw	ra,20(sp)
 8005efc:	dd000415 	stw	r20,16(sp)
 8005f00:	dc400115 	stw	r17,4(sp)
 8005f04:	dc000015 	stw	r16,0(sp)
 8005f08:	1887c83a 	sub	r3,r3,r2
 8005f0c:	2825883a 	mov	r18,r5
 8005f10:	3027883a 	mov	r19,r6
 8005f14:	1800141e 	bne	r3,zero,8005f68 <__mdiff+0x84>
 8005f18:	1085883a 	add	r2,r2,r2
 8005f1c:	1085883a 	add	r2,r2,r2
 8005f20:	2a000504 	addi	r8,r5,20
 8005f24:	34000504 	addi	r16,r6,20
 8005f28:	4087883a 	add	r3,r8,r2
 8005f2c:	8085883a 	add	r2,r16,r2
 8005f30:	00000106 	br	8005f38 <__mdiff+0x54>
 8005f34:	40c0592e 	bgeu	r8,r3,800609c <__mdiff+0x1b8>
 8005f38:	18ffff04 	addi	r3,r3,-4
 8005f3c:	10bfff04 	addi	r2,r2,-4
 8005f40:	19c00017 	ldw	r7,0(r3)
 8005f44:	11400017 	ldw	r5,0(r2)
 8005f48:	397ffa26 	beq	r7,r5,8005f34 <__alt_data_end+0xfc005f34>
 8005f4c:	3940592e 	bgeu	r7,r5,80060b4 <__mdiff+0x1d0>
 8005f50:	9005883a 	mov	r2,r18
 8005f54:	4023883a 	mov	r17,r8
 8005f58:	9825883a 	mov	r18,r19
 8005f5c:	05000044 	movi	r20,1
 8005f60:	1027883a 	mov	r19,r2
 8005f64:	00000406 	br	8005f78 <__mdiff+0x94>
 8005f68:	18005616 	blt	r3,zero,80060c4 <__mdiff+0x1e0>
 8005f6c:	34400504 	addi	r17,r6,20
 8005f70:	2c000504 	addi	r16,r5,20
 8005f74:	0029883a 	mov	r20,zero
 8005f78:	91400117 	ldw	r5,4(r18)
 8005f7c:	80055000 	call	8005500 <_Balloc>
 8005f80:	92400417 	ldw	r9,16(r18)
 8005f84:	9b000417 	ldw	r12,16(r19)
 8005f88:	12c00504 	addi	r11,r2,20
 8005f8c:	4a51883a 	add	r8,r9,r9
 8005f90:	6319883a 	add	r12,r12,r12
 8005f94:	4211883a 	add	r8,r8,r8
 8005f98:	6319883a 	add	r12,r12,r12
 8005f9c:	15000315 	stw	r20,12(r2)
 8005fa0:	8211883a 	add	r8,r16,r8
 8005fa4:	8b19883a 	add	r12,r17,r12
 8005fa8:	0007883a 	mov	r3,zero
 8005fac:	81400017 	ldw	r5,0(r16)
 8005fb0:	89c00017 	ldw	r7,0(r17)
 8005fb4:	59800104 	addi	r6,r11,4
 8005fb8:	293fffcc 	andi	r4,r5,65535
 8005fbc:	20c7883a 	add	r3,r4,r3
 8005fc0:	393fffcc 	andi	r4,r7,65535
 8005fc4:	1909c83a 	sub	r4,r3,r4
 8005fc8:	280ad43a 	srli	r5,r5,16
 8005fcc:	380ed43a 	srli	r7,r7,16
 8005fd0:	2007d43a 	srai	r3,r4,16
 8005fd4:	213fffcc 	andi	r4,r4,65535
 8005fd8:	29cbc83a 	sub	r5,r5,r7
 8005fdc:	28c7883a 	add	r3,r5,r3
 8005fe0:	180a943a 	slli	r5,r3,16
 8005fe4:	8c400104 	addi	r17,r17,4
 8005fe8:	84000104 	addi	r16,r16,4
 8005fec:	2908b03a 	or	r4,r5,r4
 8005ff0:	59000015 	stw	r4,0(r11)
 8005ff4:	1807d43a 	srai	r3,r3,16
 8005ff8:	3015883a 	mov	r10,r6
 8005ffc:	3017883a 	mov	r11,r6
 8006000:	8b3fea36 	bltu	r17,r12,8005fac <__alt_data_end+0xfc005fac>
 8006004:	8200162e 	bgeu	r16,r8,8006060 <__mdiff+0x17c>
 8006008:	8017883a 	mov	r11,r16
 800600c:	59400017 	ldw	r5,0(r11)
 8006010:	31800104 	addi	r6,r6,4
 8006014:	5ac00104 	addi	r11,r11,4
 8006018:	293fffcc 	andi	r4,r5,65535
 800601c:	20c7883a 	add	r3,r4,r3
 8006020:	280ed43a 	srli	r7,r5,16
 8006024:	180bd43a 	srai	r5,r3,16
 8006028:	193fffcc 	andi	r4,r3,65535
 800602c:	3947883a 	add	r3,r7,r5
 8006030:	180a943a 	slli	r5,r3,16
 8006034:	1807d43a 	srai	r3,r3,16
 8006038:	2908b03a 	or	r4,r5,r4
 800603c:	313fff15 	stw	r4,-4(r6)
 8006040:	5a3ff236 	bltu	r11,r8,800600c <__alt_data_end+0xfc00600c>
 8006044:	0406303a 	nor	r3,zero,r16
 8006048:	1a07883a 	add	r3,r3,r8
 800604c:	1806d0ba 	srli	r3,r3,2
 8006050:	18c00044 	addi	r3,r3,1
 8006054:	18c7883a 	add	r3,r3,r3
 8006058:	18c7883a 	add	r3,r3,r3
 800605c:	50d5883a 	add	r10,r10,r3
 8006060:	50ffff04 	addi	r3,r10,-4
 8006064:	2000041e 	bne	r4,zero,8006078 <__mdiff+0x194>
 8006068:	18ffff04 	addi	r3,r3,-4
 800606c:	19000017 	ldw	r4,0(r3)
 8006070:	4a7fffc4 	addi	r9,r9,-1
 8006074:	203ffc26 	beq	r4,zero,8006068 <__alt_data_end+0xfc006068>
 8006078:	12400415 	stw	r9,16(r2)
 800607c:	dfc00517 	ldw	ra,20(sp)
 8006080:	dd000417 	ldw	r20,16(sp)
 8006084:	dcc00317 	ldw	r19,12(sp)
 8006088:	dc800217 	ldw	r18,8(sp)
 800608c:	dc400117 	ldw	r17,4(sp)
 8006090:	dc000017 	ldw	r16,0(sp)
 8006094:	dec00604 	addi	sp,sp,24
 8006098:	f800283a 	ret
 800609c:	000b883a 	mov	r5,zero
 80060a0:	80055000 	call	8005500 <_Balloc>
 80060a4:	00c00044 	movi	r3,1
 80060a8:	10c00415 	stw	r3,16(r2)
 80060ac:	10000515 	stw	zero,20(r2)
 80060b0:	003ff206 	br	800607c <__alt_data_end+0xfc00607c>
 80060b4:	8023883a 	mov	r17,r16
 80060b8:	0029883a 	mov	r20,zero
 80060bc:	4021883a 	mov	r16,r8
 80060c0:	003fad06 	br	8005f78 <__alt_data_end+0xfc005f78>
 80060c4:	9005883a 	mov	r2,r18
 80060c8:	94400504 	addi	r17,r18,20
 80060cc:	9c000504 	addi	r16,r19,20
 80060d0:	9825883a 	mov	r18,r19
 80060d4:	05000044 	movi	r20,1
 80060d8:	1027883a 	mov	r19,r2
 80060dc:	003fa606 	br	8005f78 <__alt_data_end+0xfc005f78>

080060e0 <__ulp>:
 80060e0:	295ffc2c 	andhi	r5,r5,32752
 80060e4:	00bf3034 	movhi	r2,64704
 80060e8:	2887883a 	add	r3,r5,r2
 80060ec:	00c0020e 	bge	zero,r3,80060f8 <__ulp+0x18>
 80060f0:	0005883a 	mov	r2,zero
 80060f4:	f800283a 	ret
 80060f8:	00c7c83a 	sub	r3,zero,r3
 80060fc:	1807d53a 	srai	r3,r3,20
 8006100:	008004c4 	movi	r2,19
 8006104:	10c00b0e 	bge	r2,r3,8006134 <__ulp+0x54>
 8006108:	18bffb04 	addi	r2,r3,-20
 800610c:	01000784 	movi	r4,30
 8006110:	0007883a 	mov	r3,zero
 8006114:	20800516 	blt	r4,r2,800612c <__ulp+0x4c>
 8006118:	010007c4 	movi	r4,31
 800611c:	2089c83a 	sub	r4,r4,r2
 8006120:	00800044 	movi	r2,1
 8006124:	1104983a 	sll	r2,r2,r4
 8006128:	f800283a 	ret
 800612c:	00800044 	movi	r2,1
 8006130:	f800283a 	ret
 8006134:	01400234 	movhi	r5,8
 8006138:	28c7d83a 	sra	r3,r5,r3
 800613c:	0005883a 	mov	r2,zero
 8006140:	f800283a 	ret

08006144 <__b2d>:
 8006144:	defffa04 	addi	sp,sp,-24
 8006148:	dc000015 	stw	r16,0(sp)
 800614c:	24000417 	ldw	r16,16(r4)
 8006150:	dc400115 	stw	r17,4(sp)
 8006154:	24400504 	addi	r17,r4,20
 8006158:	8421883a 	add	r16,r16,r16
 800615c:	8421883a 	add	r16,r16,r16
 8006160:	8c21883a 	add	r16,r17,r16
 8006164:	dc800215 	stw	r18,8(sp)
 8006168:	84bfff17 	ldw	r18,-4(r16)
 800616c:	dd000415 	stw	r20,16(sp)
 8006170:	dcc00315 	stw	r19,12(sp)
 8006174:	9009883a 	mov	r4,r18
 8006178:	2829883a 	mov	r20,r5
 800617c:	dfc00515 	stw	ra,20(sp)
 8006180:	800581c0 	call	800581c <__hi0bits>
 8006184:	00c00804 	movi	r3,32
 8006188:	1889c83a 	sub	r4,r3,r2
 800618c:	a1000015 	stw	r4,0(r20)
 8006190:	01000284 	movi	r4,10
 8006194:	84ffff04 	addi	r19,r16,-4
 8006198:	20801216 	blt	r4,r2,80061e4 <__b2d+0xa0>
 800619c:	018002c4 	movi	r6,11
 80061a0:	308dc83a 	sub	r6,r6,r2
 80061a4:	9186d83a 	srl	r3,r18,r6
 80061a8:	18cffc34 	orhi	r3,r3,16368
 80061ac:	8cc0212e 	bgeu	r17,r19,8006234 <__b2d+0xf0>
 80061b0:	813ffe17 	ldw	r4,-8(r16)
 80061b4:	218cd83a 	srl	r6,r4,r6
 80061b8:	10800544 	addi	r2,r2,21
 80061bc:	9084983a 	sll	r2,r18,r2
 80061c0:	1184b03a 	or	r2,r2,r6
 80061c4:	dfc00517 	ldw	ra,20(sp)
 80061c8:	dd000417 	ldw	r20,16(sp)
 80061cc:	dcc00317 	ldw	r19,12(sp)
 80061d0:	dc800217 	ldw	r18,8(sp)
 80061d4:	dc400117 	ldw	r17,4(sp)
 80061d8:	dc000017 	ldw	r16,0(sp)
 80061dc:	dec00604 	addi	sp,sp,24
 80061e0:	f800283a 	ret
 80061e4:	8cc00f2e 	bgeu	r17,r19,8006224 <__b2d+0xe0>
 80061e8:	117ffd44 	addi	r5,r2,-11
 80061ec:	80bffe17 	ldw	r2,-8(r16)
 80061f0:	28000e26 	beq	r5,zero,800622c <__b2d+0xe8>
 80061f4:	1949c83a 	sub	r4,r3,r5
 80061f8:	9164983a 	sll	r18,r18,r5
 80061fc:	1106d83a 	srl	r3,r2,r4
 8006200:	81bffe04 	addi	r6,r16,-8
 8006204:	948ffc34 	orhi	r18,r18,16368
 8006208:	90c6b03a 	or	r3,r18,r3
 800620c:	89800e2e 	bgeu	r17,r6,8006248 <__b2d+0x104>
 8006210:	81bffd17 	ldw	r6,-12(r16)
 8006214:	1144983a 	sll	r2,r2,r5
 8006218:	310ad83a 	srl	r5,r6,r4
 800621c:	2884b03a 	or	r2,r5,r2
 8006220:	003fe806 	br	80061c4 <__alt_data_end+0xfc0061c4>
 8006224:	10bffd44 	addi	r2,r2,-11
 8006228:	1000041e 	bne	r2,zero,800623c <__b2d+0xf8>
 800622c:	90cffc34 	orhi	r3,r18,16368
 8006230:	003fe406 	br	80061c4 <__alt_data_end+0xfc0061c4>
 8006234:	000d883a 	mov	r6,zero
 8006238:	003fdf06 	br	80061b8 <__alt_data_end+0xfc0061b8>
 800623c:	90a4983a 	sll	r18,r18,r2
 8006240:	0005883a 	mov	r2,zero
 8006244:	003ff906 	br	800622c <__alt_data_end+0xfc00622c>
 8006248:	1144983a 	sll	r2,r2,r5
 800624c:	003fdd06 	br	80061c4 <__alt_data_end+0xfc0061c4>

08006250 <__d2b>:
 8006250:	defff804 	addi	sp,sp,-32
 8006254:	dc000215 	stw	r16,8(sp)
 8006258:	3021883a 	mov	r16,r6
 800625c:	dc400315 	stw	r17,12(sp)
 8006260:	8022907a 	slli	r17,r16,1
 8006264:	dd000615 	stw	r20,24(sp)
 8006268:	2829883a 	mov	r20,r5
 800626c:	01400044 	movi	r5,1
 8006270:	dcc00515 	stw	r19,20(sp)
 8006274:	dc800415 	stw	r18,16(sp)
 8006278:	dfc00715 	stw	ra,28(sp)
 800627c:	3825883a 	mov	r18,r7
 8006280:	8822d57a 	srli	r17,r17,21
 8006284:	80055000 	call	8005500 <_Balloc>
 8006288:	1027883a 	mov	r19,r2
 800628c:	00800434 	movhi	r2,16
 8006290:	10bfffc4 	addi	r2,r2,-1
 8006294:	808c703a 	and	r6,r16,r2
 8006298:	88000126 	beq	r17,zero,80062a0 <__d2b+0x50>
 800629c:	31800434 	orhi	r6,r6,16
 80062a0:	d9800015 	stw	r6,0(sp)
 80062a4:	a0002426 	beq	r20,zero,8006338 <__d2b+0xe8>
 80062a8:	d9000104 	addi	r4,sp,4
 80062ac:	dd000115 	stw	r20,4(sp)
 80062b0:	80058840 	call	8005884 <__lo0bits>
 80062b4:	d8c00017 	ldw	r3,0(sp)
 80062b8:	10002f1e 	bne	r2,zero,8006378 <__d2b+0x128>
 80062bc:	d9000117 	ldw	r4,4(sp)
 80062c0:	99000515 	stw	r4,20(r19)
 80062c4:	1821003a 	cmpeq	r16,r3,zero
 80062c8:	01000084 	movi	r4,2
 80062cc:	2421c83a 	sub	r16,r4,r16
 80062d0:	98c00615 	stw	r3,24(r19)
 80062d4:	9c000415 	stw	r16,16(r19)
 80062d8:	88001f1e 	bne	r17,zero,8006358 <__d2b+0x108>
 80062dc:	10bef384 	addi	r2,r2,-1074
 80062e0:	90800015 	stw	r2,0(r18)
 80062e4:	00900034 	movhi	r2,16384
 80062e8:	10bfffc4 	addi	r2,r2,-1
 80062ec:	8085883a 	add	r2,r16,r2
 80062f0:	1085883a 	add	r2,r2,r2
 80062f4:	1085883a 	add	r2,r2,r2
 80062f8:	9885883a 	add	r2,r19,r2
 80062fc:	11000517 	ldw	r4,20(r2)
 8006300:	8020917a 	slli	r16,r16,5
 8006304:	800581c0 	call	800581c <__hi0bits>
 8006308:	d8c00817 	ldw	r3,32(sp)
 800630c:	8085c83a 	sub	r2,r16,r2
 8006310:	18800015 	stw	r2,0(r3)
 8006314:	9805883a 	mov	r2,r19
 8006318:	dfc00717 	ldw	ra,28(sp)
 800631c:	dd000617 	ldw	r20,24(sp)
 8006320:	dcc00517 	ldw	r19,20(sp)
 8006324:	dc800417 	ldw	r18,16(sp)
 8006328:	dc400317 	ldw	r17,12(sp)
 800632c:	dc000217 	ldw	r16,8(sp)
 8006330:	dec00804 	addi	sp,sp,32
 8006334:	f800283a 	ret
 8006338:	d809883a 	mov	r4,sp
 800633c:	80058840 	call	8005884 <__lo0bits>
 8006340:	d8c00017 	ldw	r3,0(sp)
 8006344:	04000044 	movi	r16,1
 8006348:	9c000415 	stw	r16,16(r19)
 800634c:	98c00515 	stw	r3,20(r19)
 8006350:	10800804 	addi	r2,r2,32
 8006354:	883fe126 	beq	r17,zero,80062dc <__alt_data_end+0xfc0062dc>
 8006358:	00c00d44 	movi	r3,53
 800635c:	8c7ef344 	addi	r17,r17,-1075
 8006360:	88a3883a 	add	r17,r17,r2
 8006364:	1885c83a 	sub	r2,r3,r2
 8006368:	d8c00817 	ldw	r3,32(sp)
 800636c:	94400015 	stw	r17,0(r18)
 8006370:	18800015 	stw	r2,0(r3)
 8006374:	003fe706 	br	8006314 <__alt_data_end+0xfc006314>
 8006378:	01000804 	movi	r4,32
 800637c:	2089c83a 	sub	r4,r4,r2
 8006380:	1908983a 	sll	r4,r3,r4
 8006384:	d9400117 	ldw	r5,4(sp)
 8006388:	1886d83a 	srl	r3,r3,r2
 800638c:	2148b03a 	or	r4,r4,r5
 8006390:	99000515 	stw	r4,20(r19)
 8006394:	d8c00015 	stw	r3,0(sp)
 8006398:	003fca06 	br	80062c4 <__alt_data_end+0xfc0062c4>

0800639c <__ratio>:
 800639c:	defff904 	addi	sp,sp,-28
 80063a0:	dc400315 	stw	r17,12(sp)
 80063a4:	2823883a 	mov	r17,r5
 80063a8:	d9400104 	addi	r5,sp,4
 80063ac:	dfc00615 	stw	ra,24(sp)
 80063b0:	dcc00515 	stw	r19,20(sp)
 80063b4:	dc800415 	stw	r18,16(sp)
 80063b8:	2027883a 	mov	r19,r4
 80063bc:	dc000215 	stw	r16,8(sp)
 80063c0:	80061440 	call	8006144 <__b2d>
 80063c4:	d80b883a 	mov	r5,sp
 80063c8:	8809883a 	mov	r4,r17
 80063cc:	1025883a 	mov	r18,r2
 80063d0:	1821883a 	mov	r16,r3
 80063d4:	80061440 	call	8006144 <__b2d>
 80063d8:	8a000417 	ldw	r8,16(r17)
 80063dc:	99000417 	ldw	r4,16(r19)
 80063e0:	d9400117 	ldw	r5,4(sp)
 80063e4:	2209c83a 	sub	r4,r4,r8
 80063e8:	2010917a 	slli	r8,r4,5
 80063ec:	d9000017 	ldw	r4,0(sp)
 80063f0:	2909c83a 	sub	r4,r5,r4
 80063f4:	4109883a 	add	r4,r8,r4
 80063f8:	01000e0e 	bge	zero,r4,8006434 <__ratio+0x98>
 80063fc:	2008953a 	slli	r4,r4,20
 8006400:	2421883a 	add	r16,r4,r16
 8006404:	100d883a 	mov	r6,r2
 8006408:	180f883a 	mov	r7,r3
 800640c:	9009883a 	mov	r4,r18
 8006410:	800b883a 	mov	r5,r16
 8006414:	8009f3c0 	call	8009f3c <__divdf3>
 8006418:	dfc00617 	ldw	ra,24(sp)
 800641c:	dcc00517 	ldw	r19,20(sp)
 8006420:	dc800417 	ldw	r18,16(sp)
 8006424:	dc400317 	ldw	r17,12(sp)
 8006428:	dc000217 	ldw	r16,8(sp)
 800642c:	dec00704 	addi	sp,sp,28
 8006430:	f800283a 	ret
 8006434:	2008953a 	slli	r4,r4,20
 8006438:	1907c83a 	sub	r3,r3,r4
 800643c:	003ff106 	br	8006404 <__alt_data_end+0xfc006404>

08006440 <_mprec_log10>:
 8006440:	defffe04 	addi	sp,sp,-8
 8006444:	dc000015 	stw	r16,0(sp)
 8006448:	dfc00115 	stw	ra,4(sp)
 800644c:	008005c4 	movi	r2,23
 8006450:	2021883a 	mov	r16,r4
 8006454:	11000d0e 	bge	r2,r4,800648c <_mprec_log10+0x4c>
 8006458:	0005883a 	mov	r2,zero
 800645c:	00cffc34 	movhi	r3,16368
 8006460:	843fffc4 	addi	r16,r16,-1
 8006464:	000d883a 	mov	r6,zero
 8006468:	01d00934 	movhi	r7,16420
 800646c:	1009883a 	mov	r4,r2
 8006470:	180b883a 	mov	r5,r3
 8006474:	800ab640 	call	800ab64 <__muldf3>
 8006478:	803ff91e 	bne	r16,zero,8006460 <__alt_data_end+0xfc006460>
 800647c:	dfc00117 	ldw	ra,4(sp)
 8006480:	dc000017 	ldw	r16,0(sp)
 8006484:	dec00204 	addi	sp,sp,8
 8006488:	f800283a 	ret
 800648c:	202090fa 	slli	r16,r4,3
 8006490:	00820074 	movhi	r2,2049
 8006494:	10b90904 	addi	r2,r2,-7132
 8006498:	1421883a 	add	r16,r2,r16
 800649c:	80800017 	ldw	r2,0(r16)
 80064a0:	80c00117 	ldw	r3,4(r16)
 80064a4:	dfc00117 	ldw	ra,4(sp)
 80064a8:	dc000017 	ldw	r16,0(sp)
 80064ac:	dec00204 	addi	sp,sp,8
 80064b0:	f800283a 	ret

080064b4 <__copybits>:
 80064b4:	297fffc4 	addi	r5,r5,-1
 80064b8:	280fd17a 	srai	r7,r5,5
 80064bc:	30c00417 	ldw	r3,16(r6)
 80064c0:	30800504 	addi	r2,r6,20
 80064c4:	39c00044 	addi	r7,r7,1
 80064c8:	18c7883a 	add	r3,r3,r3
 80064cc:	39cf883a 	add	r7,r7,r7
 80064d0:	18c7883a 	add	r3,r3,r3
 80064d4:	39cf883a 	add	r7,r7,r7
 80064d8:	10c7883a 	add	r3,r2,r3
 80064dc:	21cf883a 	add	r7,r4,r7
 80064e0:	10c00d2e 	bgeu	r2,r3,8006518 <__copybits+0x64>
 80064e4:	200b883a 	mov	r5,r4
 80064e8:	12000017 	ldw	r8,0(r2)
 80064ec:	29400104 	addi	r5,r5,4
 80064f0:	10800104 	addi	r2,r2,4
 80064f4:	2a3fff15 	stw	r8,-4(r5)
 80064f8:	10fffb36 	bltu	r2,r3,80064e8 <__alt_data_end+0xfc0064e8>
 80064fc:	1985c83a 	sub	r2,r3,r6
 8006500:	10bffac4 	addi	r2,r2,-21
 8006504:	1004d0ba 	srli	r2,r2,2
 8006508:	10800044 	addi	r2,r2,1
 800650c:	1085883a 	add	r2,r2,r2
 8006510:	1085883a 	add	r2,r2,r2
 8006514:	2089883a 	add	r4,r4,r2
 8006518:	21c0032e 	bgeu	r4,r7,8006528 <__copybits+0x74>
 800651c:	20000015 	stw	zero,0(r4)
 8006520:	21000104 	addi	r4,r4,4
 8006524:	21fffd36 	bltu	r4,r7,800651c <__alt_data_end+0xfc00651c>
 8006528:	f800283a 	ret

0800652c <__any_on>:
 800652c:	20c00417 	ldw	r3,16(r4)
 8006530:	2805d17a 	srai	r2,r5,5
 8006534:	21000504 	addi	r4,r4,20
 8006538:	18800d0e 	bge	r3,r2,8006570 <__any_on+0x44>
 800653c:	18c7883a 	add	r3,r3,r3
 8006540:	18c7883a 	add	r3,r3,r3
 8006544:	20c7883a 	add	r3,r4,r3
 8006548:	20c0192e 	bgeu	r4,r3,80065b0 <__any_on+0x84>
 800654c:	18bfff17 	ldw	r2,-4(r3)
 8006550:	18ffff04 	addi	r3,r3,-4
 8006554:	1000041e 	bne	r2,zero,8006568 <__any_on+0x3c>
 8006558:	20c0142e 	bgeu	r4,r3,80065ac <__any_on+0x80>
 800655c:	18ffff04 	addi	r3,r3,-4
 8006560:	19400017 	ldw	r5,0(r3)
 8006564:	283ffc26 	beq	r5,zero,8006558 <__alt_data_end+0xfc006558>
 8006568:	00800044 	movi	r2,1
 800656c:	f800283a 	ret
 8006570:	10c00a0e 	bge	r2,r3,800659c <__any_on+0x70>
 8006574:	1085883a 	add	r2,r2,r2
 8006578:	1085883a 	add	r2,r2,r2
 800657c:	294007cc 	andi	r5,r5,31
 8006580:	2087883a 	add	r3,r4,r2
 8006584:	283ff026 	beq	r5,zero,8006548 <__alt_data_end+0xfc006548>
 8006588:	19800017 	ldw	r6,0(r3)
 800658c:	3144d83a 	srl	r2,r6,r5
 8006590:	114a983a 	sll	r5,r2,r5
 8006594:	317ff41e 	bne	r6,r5,8006568 <__alt_data_end+0xfc006568>
 8006598:	003feb06 	br	8006548 <__alt_data_end+0xfc006548>
 800659c:	1085883a 	add	r2,r2,r2
 80065a0:	1085883a 	add	r2,r2,r2
 80065a4:	2087883a 	add	r3,r4,r2
 80065a8:	003fe706 	br	8006548 <__alt_data_end+0xfc006548>
 80065ac:	f800283a 	ret
 80065b0:	0005883a 	mov	r2,zero
 80065b4:	f800283a 	ret

080065b8 <__fpclassifyd>:
 80065b8:	00a00034 	movhi	r2,32768
 80065bc:	10bfffc4 	addi	r2,r2,-1
 80065c0:	2884703a 	and	r2,r5,r2
 80065c4:	10000726 	beq	r2,zero,80065e4 <__fpclassifyd+0x2c>
 80065c8:	00fffc34 	movhi	r3,65520
 80065cc:	019ff834 	movhi	r6,32736
 80065d0:	28c7883a 	add	r3,r5,r3
 80065d4:	31bfffc4 	addi	r6,r6,-1
 80065d8:	30c00536 	bltu	r6,r3,80065f0 <__fpclassifyd+0x38>
 80065dc:	00800104 	movi	r2,4
 80065e0:	f800283a 	ret
 80065e4:	2000021e 	bne	r4,zero,80065f0 <__fpclassifyd+0x38>
 80065e8:	00800084 	movi	r2,2
 80065ec:	f800283a 	ret
 80065f0:	00dffc34 	movhi	r3,32752
 80065f4:	019ff834 	movhi	r6,32736
 80065f8:	28cb883a 	add	r5,r5,r3
 80065fc:	31bfffc4 	addi	r6,r6,-1
 8006600:	317ff62e 	bgeu	r6,r5,80065dc <__alt_data_end+0xfc0065dc>
 8006604:	01400434 	movhi	r5,16
 8006608:	297fffc4 	addi	r5,r5,-1
 800660c:	28800236 	bltu	r5,r2,8006618 <__fpclassifyd+0x60>
 8006610:	008000c4 	movi	r2,3
 8006614:	f800283a 	ret
 8006618:	10c00226 	beq	r2,r3,8006624 <__fpclassifyd+0x6c>
 800661c:	0005883a 	mov	r2,zero
 8006620:	f800283a 	ret
 8006624:	2005003a 	cmpeq	r2,r4,zero
 8006628:	f800283a 	ret

0800662c <_sbrk_r>:
 800662c:	defffd04 	addi	sp,sp,-12
 8006630:	dc000015 	stw	r16,0(sp)
 8006634:	04020074 	movhi	r16,2049
 8006638:	dc400115 	stw	r17,4(sp)
 800663c:	84087e04 	addi	r16,r16,8696
 8006640:	2023883a 	mov	r17,r4
 8006644:	2809883a 	mov	r4,r5
 8006648:	dfc00215 	stw	ra,8(sp)
 800664c:	80000015 	stw	zero,0(r16)
 8006650:	800c0e40 	call	800c0e4 <sbrk>
 8006654:	00ffffc4 	movi	r3,-1
 8006658:	10c00526 	beq	r2,r3,8006670 <_sbrk_r+0x44>
 800665c:	dfc00217 	ldw	ra,8(sp)
 8006660:	dc400117 	ldw	r17,4(sp)
 8006664:	dc000017 	ldw	r16,0(sp)
 8006668:	dec00304 	addi	sp,sp,12
 800666c:	f800283a 	ret
 8006670:	80c00017 	ldw	r3,0(r16)
 8006674:	183ff926 	beq	r3,zero,800665c <__alt_data_end+0xfc00665c>
 8006678:	88c00015 	stw	r3,0(r17)
 800667c:	003ff706 	br	800665c <__alt_data_end+0xfc00665c>

08006680 <strcmp>:
 8006680:	2144b03a 	or	r2,r4,r5
 8006684:	108000cc 	andi	r2,r2,3
 8006688:	1000171e 	bne	r2,zero,80066e8 <strcmp+0x68>
 800668c:	20800017 	ldw	r2,0(r4)
 8006690:	28c00017 	ldw	r3,0(r5)
 8006694:	10c0141e 	bne	r2,r3,80066e8 <strcmp+0x68>
 8006698:	027fbff4 	movhi	r9,65279
 800669c:	4a7fbfc4 	addi	r9,r9,-257
 80066a0:	0086303a 	nor	r3,zero,r2
 80066a4:	02202074 	movhi	r8,32897
 80066a8:	1245883a 	add	r2,r2,r9
 80066ac:	42202004 	addi	r8,r8,-32640
 80066b0:	10c4703a 	and	r2,r2,r3
 80066b4:	1204703a 	and	r2,r2,r8
 80066b8:	10000226 	beq	r2,zero,80066c4 <strcmp+0x44>
 80066bc:	00002306 	br	800674c <strcmp+0xcc>
 80066c0:	1000221e 	bne	r2,zero,800674c <strcmp+0xcc>
 80066c4:	21000104 	addi	r4,r4,4
 80066c8:	20c00017 	ldw	r3,0(r4)
 80066cc:	29400104 	addi	r5,r5,4
 80066d0:	29800017 	ldw	r6,0(r5)
 80066d4:	1a4f883a 	add	r7,r3,r9
 80066d8:	00c4303a 	nor	r2,zero,r3
 80066dc:	3884703a 	and	r2,r7,r2
 80066e0:	1204703a 	and	r2,r2,r8
 80066e4:	19bff626 	beq	r3,r6,80066c0 <__alt_data_end+0xfc0066c0>
 80066e8:	20800003 	ldbu	r2,0(r4)
 80066ec:	10c03fcc 	andi	r3,r2,255
 80066f0:	18c0201c 	xori	r3,r3,128
 80066f4:	18ffe004 	addi	r3,r3,-128
 80066f8:	18000c26 	beq	r3,zero,800672c <strcmp+0xac>
 80066fc:	29800007 	ldb	r6,0(r5)
 8006700:	19800326 	beq	r3,r6,8006710 <strcmp+0x90>
 8006704:	00001306 	br	8006754 <strcmp+0xd4>
 8006708:	29800007 	ldb	r6,0(r5)
 800670c:	11800b1e 	bne	r2,r6,800673c <strcmp+0xbc>
 8006710:	21000044 	addi	r4,r4,1
 8006714:	20c00003 	ldbu	r3,0(r4)
 8006718:	29400044 	addi	r5,r5,1
 800671c:	18803fcc 	andi	r2,r3,255
 8006720:	1080201c 	xori	r2,r2,128
 8006724:	10bfe004 	addi	r2,r2,-128
 8006728:	103ff71e 	bne	r2,zero,8006708 <__alt_data_end+0xfc006708>
 800672c:	0007883a 	mov	r3,zero
 8006730:	28800003 	ldbu	r2,0(r5)
 8006734:	1885c83a 	sub	r2,r3,r2
 8006738:	f800283a 	ret
 800673c:	28800003 	ldbu	r2,0(r5)
 8006740:	18c03fcc 	andi	r3,r3,255
 8006744:	1885c83a 	sub	r2,r3,r2
 8006748:	f800283a 	ret
 800674c:	0005883a 	mov	r2,zero
 8006750:	f800283a 	ret
 8006754:	10c03fcc 	andi	r3,r2,255
 8006758:	003ff506 	br	8006730 <__alt_data_end+0xfc006730>

0800675c <__ssprint_r>:
 800675c:	30800217 	ldw	r2,8(r6)
 8006760:	defff604 	addi	sp,sp,-40
 8006764:	dc800215 	stw	r18,8(sp)
 8006768:	dfc00915 	stw	ra,36(sp)
 800676c:	df000815 	stw	fp,32(sp)
 8006770:	ddc00715 	stw	r23,28(sp)
 8006774:	dd800615 	stw	r22,24(sp)
 8006778:	dd400515 	stw	r21,20(sp)
 800677c:	dd000415 	stw	r20,16(sp)
 8006780:	dcc00315 	stw	r19,12(sp)
 8006784:	dc400115 	stw	r17,4(sp)
 8006788:	dc000015 	stw	r16,0(sp)
 800678c:	3025883a 	mov	r18,r6
 8006790:	10005826 	beq	r2,zero,80068f4 <__ssprint_r+0x198>
 8006794:	2027883a 	mov	r19,r4
 8006798:	35c00017 	ldw	r23,0(r6)
 800679c:	29000017 	ldw	r4,0(r5)
 80067a0:	28800217 	ldw	r2,8(r5)
 80067a4:	2823883a 	mov	r17,r5
 80067a8:	0039883a 	mov	fp,zero
 80067ac:	0021883a 	mov	r16,zero
 80067b0:	80003926 	beq	r16,zero,8006898 <__ssprint_r+0x13c>
 80067b4:	102b883a 	mov	r21,r2
 80067b8:	102d883a 	mov	r22,r2
 80067bc:	80803a36 	bltu	r16,r2,80068a8 <__ssprint_r+0x14c>
 80067c0:	88c0030b 	ldhu	r3,12(r17)
 80067c4:	1881200c 	andi	r2,r3,1152
 80067c8:	10002626 	beq	r2,zero,8006864 <__ssprint_r+0x108>
 80067cc:	88800517 	ldw	r2,20(r17)
 80067d0:	89400417 	ldw	r5,16(r17)
 80067d4:	81800044 	addi	r6,r16,1
 80067d8:	108f883a 	add	r7,r2,r2
 80067dc:	3885883a 	add	r2,r7,r2
 80067e0:	100ed7fa 	srli	r7,r2,31
 80067e4:	216dc83a 	sub	r22,r4,r5
 80067e8:	3589883a 	add	r4,r6,r22
 80067ec:	3885883a 	add	r2,r7,r2
 80067f0:	102bd07a 	srai	r21,r2,1
 80067f4:	a80d883a 	mov	r6,r21
 80067f8:	a900022e 	bgeu	r21,r4,8006804 <__ssprint_r+0xa8>
 80067fc:	202b883a 	mov	r21,r4
 8006800:	200d883a 	mov	r6,r4
 8006804:	18c1000c 	andi	r3,r3,1024
 8006808:	18002a26 	beq	r3,zero,80068b4 <__ssprint_r+0x158>
 800680c:	300b883a 	mov	r5,r6
 8006810:	9809883a 	mov	r4,r19
 8006814:	8004ac80 	call	8004ac8 <_malloc_r>
 8006818:	1029883a 	mov	r20,r2
 800681c:	10002c26 	beq	r2,zero,80068d0 <__ssprint_r+0x174>
 8006820:	89400417 	ldw	r5,16(r17)
 8006824:	b00d883a 	mov	r6,r22
 8006828:	1009883a 	mov	r4,r2
 800682c:	80053b80 	call	80053b8 <memcpy>
 8006830:	8880030b 	ldhu	r2,12(r17)
 8006834:	00fedfc4 	movi	r3,-1153
 8006838:	10c4703a 	and	r2,r2,r3
 800683c:	10802014 	ori	r2,r2,128
 8006840:	8880030d 	sth	r2,12(r17)
 8006844:	a589883a 	add	r4,r20,r22
 8006848:	adadc83a 	sub	r22,r21,r22
 800684c:	8d400515 	stw	r21,20(r17)
 8006850:	8d800215 	stw	r22,8(r17)
 8006854:	8d000415 	stw	r20,16(r17)
 8006858:	89000015 	stw	r4,0(r17)
 800685c:	802b883a 	mov	r21,r16
 8006860:	802d883a 	mov	r22,r16
 8006864:	b00d883a 	mov	r6,r22
 8006868:	e00b883a 	mov	r5,fp
 800686c:	80081dc0 	call	80081dc <memmove>
 8006870:	88800217 	ldw	r2,8(r17)
 8006874:	89000017 	ldw	r4,0(r17)
 8006878:	90c00217 	ldw	r3,8(r18)
 800687c:	1545c83a 	sub	r2,r2,r21
 8006880:	2589883a 	add	r4,r4,r22
 8006884:	88800215 	stw	r2,8(r17)
 8006888:	89000015 	stw	r4,0(r17)
 800688c:	1c21c83a 	sub	r16,r3,r16
 8006890:	94000215 	stw	r16,8(r18)
 8006894:	80001726 	beq	r16,zero,80068f4 <__ssprint_r+0x198>
 8006898:	bf000017 	ldw	fp,0(r23)
 800689c:	bc000117 	ldw	r16,4(r23)
 80068a0:	bdc00204 	addi	r23,r23,8
 80068a4:	003fc206 	br	80067b0 <__alt_data_end+0xfc0067b0>
 80068a8:	802b883a 	mov	r21,r16
 80068ac:	802d883a 	mov	r22,r16
 80068b0:	003fec06 	br	8006864 <__alt_data_end+0xfc006864>
 80068b4:	9809883a 	mov	r4,r19
 80068b8:	80084600 	call	8008460 <_realloc_r>
 80068bc:	1029883a 	mov	r20,r2
 80068c0:	103fe01e 	bne	r2,zero,8006844 <__alt_data_end+0xfc006844>
 80068c4:	89400417 	ldw	r5,16(r17)
 80068c8:	9809883a 	mov	r4,r19
 80068cc:	8007ecc0 	call	8007ecc <_free_r>
 80068d0:	88c0030b 	ldhu	r3,12(r17)
 80068d4:	00800304 	movi	r2,12
 80068d8:	98800015 	stw	r2,0(r19)
 80068dc:	18c01014 	ori	r3,r3,64
 80068e0:	88c0030d 	sth	r3,12(r17)
 80068e4:	00bfffc4 	movi	r2,-1
 80068e8:	90000215 	stw	zero,8(r18)
 80068ec:	90000115 	stw	zero,4(r18)
 80068f0:	00000206 	br	80068fc <__ssprint_r+0x1a0>
 80068f4:	90000115 	stw	zero,4(r18)
 80068f8:	0005883a 	mov	r2,zero
 80068fc:	dfc00917 	ldw	ra,36(sp)
 8006900:	df000817 	ldw	fp,32(sp)
 8006904:	ddc00717 	ldw	r23,28(sp)
 8006908:	dd800617 	ldw	r22,24(sp)
 800690c:	dd400517 	ldw	r21,20(sp)
 8006910:	dd000417 	ldw	r20,16(sp)
 8006914:	dcc00317 	ldw	r19,12(sp)
 8006918:	dc800217 	ldw	r18,8(sp)
 800691c:	dc400117 	ldw	r17,4(sp)
 8006920:	dc000017 	ldw	r16,0(sp)
 8006924:	dec00a04 	addi	sp,sp,40
 8006928:	f800283a 	ret

0800692c <___svfiprintf_internal_r>:
 800692c:	2880030b 	ldhu	r2,12(r5)
 8006930:	deffc804 	addi	sp,sp,-224
 8006934:	dcc03115 	stw	r19,196(sp)
 8006938:	dfc03715 	stw	ra,220(sp)
 800693c:	df003615 	stw	fp,216(sp)
 8006940:	ddc03515 	stw	r23,212(sp)
 8006944:	dd803415 	stw	r22,208(sp)
 8006948:	dd403315 	stw	r21,204(sp)
 800694c:	dd003215 	stw	r20,200(sp)
 8006950:	dc803015 	stw	r18,192(sp)
 8006954:	dc402f15 	stw	r17,188(sp)
 8006958:	dc002e15 	stw	r16,184(sp)
 800695c:	d9402315 	stw	r5,140(sp)
 8006960:	d9002715 	stw	r4,156(sp)
 8006964:	1080200c 	andi	r2,r2,128
 8006968:	d9c02415 	stw	r7,144(sp)
 800696c:	3027883a 	mov	r19,r6
 8006970:	10000226 	beq	r2,zero,800697c <___svfiprintf_internal_r+0x50>
 8006974:	28800417 	ldw	r2,16(r5)
 8006978:	10046d26 	beq	r2,zero,8007b30 <___svfiprintf_internal_r+0x1204>
 800697c:	d8801a04 	addi	r2,sp,104
 8006980:	d8c019c4 	addi	r3,sp,103
 8006984:	05820074 	movhi	r22,2049
 8006988:	10c9c83a 	sub	r4,r2,r3
 800698c:	b5b93b04 	addi	r22,r22,-6932
 8006990:	d8801e15 	stw	r2,120(sp)
 8006994:	d8c01f15 	stw	r3,124(sp)
 8006998:	dec01a15 	stw	sp,104(sp)
 800699c:	d8001c15 	stw	zero,112(sp)
 80069a0:	d8001b15 	stw	zero,108(sp)
 80069a4:	d811883a 	mov	r8,sp
 80069a8:	d8002915 	stw	zero,164(sp)
 80069ac:	d8002615 	stw	zero,152(sp)
 80069b0:	d9002c15 	stw	r4,176(sp)
 80069b4:	98800007 	ldb	r2,0(r19)
 80069b8:	10031426 	beq	r2,zero,800760c <___svfiprintf_internal_r+0xce0>
 80069bc:	00c00944 	movi	r3,37
 80069c0:	9825883a 	mov	r18,r19
 80069c4:	10c0021e 	bne	r2,r3,80069d0 <___svfiprintf_internal_r+0xa4>
 80069c8:	00001406 	br	8006a1c <___svfiprintf_internal_r+0xf0>
 80069cc:	10c00326 	beq	r2,r3,80069dc <___svfiprintf_internal_r+0xb0>
 80069d0:	94800044 	addi	r18,r18,1
 80069d4:	90800007 	ldb	r2,0(r18)
 80069d8:	103ffc1e 	bne	r2,zero,80069cc <__alt_data_end+0xfc0069cc>
 80069dc:	94e1c83a 	sub	r16,r18,r19
 80069e0:	80000e26 	beq	r16,zero,8006a1c <___svfiprintf_internal_r+0xf0>
 80069e4:	d8c01c17 	ldw	r3,112(sp)
 80069e8:	d8801b17 	ldw	r2,108(sp)
 80069ec:	44c00015 	stw	r19,0(r8)
 80069f0:	1c07883a 	add	r3,r3,r16
 80069f4:	10800044 	addi	r2,r2,1
 80069f8:	d8c01c15 	stw	r3,112(sp)
 80069fc:	44000115 	stw	r16,4(r8)
 8006a00:	d8801b15 	stw	r2,108(sp)
 8006a04:	00c001c4 	movi	r3,7
 8006a08:	18835c16 	blt	r3,r2,800777c <___svfiprintf_internal_r+0xe50>
 8006a0c:	42000204 	addi	r8,r8,8
 8006a10:	d9402617 	ldw	r5,152(sp)
 8006a14:	2c0b883a 	add	r5,r5,r16
 8006a18:	d9402615 	stw	r5,152(sp)
 8006a1c:	90800007 	ldb	r2,0(r18)
 8006a20:	1002fc26 	beq	r2,zero,8007614 <___svfiprintf_internal_r+0xce8>
 8006a24:	0023883a 	mov	r17,zero
 8006a28:	00bfffc4 	movi	r2,-1
 8006a2c:	0021883a 	mov	r16,zero
 8006a30:	94c00044 	addi	r19,r18,1
 8006a34:	90c00047 	ldb	r3,1(r18)
 8006a38:	dc402105 	stb	r17,132(sp)
 8006a3c:	d8001d85 	stb	zero,118(sp)
 8006a40:	002b883a 	mov	r21,zero
 8006a44:	d8802015 	stw	r2,128(sp)
 8006a48:	d8002515 	stw	zero,148(sp)
 8006a4c:	04801604 	movi	r18,88
 8006a50:	05000244 	movi	r20,9
 8006a54:	402f883a 	mov	r23,r8
 8006a58:	8023883a 	mov	r17,r16
 8006a5c:	9cc00044 	addi	r19,r19,1
 8006a60:	18bff804 	addi	r2,r3,-32
 8006a64:	9081fb36 	bltu	r18,r2,8007254 <___svfiprintf_internal_r+0x928>
 8006a68:	100490ba 	slli	r2,r2,2
 8006a6c:	01020034 	movhi	r4,2048
 8006a70:	211aa004 	addi	r4,r4,27264
 8006a74:	1105883a 	add	r2,r2,r4
 8006a78:	10800017 	ldw	r2,0(r2)
 8006a7c:	1000683a 	jmp	r2
 8006a80:	08006c80 	call	8006c8 <__alt_mem_onchip_memory2_0+0x8006c8>
 8006a84:	08007254 	ori	zero,at,457
 8006a88:	08007254 	ori	zero,at,457
 8006a8c:	08006c74 	orhi	zero,at,433
 8006a90:	08007254 	ori	zero,at,457
 8006a94:	08007254 	ori	zero,at,457
 8006a98:	08007254 	ori	zero,at,457
 8006a9c:	08007254 	ori	zero,at,457
 8006aa0:	08007254 	ori	zero,at,457
 8006aa4:	08007254 	ori	zero,at,457
 8006aa8:	08006be4 	muli	zero,at,431
 8006aac:	08006de0 	cmpeqi	zero,at,439
 8006ab0:	08007254 	ori	zero,at,457
 8006ab4:	08006c0c 	andi	zero,at,432
 8006ab8:	08007290 	cmplti	zero,at,458
 8006abc:	08007254 	ori	zero,at,457
 8006ac0:	08007284 	addi	zero,at,458
 8006ac4:	08007218 	cmpnei	zero,at,456
 8006ac8:	08007218 	cmpnei	zero,at,456
 8006acc:	08007218 	cmpnei	zero,at,456
 8006ad0:	08007218 	cmpnei	zero,at,456
 8006ad4:	08007218 	cmpnei	zero,at,456
 8006ad8:	08007218 	cmpnei	zero,at,456
 8006adc:	08007218 	cmpnei	zero,at,456
 8006ae0:	08007218 	cmpnei	zero,at,456
 8006ae4:	08007218 	cmpnei	zero,at,456
 8006ae8:	08007254 	ori	zero,at,457
 8006aec:	08007254 	ori	zero,at,457
 8006af0:	08007254 	ori	zero,at,457
 8006af4:	08007254 	ori	zero,at,457
 8006af8:	08007254 	ori	zero,at,457
 8006afc:	08007254 	ori	zero,at,457
 8006b00:	08007254 	ori	zero,at,457
 8006b04:	08007254 	ori	zero,at,457
 8006b08:	08007254 	ori	zero,at,457
 8006b0c:	08007254 	ori	zero,at,457
 8006b10:	0800719c 	xori	zero,at,454
 8006b14:	08007254 	ori	zero,at,457
 8006b18:	08007254 	ori	zero,at,457
 8006b1c:	08007254 	ori	zero,at,457
 8006b20:	08007254 	ori	zero,at,457
 8006b24:	08007254 	ori	zero,at,457
 8006b28:	08007254 	ori	zero,at,457
 8006b2c:	08007254 	ori	zero,at,457
 8006b30:	08007254 	ori	zero,at,457
 8006b34:	08007254 	ori	zero,at,457
 8006b38:	08007254 	ori	zero,at,457
 8006b3c:	0800734c 	andi	zero,at,461
 8006b40:	08007254 	ori	zero,at,457
 8006b44:	08007254 	ori	zero,at,457
 8006b48:	08007254 	ori	zero,at,457
 8006b4c:	08007254 	ori	zero,at,457
 8006b50:	08007254 	ori	zero,at,457
 8006b54:	080072d8 	cmpnei	zero,at,459
 8006b58:	08007254 	ori	zero,at,457
 8006b5c:	08007254 	ori	zero,at,457
 8006b60:	08006fd8 	cmpnei	zero,at,447
 8006b64:	08007254 	ori	zero,at,457
 8006b68:	08007254 	ori	zero,at,457
 8006b6c:	08007254 	ori	zero,at,457
 8006b70:	08007254 	ori	zero,at,457
 8006b74:	08007254 	ori	zero,at,457
 8006b78:	08007254 	ori	zero,at,457
 8006b7c:	08007254 	ori	zero,at,457
 8006b80:	08007254 	ori	zero,at,457
 8006b84:	08007254 	ori	zero,at,457
 8006b88:	08007254 	ori	zero,at,457
 8006b8c:	08006ea4 	muli	zero,at,442
 8006b90:	08007088 	cmpgei	zero,at,450
 8006b94:	08007254 	ori	zero,at,457
 8006b98:	08007254 	ori	zero,at,457
 8006b9c:	08007254 	ori	zero,at,457
 8006ba0:	0800707c 	xorhi	zero,at,449
 8006ba4:	08007088 	cmpgei	zero,at,450
 8006ba8:	08007254 	ori	zero,at,457
 8006bac:	08007254 	ori	zero,at,457
 8006bb0:	08007068 	cmpgeui	zero,at,449
 8006bb4:	08007254 	ori	zero,at,457
 8006bb8:	08007028 	cmpgeui	zero,at,448
 8006bbc:	08006df4 	orhi	zero,at,439
 8006bc0:	08006c18 	cmpnei	zero,at,432
 8006bc4:	08007190 	cmplti	zero,at,454
 8006bc8:	08007254 	ori	zero,at,457
 8006bcc:	0800713c 	xorhi	zero,at,452
 8006bd0:	08007254 	ori	zero,at,457
 8006bd4:	08006d58 	cmpnei	zero,at,437
 8006bd8:	08007254 	ori	zero,at,457
 8006bdc:	08007254 	ori	zero,at,457
 8006be0:	08006ca4 	muli	zero,at,434
 8006be4:	d9002417 	ldw	r4,144(sp)
 8006be8:	d9402417 	ldw	r5,144(sp)
 8006bec:	21000017 	ldw	r4,0(r4)
 8006bf0:	28800104 	addi	r2,r5,4
 8006bf4:	d9002515 	stw	r4,148(sp)
 8006bf8:	20032b0e 	bge	r4,zero,80078a8 <___svfiprintf_internal_r+0xf7c>
 8006bfc:	d8c02517 	ldw	r3,148(sp)
 8006c00:	d8802415 	stw	r2,144(sp)
 8006c04:	00c7c83a 	sub	r3,zero,r3
 8006c08:	d8c02515 	stw	r3,148(sp)
 8006c0c:	8c400114 	ori	r17,r17,4
 8006c10:	98c00007 	ldb	r3,0(r19)
 8006c14:	003f9106 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8006c18:	00800c04 	movi	r2,48
 8006c1c:	d9402417 	ldw	r5,144(sp)
 8006c20:	d9002017 	ldw	r4,128(sp)
 8006c24:	d8801d05 	stb	r2,116(sp)
 8006c28:	00801e04 	movi	r2,120
 8006c2c:	d8801d45 	stb	r2,117(sp)
 8006c30:	d8001d85 	stb	zero,118(sp)
 8006c34:	b811883a 	mov	r8,r23
 8006c38:	28c00104 	addi	r3,r5,4
 8006c3c:	2c800017 	ldw	r18,0(r5)
 8006c40:	0029883a 	mov	r20,zero
 8006c44:	88800094 	ori	r2,r17,2
 8006c48:	20036316 	blt	r4,zero,80079d8 <___svfiprintf_internal_r+0x10ac>
 8006c4c:	00bfdfc4 	movi	r2,-129
 8006c50:	88a0703a 	and	r16,r17,r2
 8006c54:	d8c02415 	stw	r3,144(sp)
 8006c58:	84000094 	ori	r16,r16,2
 8006c5c:	90031c26 	beq	r18,zero,80078d0 <___svfiprintf_internal_r+0xfa4>
 8006c60:	01420074 	movhi	r5,2049
 8006c64:	2978da04 	addi	r5,r5,-7320
 8006c68:	002b883a 	mov	r21,zero
 8006c6c:	d9402915 	stw	r5,164(sp)
 8006c70:	00002906 	br	8006d18 <___svfiprintf_internal_r+0x3ec>
 8006c74:	8c400054 	ori	r17,r17,1
 8006c78:	98c00007 	ldb	r3,0(r19)
 8006c7c:	003f7706 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8006c80:	a8803fcc 	andi	r2,r21,255
 8006c84:	1080201c 	xori	r2,r2,128
 8006c88:	10bfe004 	addi	r2,r2,-128
 8006c8c:	10032a1e 	bne	r2,zero,8007938 <___svfiprintf_internal_r+0x100c>
 8006c90:	00c00044 	movi	r3,1
 8006c94:	d8c02105 	stb	r3,132(sp)
 8006c98:	05400804 	movi	r21,32
 8006c9c:	98c00007 	ldb	r3,0(r19)
 8006ca0:	003f6e06 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8006ca4:	8821883a 	mov	r16,r17
 8006ca8:	dc402103 	ldbu	r17,132(sp)
 8006cac:	b811883a 	mov	r8,r23
 8006cb0:	8c403fcc 	andi	r17,r17,255
 8006cb4:	8803f01e 	bne	r17,zero,8007c78 <___svfiprintf_internal_r+0x134c>
 8006cb8:	00820074 	movhi	r2,2049
 8006cbc:	10b8da04 	addi	r2,r2,-7320
 8006cc0:	d8802915 	stw	r2,164(sp)
 8006cc4:	8080080c 	andi	r2,r16,32
 8006cc8:	1000cd26 	beq	r2,zero,8007000 <___svfiprintf_internal_r+0x6d4>
 8006ccc:	d9002417 	ldw	r4,144(sp)
 8006cd0:	24800017 	ldw	r18,0(r4)
 8006cd4:	25000117 	ldw	r20,4(r4)
 8006cd8:	21000204 	addi	r4,r4,8
 8006cdc:	d9002415 	stw	r4,144(sp)
 8006ce0:	8080004c 	andi	r2,r16,1
 8006ce4:	1002c726 	beq	r2,zero,8007804 <___svfiprintf_internal_r+0xed8>
 8006ce8:	9504b03a 	or	r2,r18,r20
 8006cec:	1003061e 	bne	r2,zero,8007908 <___svfiprintf_internal_r+0xfdc>
 8006cf0:	d9002017 	ldw	r4,128(sp)
 8006cf4:	d8001d85 	stb	zero,118(sp)
 8006cf8:	20033e16 	blt	r4,zero,80079f4 <___svfiprintf_internal_r+0x10c8>
 8006cfc:	00bfdfc4 	movi	r2,-129
 8006d00:	80a0703a 	and	r16,r16,r2
 8006d04:	d9402017 	ldw	r5,128(sp)
 8006d08:	002b883a 	mov	r21,zero
 8006d0c:	28002826 	beq	r5,zero,8006db0 <___svfiprintf_internal_r+0x484>
 8006d10:	0025883a 	mov	r18,zero
 8006d14:	0029883a 	mov	r20,zero
 8006d18:	d9002917 	ldw	r4,164(sp)
 8006d1c:	dc401a04 	addi	r17,sp,104
 8006d20:	908003cc 	andi	r2,r18,15
 8006d24:	a006973a 	slli	r3,r20,28
 8006d28:	2085883a 	add	r2,r4,r2
 8006d2c:	9024d13a 	srli	r18,r18,4
 8006d30:	10800003 	ldbu	r2,0(r2)
 8006d34:	a028d13a 	srli	r20,r20,4
 8006d38:	8c7fffc4 	addi	r17,r17,-1
 8006d3c:	1ca4b03a 	or	r18,r3,r18
 8006d40:	88800005 	stb	r2,0(r17)
 8006d44:	9504b03a 	or	r2,r18,r20
 8006d48:	103ff51e 	bne	r2,zero,8006d20 <__alt_data_end+0xfc006d20>
 8006d4c:	d8801e17 	ldw	r2,120(sp)
 8006d50:	1469c83a 	sub	r20,r2,r17
 8006d54:	00001906 	br	8006dbc <___svfiprintf_internal_r+0x490>
 8006d58:	8821883a 	mov	r16,r17
 8006d5c:	dc402103 	ldbu	r17,132(sp)
 8006d60:	b811883a 	mov	r8,r23
 8006d64:	8c403fcc 	andi	r17,r17,255
 8006d68:	8803d01e 	bne	r17,zero,8007cac <___svfiprintf_internal_r+0x1380>
 8006d6c:	8080080c 	andi	r2,r16,32
 8006d70:	10016126 	beq	r2,zero,80072f8 <___svfiprintf_internal_r+0x9cc>
 8006d74:	d9002417 	ldw	r4,144(sp)
 8006d78:	d9402017 	ldw	r5,128(sp)
 8006d7c:	d8001d85 	stb	zero,118(sp)
 8006d80:	20c00204 	addi	r3,r4,8
 8006d84:	24800017 	ldw	r18,0(r4)
 8006d88:	25000117 	ldw	r20,4(r4)
 8006d8c:	28030f16 	blt	r5,zero,80079cc <___svfiprintf_internal_r+0x10a0>
 8006d90:	013fdfc4 	movi	r4,-129
 8006d94:	9504b03a 	or	r2,r18,r20
 8006d98:	d8c02415 	stw	r3,144(sp)
 8006d9c:	8120703a 	and	r16,r16,r4
 8006da0:	002b883a 	mov	r21,zero
 8006da4:	1000cd1e 	bne	r2,zero,80070dc <___svfiprintf_internal_r+0x7b0>
 8006da8:	d8c02017 	ldw	r3,128(sp)
 8006dac:	1803141e 	bne	r3,zero,8007a00 <___svfiprintf_internal_r+0x10d4>
 8006db0:	d8002015 	stw	zero,128(sp)
 8006db4:	0029883a 	mov	r20,zero
 8006db8:	dc401a04 	addi	r17,sp,104
 8006dbc:	dc802017 	ldw	r18,128(sp)
 8006dc0:	9500010e 	bge	r18,r20,8006dc8 <___svfiprintf_internal_r+0x49c>
 8006dc4:	a025883a 	mov	r18,r20
 8006dc8:	ad403fcc 	andi	r21,r21,255
 8006dcc:	ad40201c 	xori	r21,r21,128
 8006dd0:	ad7fe004 	addi	r21,r21,-128
 8006dd4:	a8003f26 	beq	r21,zero,8006ed4 <___svfiprintf_internal_r+0x5a8>
 8006dd8:	94800044 	addi	r18,r18,1
 8006ddc:	00003d06 	br	8006ed4 <___svfiprintf_internal_r+0x5a8>
 8006de0:	00c00044 	movi	r3,1
 8006de4:	d8c02105 	stb	r3,132(sp)
 8006de8:	05400ac4 	movi	r21,43
 8006dec:	98c00007 	ldb	r3,0(r19)
 8006df0:	003f1a06 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8006df4:	8821883a 	mov	r16,r17
 8006df8:	dc402103 	ldbu	r17,132(sp)
 8006dfc:	b811883a 	mov	r8,r23
 8006e00:	8c403fcc 	andi	r17,r17,255
 8006e04:	8803a71e 	bne	r17,zero,8007ca4 <___svfiprintf_internal_r+0x1378>
 8006e08:	8080080c 	andi	r2,r16,32
 8006e0c:	10015726 	beq	r2,zero,800736c <___svfiprintf_internal_r+0xa40>
 8006e10:	d8c02417 	ldw	r3,144(sp)
 8006e14:	d9002017 	ldw	r4,128(sp)
 8006e18:	d8001d85 	stb	zero,118(sp)
 8006e1c:	18800204 	addi	r2,r3,8
 8006e20:	1c800017 	ldw	r18,0(r3)
 8006e24:	1d000117 	ldw	r20,4(r3)
 8006e28:	2002db16 	blt	r4,zero,8007998 <___svfiprintf_internal_r+0x106c>
 8006e2c:	013fdfc4 	movi	r4,-129
 8006e30:	9506b03a 	or	r3,r18,r20
 8006e34:	d8802415 	stw	r2,144(sp)
 8006e38:	8120703a 	and	r16,r16,r4
 8006e3c:	18015826 	beq	r3,zero,80073a0 <___svfiprintf_internal_r+0xa74>
 8006e40:	002b883a 	mov	r21,zero
 8006e44:	dc401a04 	addi	r17,sp,104
 8006e48:	9006d0fa 	srli	r3,r18,3
 8006e4c:	a008977a 	slli	r4,r20,29
 8006e50:	a028d0fa 	srli	r20,r20,3
 8006e54:	948001cc 	andi	r18,r18,7
 8006e58:	90800c04 	addi	r2,r18,48
 8006e5c:	8c7fffc4 	addi	r17,r17,-1
 8006e60:	20e4b03a 	or	r18,r4,r3
 8006e64:	88800005 	stb	r2,0(r17)
 8006e68:	9506b03a 	or	r3,r18,r20
 8006e6c:	183ff61e 	bne	r3,zero,8006e48 <__alt_data_end+0xfc006e48>
 8006e70:	80c0004c 	andi	r3,r16,1
 8006e74:	18028926 	beq	r3,zero,800789c <___svfiprintf_internal_r+0xf70>
 8006e78:	10803fcc 	andi	r2,r2,255
 8006e7c:	1080201c 	xori	r2,r2,128
 8006e80:	10bfe004 	addi	r2,r2,-128
 8006e84:	00c00c04 	movi	r3,48
 8006e88:	10ffb026 	beq	r2,r3,8006d4c <__alt_data_end+0xfc006d4c>
 8006e8c:	88ffffc5 	stb	r3,-1(r17)
 8006e90:	d8c01e17 	ldw	r3,120(sp)
 8006e94:	88bfffc4 	addi	r2,r17,-1
 8006e98:	1023883a 	mov	r17,r2
 8006e9c:	18a9c83a 	sub	r20,r3,r2
 8006ea0:	003fc606 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8006ea4:	d8c02417 	ldw	r3,144(sp)
 8006ea8:	04800044 	movi	r18,1
 8006eac:	8821883a 	mov	r16,r17
 8006eb0:	18800017 	ldw	r2,0(r3)
 8006eb4:	18c00104 	addi	r3,r3,4
 8006eb8:	b811883a 	mov	r8,r23
 8006ebc:	d8001d85 	stb	zero,118(sp)
 8006ec0:	d8801005 	stb	r2,64(sp)
 8006ec4:	d8c02415 	stw	r3,144(sp)
 8006ec8:	9029883a 	mov	r20,r18
 8006ecc:	dc401004 	addi	r17,sp,64
 8006ed0:	d8002015 	stw	zero,128(sp)
 8006ed4:	80c0008c 	andi	r3,r16,2
 8006ed8:	d8c02115 	stw	r3,132(sp)
 8006edc:	18000126 	beq	r3,zero,8006ee4 <___svfiprintf_internal_r+0x5b8>
 8006ee0:	94800084 	addi	r18,r18,2
 8006ee4:	80c0210c 	andi	r3,r16,132
 8006ee8:	d8c02215 	stw	r3,136(sp)
 8006eec:	1801321e 	bne	r3,zero,80073b8 <___svfiprintf_internal_r+0xa8c>
 8006ef0:	d9002517 	ldw	r4,148(sp)
 8006ef4:	24b9c83a 	sub	fp,r4,r18
 8006ef8:	07012f0e 	bge	zero,fp,80073b8 <___svfiprintf_internal_r+0xa8c>
 8006efc:	02400404 	movi	r9,16
 8006f00:	d8c01c17 	ldw	r3,112(sp)
 8006f04:	d8801b17 	ldw	r2,108(sp)
 8006f08:	4f03250e 	bge	r9,fp,8007ba0 <___svfiprintf_internal_r+0x1274>
 8006f0c:	01020074 	movhi	r4,2049
 8006f10:	21393f04 	addi	r4,r4,-6916
 8006f14:	dc002a15 	stw	r16,168(sp)
 8006f18:	dc402b15 	stw	r17,172(sp)
 8006f1c:	d9002815 	stw	r4,160(sp)
 8006f20:	e023883a 	mov	r17,fp
 8006f24:	482f883a 	mov	r23,r9
 8006f28:	9839883a 	mov	fp,r19
 8006f2c:	054001c4 	movi	r21,7
 8006f30:	9027883a 	mov	r19,r18
 8006f34:	dc002717 	ldw	r16,156(sp)
 8006f38:	dc802317 	ldw	r18,140(sp)
 8006f3c:	00000306 	br	8006f4c <___svfiprintf_internal_r+0x620>
 8006f40:	8c7ffc04 	addi	r17,r17,-16
 8006f44:	42000204 	addi	r8,r8,8
 8006f48:	bc40130e 	bge	r23,r17,8006f98 <___svfiprintf_internal_r+0x66c>
 8006f4c:	01420074 	movhi	r5,2049
 8006f50:	18c00404 	addi	r3,r3,16
 8006f54:	10800044 	addi	r2,r2,1
 8006f58:	29793f04 	addi	r5,r5,-6916
 8006f5c:	41400015 	stw	r5,0(r8)
 8006f60:	45c00115 	stw	r23,4(r8)
 8006f64:	d8c01c15 	stw	r3,112(sp)
 8006f68:	d8801b15 	stw	r2,108(sp)
 8006f6c:	a8bff40e 	bge	r21,r2,8006f40 <__alt_data_end+0xfc006f40>
 8006f70:	d9801a04 	addi	r6,sp,104
 8006f74:	900b883a 	mov	r5,r18
 8006f78:	8009883a 	mov	r4,r16
 8006f7c:	800675c0 	call	800675c <__ssprint_r>
 8006f80:	1001aa1e 	bne	r2,zero,800762c <___svfiprintf_internal_r+0xd00>
 8006f84:	8c7ffc04 	addi	r17,r17,-16
 8006f88:	d8c01c17 	ldw	r3,112(sp)
 8006f8c:	d8801b17 	ldw	r2,108(sp)
 8006f90:	d811883a 	mov	r8,sp
 8006f94:	bc7fed16 	blt	r23,r17,8006f4c <__alt_data_end+0xfc006f4c>
 8006f98:	9825883a 	mov	r18,r19
 8006f9c:	dc002a17 	ldw	r16,168(sp)
 8006fa0:	e027883a 	mov	r19,fp
 8006fa4:	8839883a 	mov	fp,r17
 8006fa8:	dc402b17 	ldw	r17,172(sp)
 8006fac:	d9002817 	ldw	r4,160(sp)
 8006fb0:	e0c7883a 	add	r3,fp,r3
 8006fb4:	10800044 	addi	r2,r2,1
 8006fb8:	41000015 	stw	r4,0(r8)
 8006fbc:	47000115 	stw	fp,4(r8)
 8006fc0:	d8c01c15 	stw	r3,112(sp)
 8006fc4:	d8801b15 	stw	r2,108(sp)
 8006fc8:	010001c4 	movi	r4,7
 8006fcc:	20821616 	blt	r4,r2,8007828 <___svfiprintf_internal_r+0xefc>
 8006fd0:	42000204 	addi	r8,r8,8
 8006fd4:	0000fa06 	br	80073c0 <___svfiprintf_internal_r+0xa94>
 8006fd8:	8821883a 	mov	r16,r17
 8006fdc:	dc402103 	ldbu	r17,132(sp)
 8006fe0:	b811883a 	mov	r8,r23
 8006fe4:	8c403fcc 	andi	r17,r17,255
 8006fe8:	8803361e 	bne	r17,zero,8007cc4 <___svfiprintf_internal_r+0x1398>
 8006fec:	01420074 	movhi	r5,2049
 8006ff0:	2978d504 	addi	r5,r5,-7340
 8006ff4:	d9402915 	stw	r5,164(sp)
 8006ff8:	8080080c 	andi	r2,r16,32
 8006ffc:	103f331e 	bne	r2,zero,8006ccc <__alt_data_end+0xfc006ccc>
 8007000:	8080040c 	andi	r2,r16,16
 8007004:	1002551e 	bne	r2,zero,800795c <___svfiprintf_internal_r+0x1030>
 8007008:	8080100c 	andi	r2,r16,64
 800700c:	1002a626 	beq	r2,zero,8007aa8 <___svfiprintf_internal_r+0x117c>
 8007010:	d8802417 	ldw	r2,144(sp)
 8007014:	0029883a 	mov	r20,zero
 8007018:	1480000b 	ldhu	r18,0(r2)
 800701c:	10800104 	addi	r2,r2,4
 8007020:	d8802415 	stw	r2,144(sp)
 8007024:	003f2e06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007028:	8821883a 	mov	r16,r17
 800702c:	dc402103 	ldbu	r17,132(sp)
 8007030:	b811883a 	mov	r8,r23
 8007034:	8c403fcc 	andi	r17,r17,255
 8007038:	88030b1e 	bne	r17,zero,8007c68 <___svfiprintf_internal_r+0x133c>
 800703c:	8080080c 	andi	r2,r16,32
 8007040:	1002271e 	bne	r2,zero,80078e0 <___svfiprintf_internal_r+0xfb4>
 8007044:	8080040c 	andi	r2,r16,16
 8007048:	10028e26 	beq	r2,zero,8007a84 <___svfiprintf_internal_r+0x1158>
 800704c:	d8c02417 	ldw	r3,144(sp)
 8007050:	d9002617 	ldw	r4,152(sp)
 8007054:	18800017 	ldw	r2,0(r3)
 8007058:	18c00104 	addi	r3,r3,4
 800705c:	d8c02415 	stw	r3,144(sp)
 8007060:	11000015 	stw	r4,0(r2)
 8007064:	003e5306 	br	80069b4 <__alt_data_end+0xfc0069b4>
 8007068:	98c00007 	ldb	r3,0(r19)
 800706c:	01401b04 	movi	r5,108
 8007070:	19424f26 	beq	r3,r5,80079b0 <___svfiprintf_internal_r+0x1084>
 8007074:	8c400414 	ori	r17,r17,16
 8007078:	003e7806 	br	8006a5c <__alt_data_end+0xfc006a5c>
 800707c:	8c401014 	ori	r17,r17,64
 8007080:	98c00007 	ldb	r3,0(r19)
 8007084:	003e7506 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8007088:	8821883a 	mov	r16,r17
 800708c:	dc402103 	ldbu	r17,132(sp)
 8007090:	b811883a 	mov	r8,r23
 8007094:	8c403fcc 	andi	r17,r17,255
 8007098:	8802fe1e 	bne	r17,zero,8007c94 <___svfiprintf_internal_r+0x1368>
 800709c:	8080080c 	andi	r2,r16,32
 80070a0:	10004626 	beq	r2,zero,80071bc <___svfiprintf_internal_r+0x890>
 80070a4:	d9002417 	ldw	r4,144(sp)
 80070a8:	20800117 	ldw	r2,4(r4)
 80070ac:	24800017 	ldw	r18,0(r4)
 80070b0:	21000204 	addi	r4,r4,8
 80070b4:	d9002415 	stw	r4,144(sp)
 80070b8:	1029883a 	mov	r20,r2
 80070bc:	10004a16 	blt	r2,zero,80071e8 <___svfiprintf_internal_r+0x8bc>
 80070c0:	d9002017 	ldw	r4,128(sp)
 80070c4:	dd401d83 	ldbu	r21,118(sp)
 80070c8:	2001eb16 	blt	r4,zero,8007878 <___svfiprintf_internal_r+0xf4c>
 80070cc:	00ffdfc4 	movi	r3,-129
 80070d0:	9504b03a 	or	r2,r18,r20
 80070d4:	80e0703a 	and	r16,r16,r3
 80070d8:	103f3326 	beq	r2,zero,8006da8 <__alt_data_end+0xfc006da8>
 80070dc:	a0009426 	beq	r20,zero,8007330 <___svfiprintf_internal_r+0xa04>
 80070e0:	dc401a04 	addi	r17,sp,104
 80070e4:	402f883a 	mov	r23,r8
 80070e8:	9009883a 	mov	r4,r18
 80070ec:	a00b883a 	mov	r5,r20
 80070f0:	01800284 	movi	r6,10
 80070f4:	000f883a 	mov	r7,zero
 80070f8:	80090cc0 	call	80090cc <__umoddi3>
 80070fc:	10800c04 	addi	r2,r2,48
 8007100:	8c7fffc4 	addi	r17,r17,-1
 8007104:	9009883a 	mov	r4,r18
 8007108:	a00b883a 	mov	r5,r20
 800710c:	88800005 	stb	r2,0(r17)
 8007110:	01800284 	movi	r6,10
 8007114:	000f883a 	mov	r7,zero
 8007118:	8008ad00 	call	8008ad0 <__udivdi3>
 800711c:	1025883a 	mov	r18,r2
 8007120:	10c4b03a 	or	r2,r2,r3
 8007124:	1829883a 	mov	r20,r3
 8007128:	103fef1e 	bne	r2,zero,80070e8 <__alt_data_end+0xfc0070e8>
 800712c:	d9001e17 	ldw	r4,120(sp)
 8007130:	b811883a 	mov	r8,r23
 8007134:	2469c83a 	sub	r20,r4,r17
 8007138:	003f2006 	br	8006dbc <__alt_data_end+0xfc006dbc>
 800713c:	d8802417 	ldw	r2,144(sp)
 8007140:	8821883a 	mov	r16,r17
 8007144:	d8001d85 	stb	zero,118(sp)
 8007148:	14400017 	ldw	r17,0(r2)
 800714c:	b811883a 	mov	r8,r23
 8007150:	15c00104 	addi	r23,r2,4
 8007154:	88026c26 	beq	r17,zero,8007b08 <___svfiprintf_internal_r+0x11dc>
 8007158:	d8c02017 	ldw	r3,128(sp)
 800715c:	18025f16 	blt	r3,zero,8007adc <___svfiprintf_internal_r+0x11b0>
 8007160:	180d883a 	mov	r6,r3
 8007164:	000b883a 	mov	r5,zero
 8007168:	8809883a 	mov	r4,r17
 800716c:	da002d15 	stw	r8,180(sp)
 8007170:	80052d40 	call	80052d4 <memchr>
 8007174:	da002d17 	ldw	r8,180(sp)
 8007178:	1002a526 	beq	r2,zero,8007c10 <___svfiprintf_internal_r+0x12e4>
 800717c:	1469c83a 	sub	r20,r2,r17
 8007180:	dd401d83 	ldbu	r21,118(sp)
 8007184:	ddc02415 	stw	r23,144(sp)
 8007188:	d8002015 	stw	zero,128(sp)
 800718c:	003f0b06 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007190:	8c400814 	ori	r17,r17,32
 8007194:	98c00007 	ldb	r3,0(r19)
 8007198:	003e3006 	br	8006a5c <__alt_data_end+0xfc006a5c>
 800719c:	8821883a 	mov	r16,r17
 80071a0:	dc402103 	ldbu	r17,132(sp)
 80071a4:	b811883a 	mov	r8,r23
 80071a8:	8c403fcc 	andi	r17,r17,255
 80071ac:	8802b01e 	bne	r17,zero,8007c70 <___svfiprintf_internal_r+0x1344>
 80071b0:	84000414 	ori	r16,r16,16
 80071b4:	8080080c 	andi	r2,r16,32
 80071b8:	103fba1e 	bne	r2,zero,80070a4 <__alt_data_end+0xfc0070a4>
 80071bc:	8080040c 	andi	r2,r16,16
 80071c0:	1001df1e 	bne	r2,zero,8007940 <___svfiprintf_internal_r+0x1014>
 80071c4:	8080100c 	andi	r2,r16,64
 80071c8:	10023d26 	beq	r2,zero,8007ac0 <___svfiprintf_internal_r+0x1194>
 80071cc:	d8802417 	ldw	r2,144(sp)
 80071d0:	1480000f 	ldh	r18,0(r2)
 80071d4:	10800104 	addi	r2,r2,4
 80071d8:	d8802415 	stw	r2,144(sp)
 80071dc:	9029d7fa 	srai	r20,r18,31
 80071e0:	a005883a 	mov	r2,r20
 80071e4:	103fb60e 	bge	r2,zero,80070c0 <__alt_data_end+0xfc0070c0>
 80071e8:	d9402017 	ldw	r5,128(sp)
 80071ec:	04a5c83a 	sub	r18,zero,r18
 80071f0:	05400b44 	movi	r21,45
 80071f4:	9004c03a 	cmpne	r2,r18,zero
 80071f8:	0529c83a 	sub	r20,zero,r20
 80071fc:	dd401d85 	stb	r21,118(sp)
 8007200:	a0a9c83a 	sub	r20,r20,r2
 8007204:	28026c16 	blt	r5,zero,8007bb8 <___svfiprintf_internal_r+0x128c>
 8007208:	00bfdfc4 	movi	r2,-129
 800720c:	80a0703a 	and	r16,r16,r2
 8007210:	a03fb31e 	bne	r20,zero,80070e0 <__alt_data_end+0xfc0070e0>
 8007214:	00004606 	br	8007330 <___svfiprintf_internal_r+0xa04>
 8007218:	9839883a 	mov	fp,r19
 800721c:	d8002515 	stw	zero,148(sp)
 8007220:	1c3ff404 	addi	r16,r3,-48
 8007224:	0009883a 	mov	r4,zero
 8007228:	01400284 	movi	r5,10
 800722c:	8000c800 	call	8000c80 <__mulsi3>
 8007230:	e0c00007 	ldb	r3,0(fp)
 8007234:	8089883a 	add	r4,r16,r2
 8007238:	9cc00044 	addi	r19,r19,1
 800723c:	1c3ff404 	addi	r16,r3,-48
 8007240:	9839883a 	mov	fp,r19
 8007244:	a43ff82e 	bgeu	r20,r16,8007228 <__alt_data_end+0xfc007228>
 8007248:	d9002515 	stw	r4,148(sp)
 800724c:	18bff804 	addi	r2,r3,-32
 8007250:	90be052e 	bgeu	r18,r2,8006a68 <__alt_data_end+0xfc006a68>
 8007254:	8821883a 	mov	r16,r17
 8007258:	dc402103 	ldbu	r17,132(sp)
 800725c:	b811883a 	mov	r8,r23
 8007260:	8c403fcc 	andi	r17,r17,255
 8007264:	88028d1e 	bne	r17,zero,8007c9c <___svfiprintf_internal_r+0x1370>
 8007268:	1800ea26 	beq	r3,zero,8007614 <___svfiprintf_internal_r+0xce8>
 800726c:	04800044 	movi	r18,1
 8007270:	d8c01005 	stb	r3,64(sp)
 8007274:	d8001d85 	stb	zero,118(sp)
 8007278:	9029883a 	mov	r20,r18
 800727c:	dc401004 	addi	r17,sp,64
 8007280:	003f1306 	br	8006ed0 <__alt_data_end+0xfc006ed0>
 8007284:	8c402014 	ori	r17,r17,128
 8007288:	98c00007 	ldb	r3,0(r19)
 800728c:	003df306 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8007290:	98c00007 	ldb	r3,0(r19)
 8007294:	01000a84 	movi	r4,42
 8007298:	9f000044 	addi	fp,r19,1
 800729c:	19026326 	beq	r3,r4,8007c2c <___svfiprintf_internal_r+0x1300>
 80072a0:	1c3ff404 	addi	r16,r3,-48
 80072a4:	0009883a 	mov	r4,zero
 80072a8:	a4025636 	bltu	r20,r16,8007c04 <___svfiprintf_internal_r+0x12d8>
 80072ac:	01400284 	movi	r5,10
 80072b0:	8000c800 	call	8000c80 <__mulsi3>
 80072b4:	e0c00007 	ldb	r3,0(fp)
 80072b8:	1409883a 	add	r4,r2,r16
 80072bc:	e4c00044 	addi	r19,fp,1
 80072c0:	1c3ff404 	addi	r16,r3,-48
 80072c4:	9839883a 	mov	fp,r19
 80072c8:	a43ff82e 	bgeu	r20,r16,80072ac <__alt_data_end+0xfc0072ac>
 80072cc:	20020c16 	blt	r4,zero,8007b00 <___svfiprintf_internal_r+0x11d4>
 80072d0:	d9002015 	stw	r4,128(sp)
 80072d4:	003de206 	br	8006a60 <__alt_data_end+0xfc006a60>
 80072d8:	8821883a 	mov	r16,r17
 80072dc:	dc402103 	ldbu	r17,132(sp)
 80072e0:	b811883a 	mov	r8,r23
 80072e4:	8c403fcc 	andi	r17,r17,255
 80072e8:	8802721e 	bne	r17,zero,8007cb4 <___svfiprintf_internal_r+0x1388>
 80072ec:	84000414 	ori	r16,r16,16
 80072f0:	8080080c 	andi	r2,r16,32
 80072f4:	103e9f1e 	bne	r2,zero,8006d74 <__alt_data_end+0xfc006d74>
 80072f8:	8080040c 	andi	r2,r16,16
 80072fc:	10015326 	beq	r2,zero,800784c <___svfiprintf_internal_r+0xf20>
 8007300:	d8c02417 	ldw	r3,144(sp)
 8007304:	d9002017 	ldw	r4,128(sp)
 8007308:	d8001d85 	stb	zero,118(sp)
 800730c:	18800104 	addi	r2,r3,4
 8007310:	1c800017 	ldw	r18,0(r3)
 8007314:	0029883a 	mov	r20,zero
 8007318:	20015516 	blt	r4,zero,8007870 <___svfiprintf_internal_r+0xf44>
 800731c:	00ffdfc4 	movi	r3,-129
 8007320:	d8802415 	stw	r2,144(sp)
 8007324:	80e0703a 	and	r16,r16,r3
 8007328:	002b883a 	mov	r21,zero
 800732c:	903e9e26 	beq	r18,zero,8006da8 <__alt_data_end+0xfc006da8>
 8007330:	00800244 	movi	r2,9
 8007334:	14bf6a36 	bltu	r2,r18,80070e0 <__alt_data_end+0xfc0070e0>
 8007338:	94800c04 	addi	r18,r18,48
 800733c:	dc8019c5 	stb	r18,103(sp)
 8007340:	dd002c17 	ldw	r20,176(sp)
 8007344:	dc4019c4 	addi	r17,sp,103
 8007348:	003e9c06 	br	8006dbc <__alt_data_end+0xfc006dbc>
 800734c:	8821883a 	mov	r16,r17
 8007350:	dc402103 	ldbu	r17,132(sp)
 8007354:	b811883a 	mov	r8,r23
 8007358:	8c403fcc 	andi	r17,r17,255
 800735c:	8802571e 	bne	r17,zero,8007cbc <___svfiprintf_internal_r+0x1390>
 8007360:	84000414 	ori	r16,r16,16
 8007364:	8080080c 	andi	r2,r16,32
 8007368:	103ea91e 	bne	r2,zero,8006e10 <__alt_data_end+0xfc006e10>
 800736c:	8080040c 	andi	r2,r16,16
 8007370:	10018026 	beq	r2,zero,8007974 <___svfiprintf_internal_r+0x1048>
 8007374:	d9402417 	ldw	r5,144(sp)
 8007378:	d8c02017 	ldw	r3,128(sp)
 800737c:	d8001d85 	stb	zero,118(sp)
 8007380:	28800104 	addi	r2,r5,4
 8007384:	2c800017 	ldw	r18,0(r5)
 8007388:	0029883a 	mov	r20,zero
 800738c:	18018216 	blt	r3,zero,8007998 <___svfiprintf_internal_r+0x106c>
 8007390:	00ffdfc4 	movi	r3,-129
 8007394:	d8802415 	stw	r2,144(sp)
 8007398:	80e0703a 	and	r16,r16,r3
 800739c:	903ea81e 	bne	r18,zero,8006e40 <__alt_data_end+0xfc006e40>
 80073a0:	d8802017 	ldw	r2,128(sp)
 80073a4:	002b883a 	mov	r21,zero
 80073a8:	1001f226 	beq	r2,zero,8007b74 <___svfiprintf_internal_r+0x1248>
 80073ac:	0025883a 	mov	r18,zero
 80073b0:	0029883a 	mov	r20,zero
 80073b4:	003ea306 	br	8006e44 <__alt_data_end+0xfc006e44>
 80073b8:	d8c01c17 	ldw	r3,112(sp)
 80073bc:	d8801b17 	ldw	r2,108(sp)
 80073c0:	d9001d87 	ldb	r4,118(sp)
 80073c4:	20000b26 	beq	r4,zero,80073f4 <___svfiprintf_internal_r+0xac8>
 80073c8:	d9001d84 	addi	r4,sp,118
 80073cc:	18c00044 	addi	r3,r3,1
 80073d0:	10800044 	addi	r2,r2,1
 80073d4:	41000015 	stw	r4,0(r8)
 80073d8:	01000044 	movi	r4,1
 80073dc:	41000115 	stw	r4,4(r8)
 80073e0:	d8c01c15 	stw	r3,112(sp)
 80073e4:	d8801b15 	stw	r2,108(sp)
 80073e8:	010001c4 	movi	r4,7
 80073ec:	2080f316 	blt	r4,r2,80077bc <___svfiprintf_internal_r+0xe90>
 80073f0:	42000204 	addi	r8,r8,8
 80073f4:	d9402117 	ldw	r5,132(sp)
 80073f8:	28000b26 	beq	r5,zero,8007428 <___svfiprintf_internal_r+0xafc>
 80073fc:	d9001d04 	addi	r4,sp,116
 8007400:	18c00084 	addi	r3,r3,2
 8007404:	10800044 	addi	r2,r2,1
 8007408:	41000015 	stw	r4,0(r8)
 800740c:	01000084 	movi	r4,2
 8007410:	41000115 	stw	r4,4(r8)
 8007414:	d8c01c15 	stw	r3,112(sp)
 8007418:	d8801b15 	stw	r2,108(sp)
 800741c:	010001c4 	movi	r4,7
 8007420:	2080ef16 	blt	r4,r2,80077e0 <___svfiprintf_internal_r+0xeb4>
 8007424:	42000204 	addi	r8,r8,8
 8007428:	d9402217 	ldw	r5,136(sp)
 800742c:	01002004 	movi	r4,128
 8007430:	29008f26 	beq	r5,r4,8007670 <___svfiprintf_internal_r+0xd44>
 8007434:	d9002017 	ldw	r4,128(sp)
 8007438:	252fc83a 	sub	r23,r4,r20
 800743c:	05c0310e 	bge	zero,r23,8007504 <___svfiprintf_internal_r+0xbd8>
 8007440:	07000404 	movi	fp,16
 8007444:	e5c17d0e 	bge	fp,r23,8007a3c <___svfiprintf_internal_r+0x1110>
 8007448:	01020074 	movhi	r4,2049
 800744c:	21393b04 	addi	r4,r4,-6932
 8007450:	dc002015 	stw	r16,128(sp)
 8007454:	dc402215 	stw	r17,136(sp)
 8007458:	d9002115 	stw	r4,132(sp)
 800745c:	b823883a 	mov	r17,r23
 8007460:	054001c4 	movi	r21,7
 8007464:	982f883a 	mov	r23,r19
 8007468:	dc002717 	ldw	r16,156(sp)
 800746c:	9027883a 	mov	r19,r18
 8007470:	dc802317 	ldw	r18,140(sp)
 8007474:	00000306 	br	8007484 <___svfiprintf_internal_r+0xb58>
 8007478:	8c7ffc04 	addi	r17,r17,-16
 800747c:	42000204 	addi	r8,r8,8
 8007480:	e440110e 	bge	fp,r17,80074c8 <___svfiprintf_internal_r+0xb9c>
 8007484:	18c00404 	addi	r3,r3,16
 8007488:	10800044 	addi	r2,r2,1
 800748c:	45800015 	stw	r22,0(r8)
 8007490:	47000115 	stw	fp,4(r8)
 8007494:	d8c01c15 	stw	r3,112(sp)
 8007498:	d8801b15 	stw	r2,108(sp)
 800749c:	a8bff60e 	bge	r21,r2,8007478 <__alt_data_end+0xfc007478>
 80074a0:	d9801a04 	addi	r6,sp,104
 80074a4:	900b883a 	mov	r5,r18
 80074a8:	8009883a 	mov	r4,r16
 80074ac:	800675c0 	call	800675c <__ssprint_r>
 80074b0:	10005e1e 	bne	r2,zero,800762c <___svfiprintf_internal_r+0xd00>
 80074b4:	8c7ffc04 	addi	r17,r17,-16
 80074b8:	d8c01c17 	ldw	r3,112(sp)
 80074bc:	d8801b17 	ldw	r2,108(sp)
 80074c0:	d811883a 	mov	r8,sp
 80074c4:	e47fef16 	blt	fp,r17,8007484 <__alt_data_end+0xfc007484>
 80074c8:	9825883a 	mov	r18,r19
 80074cc:	dc002017 	ldw	r16,128(sp)
 80074d0:	b827883a 	mov	r19,r23
 80074d4:	882f883a 	mov	r23,r17
 80074d8:	dc402217 	ldw	r17,136(sp)
 80074dc:	d9402117 	ldw	r5,132(sp)
 80074e0:	1dc7883a 	add	r3,r3,r23
 80074e4:	10800044 	addi	r2,r2,1
 80074e8:	41400015 	stw	r5,0(r8)
 80074ec:	45c00115 	stw	r23,4(r8)
 80074f0:	d8c01c15 	stw	r3,112(sp)
 80074f4:	d8801b15 	stw	r2,108(sp)
 80074f8:	010001c4 	movi	r4,7
 80074fc:	2080a616 	blt	r4,r2,8007798 <___svfiprintf_internal_r+0xe6c>
 8007500:	42000204 	addi	r8,r8,8
 8007504:	a0c7883a 	add	r3,r20,r3
 8007508:	10800044 	addi	r2,r2,1
 800750c:	44400015 	stw	r17,0(r8)
 8007510:	45000115 	stw	r20,4(r8)
 8007514:	d8c01c15 	stw	r3,112(sp)
 8007518:	d8801b15 	stw	r2,108(sp)
 800751c:	010001c4 	movi	r4,7
 8007520:	20808816 	blt	r4,r2,8007744 <___svfiprintf_internal_r+0xe18>
 8007524:	42000204 	addi	r8,r8,8
 8007528:	8400010c 	andi	r16,r16,4
 800752c:	80002c26 	beq	r16,zero,80075e0 <___svfiprintf_internal_r+0xcb4>
 8007530:	d8802517 	ldw	r2,148(sp)
 8007534:	14a1c83a 	sub	r16,r2,r18
 8007538:	0400290e 	bge	zero,r16,80075e0 <___svfiprintf_internal_r+0xcb4>
 800753c:	04400404 	movi	r17,16
 8007540:	d8801b17 	ldw	r2,108(sp)
 8007544:	8c01a70e 	bge	r17,r16,8007be4 <___svfiprintf_internal_r+0x12b8>
 8007548:	01420074 	movhi	r5,2049
 800754c:	29793f04 	addi	r5,r5,-6916
 8007550:	d9402815 	stw	r5,160(sp)
 8007554:	050001c4 	movi	r20,7
 8007558:	dd402717 	ldw	r21,156(sp)
 800755c:	ddc02317 	ldw	r23,140(sp)
 8007560:	00000306 	br	8007570 <___svfiprintf_internal_r+0xc44>
 8007564:	843ffc04 	addi	r16,r16,-16
 8007568:	42000204 	addi	r8,r8,8
 800756c:	8c00130e 	bge	r17,r16,80075bc <___svfiprintf_internal_r+0xc90>
 8007570:	01020074 	movhi	r4,2049
 8007574:	18c00404 	addi	r3,r3,16
 8007578:	10800044 	addi	r2,r2,1
 800757c:	21393f04 	addi	r4,r4,-6916
 8007580:	41000015 	stw	r4,0(r8)
 8007584:	44400115 	stw	r17,4(r8)
 8007588:	d8c01c15 	stw	r3,112(sp)
 800758c:	d8801b15 	stw	r2,108(sp)
 8007590:	a0bff40e 	bge	r20,r2,8007564 <__alt_data_end+0xfc007564>
 8007594:	d9801a04 	addi	r6,sp,104
 8007598:	b80b883a 	mov	r5,r23
 800759c:	a809883a 	mov	r4,r21
 80075a0:	800675c0 	call	800675c <__ssprint_r>
 80075a4:	1000211e 	bne	r2,zero,800762c <___svfiprintf_internal_r+0xd00>
 80075a8:	843ffc04 	addi	r16,r16,-16
 80075ac:	d8c01c17 	ldw	r3,112(sp)
 80075b0:	d8801b17 	ldw	r2,108(sp)
 80075b4:	d811883a 	mov	r8,sp
 80075b8:	8c3fed16 	blt	r17,r16,8007570 <__alt_data_end+0xfc007570>
 80075bc:	d9402817 	ldw	r5,160(sp)
 80075c0:	1c07883a 	add	r3,r3,r16
 80075c4:	10800044 	addi	r2,r2,1
 80075c8:	41400015 	stw	r5,0(r8)
 80075cc:	44000115 	stw	r16,4(r8)
 80075d0:	d8c01c15 	stw	r3,112(sp)
 80075d4:	d8801b15 	stw	r2,108(sp)
 80075d8:	010001c4 	movi	r4,7
 80075dc:	2080b516 	blt	r4,r2,80078b4 <___svfiprintf_internal_r+0xf88>
 80075e0:	d8802517 	ldw	r2,148(sp)
 80075e4:	1480010e 	bge	r2,r18,80075ec <___svfiprintf_internal_r+0xcc0>
 80075e8:	9005883a 	mov	r2,r18
 80075ec:	d9002617 	ldw	r4,152(sp)
 80075f0:	2089883a 	add	r4,r4,r2
 80075f4:	d9002615 	stw	r4,152(sp)
 80075f8:	18005a1e 	bne	r3,zero,8007764 <___svfiprintf_internal_r+0xe38>
 80075fc:	98800007 	ldb	r2,0(r19)
 8007600:	d8001b15 	stw	zero,108(sp)
 8007604:	d811883a 	mov	r8,sp
 8007608:	103cec1e 	bne	r2,zero,80069bc <__alt_data_end+0xfc0069bc>
 800760c:	9825883a 	mov	r18,r19
 8007610:	003d0206 	br	8006a1c <__alt_data_end+0xfc006a1c>
 8007614:	d8801c17 	ldw	r2,112(sp)
 8007618:	10000426 	beq	r2,zero,800762c <___svfiprintf_internal_r+0xd00>
 800761c:	d9402317 	ldw	r5,140(sp)
 8007620:	d9002717 	ldw	r4,156(sp)
 8007624:	d9801a04 	addi	r6,sp,104
 8007628:	800675c0 	call	800675c <__ssprint_r>
 800762c:	d9402317 	ldw	r5,140(sp)
 8007630:	d8802617 	ldw	r2,152(sp)
 8007634:	28c0030b 	ldhu	r3,12(r5)
 8007638:	18c0100c 	andi	r3,r3,64
 800763c:	18015c1e 	bne	r3,zero,8007bb0 <___svfiprintf_internal_r+0x1284>
 8007640:	dfc03717 	ldw	ra,220(sp)
 8007644:	df003617 	ldw	fp,216(sp)
 8007648:	ddc03517 	ldw	r23,212(sp)
 800764c:	dd803417 	ldw	r22,208(sp)
 8007650:	dd403317 	ldw	r21,204(sp)
 8007654:	dd003217 	ldw	r20,200(sp)
 8007658:	dcc03117 	ldw	r19,196(sp)
 800765c:	dc803017 	ldw	r18,192(sp)
 8007660:	dc402f17 	ldw	r17,188(sp)
 8007664:	dc002e17 	ldw	r16,184(sp)
 8007668:	dec03804 	addi	sp,sp,224
 800766c:	f800283a 	ret
 8007670:	d9002517 	ldw	r4,148(sp)
 8007674:	24afc83a 	sub	r23,r4,r18
 8007678:	05ff6e0e 	bge	zero,r23,8007434 <__alt_data_end+0xfc007434>
 800767c:	07000404 	movi	fp,16
 8007680:	e5c15c0e 	bge	fp,r23,8007bf4 <___svfiprintf_internal_r+0x12c8>
 8007684:	01020074 	movhi	r4,2049
 8007688:	21393b04 	addi	r4,r4,-6932
 800768c:	dc002215 	stw	r16,136(sp)
 8007690:	dc402815 	stw	r17,160(sp)
 8007694:	d9002115 	stw	r4,132(sp)
 8007698:	b823883a 	mov	r17,r23
 800769c:	054001c4 	movi	r21,7
 80076a0:	982f883a 	mov	r23,r19
 80076a4:	dc002717 	ldw	r16,156(sp)
 80076a8:	9027883a 	mov	r19,r18
 80076ac:	dc802317 	ldw	r18,140(sp)
 80076b0:	00000306 	br	80076c0 <___svfiprintf_internal_r+0xd94>
 80076b4:	8c7ffc04 	addi	r17,r17,-16
 80076b8:	42000204 	addi	r8,r8,8
 80076bc:	e440110e 	bge	fp,r17,8007704 <___svfiprintf_internal_r+0xdd8>
 80076c0:	18c00404 	addi	r3,r3,16
 80076c4:	10800044 	addi	r2,r2,1
 80076c8:	45800015 	stw	r22,0(r8)
 80076cc:	47000115 	stw	fp,4(r8)
 80076d0:	d8c01c15 	stw	r3,112(sp)
 80076d4:	d8801b15 	stw	r2,108(sp)
 80076d8:	a8bff60e 	bge	r21,r2,80076b4 <__alt_data_end+0xfc0076b4>
 80076dc:	d9801a04 	addi	r6,sp,104
 80076e0:	900b883a 	mov	r5,r18
 80076e4:	8009883a 	mov	r4,r16
 80076e8:	800675c0 	call	800675c <__ssprint_r>
 80076ec:	103fcf1e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80076f0:	8c7ffc04 	addi	r17,r17,-16
 80076f4:	d8c01c17 	ldw	r3,112(sp)
 80076f8:	d8801b17 	ldw	r2,108(sp)
 80076fc:	d811883a 	mov	r8,sp
 8007700:	e47fef16 	blt	fp,r17,80076c0 <__alt_data_end+0xfc0076c0>
 8007704:	9825883a 	mov	r18,r19
 8007708:	dc002217 	ldw	r16,136(sp)
 800770c:	b827883a 	mov	r19,r23
 8007710:	882f883a 	mov	r23,r17
 8007714:	dc402817 	ldw	r17,160(sp)
 8007718:	d9402117 	ldw	r5,132(sp)
 800771c:	1dc7883a 	add	r3,r3,r23
 8007720:	10800044 	addi	r2,r2,1
 8007724:	41400015 	stw	r5,0(r8)
 8007728:	45c00115 	stw	r23,4(r8)
 800772c:	d8c01c15 	stw	r3,112(sp)
 8007730:	d8801b15 	stw	r2,108(sp)
 8007734:	010001c4 	movi	r4,7
 8007738:	2080b716 	blt	r4,r2,8007a18 <___svfiprintf_internal_r+0x10ec>
 800773c:	42000204 	addi	r8,r8,8
 8007740:	003f3c06 	br	8007434 <__alt_data_end+0xfc007434>
 8007744:	d9402317 	ldw	r5,140(sp)
 8007748:	d9002717 	ldw	r4,156(sp)
 800774c:	d9801a04 	addi	r6,sp,104
 8007750:	800675c0 	call	800675c <__ssprint_r>
 8007754:	103fb51e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 8007758:	d8c01c17 	ldw	r3,112(sp)
 800775c:	d811883a 	mov	r8,sp
 8007760:	003f7106 	br	8007528 <__alt_data_end+0xfc007528>
 8007764:	d9402317 	ldw	r5,140(sp)
 8007768:	d9002717 	ldw	r4,156(sp)
 800776c:	d9801a04 	addi	r6,sp,104
 8007770:	800675c0 	call	800675c <__ssprint_r>
 8007774:	103fa126 	beq	r2,zero,80075fc <__alt_data_end+0xfc0075fc>
 8007778:	003fac06 	br	800762c <__alt_data_end+0xfc00762c>
 800777c:	d9402317 	ldw	r5,140(sp)
 8007780:	d9002717 	ldw	r4,156(sp)
 8007784:	d9801a04 	addi	r6,sp,104
 8007788:	800675c0 	call	800675c <__ssprint_r>
 800778c:	103fa71e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 8007790:	d811883a 	mov	r8,sp
 8007794:	003c9e06 	br	8006a10 <__alt_data_end+0xfc006a10>
 8007798:	d9402317 	ldw	r5,140(sp)
 800779c:	d9002717 	ldw	r4,156(sp)
 80077a0:	d9801a04 	addi	r6,sp,104
 80077a4:	800675c0 	call	800675c <__ssprint_r>
 80077a8:	103fa01e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80077ac:	d8c01c17 	ldw	r3,112(sp)
 80077b0:	d8801b17 	ldw	r2,108(sp)
 80077b4:	d811883a 	mov	r8,sp
 80077b8:	003f5206 	br	8007504 <__alt_data_end+0xfc007504>
 80077bc:	d9402317 	ldw	r5,140(sp)
 80077c0:	d9002717 	ldw	r4,156(sp)
 80077c4:	d9801a04 	addi	r6,sp,104
 80077c8:	800675c0 	call	800675c <__ssprint_r>
 80077cc:	103f971e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80077d0:	d8c01c17 	ldw	r3,112(sp)
 80077d4:	d8801b17 	ldw	r2,108(sp)
 80077d8:	d811883a 	mov	r8,sp
 80077dc:	003f0506 	br	80073f4 <__alt_data_end+0xfc0073f4>
 80077e0:	d9402317 	ldw	r5,140(sp)
 80077e4:	d9002717 	ldw	r4,156(sp)
 80077e8:	d9801a04 	addi	r6,sp,104
 80077ec:	800675c0 	call	800675c <__ssprint_r>
 80077f0:	103f8e1e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80077f4:	d8c01c17 	ldw	r3,112(sp)
 80077f8:	d8801b17 	ldw	r2,108(sp)
 80077fc:	d811883a 	mov	r8,sp
 8007800:	003f0906 	br	8007428 <__alt_data_end+0xfc007428>
 8007804:	d9402017 	ldw	r5,128(sp)
 8007808:	d8001d85 	stb	zero,118(sp)
 800780c:	28007716 	blt	r5,zero,80079ec <___svfiprintf_internal_r+0x10c0>
 8007810:	00ffdfc4 	movi	r3,-129
 8007814:	9504b03a 	or	r2,r18,r20
 8007818:	80e0703a 	and	r16,r16,r3
 800781c:	103d3926 	beq	r2,zero,8006d04 <__alt_data_end+0xfc006d04>
 8007820:	002b883a 	mov	r21,zero
 8007824:	003d3c06 	br	8006d18 <__alt_data_end+0xfc006d18>
 8007828:	d9402317 	ldw	r5,140(sp)
 800782c:	d9002717 	ldw	r4,156(sp)
 8007830:	d9801a04 	addi	r6,sp,104
 8007834:	800675c0 	call	800675c <__ssprint_r>
 8007838:	103f7c1e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 800783c:	d8c01c17 	ldw	r3,112(sp)
 8007840:	d8801b17 	ldw	r2,108(sp)
 8007844:	d811883a 	mov	r8,sp
 8007848:	003edd06 	br	80073c0 <__alt_data_end+0xfc0073c0>
 800784c:	8080100c 	andi	r2,r16,64
 8007850:	d8001d85 	stb	zero,118(sp)
 8007854:	10008426 	beq	r2,zero,8007a68 <___svfiprintf_internal_r+0x113c>
 8007858:	d9402417 	ldw	r5,144(sp)
 800785c:	d8c02017 	ldw	r3,128(sp)
 8007860:	0029883a 	mov	r20,zero
 8007864:	28800104 	addi	r2,r5,4
 8007868:	2c80000b 	ldhu	r18,0(r5)
 800786c:	183eab0e 	bge	r3,zero,800731c <__alt_data_end+0xfc00731c>
 8007870:	d8802415 	stw	r2,144(sp)
 8007874:	002b883a 	mov	r21,zero
 8007878:	9504b03a 	or	r2,r18,r20
 800787c:	103e171e 	bne	r2,zero,80070dc <__alt_data_end+0xfc0070dc>
 8007880:	00800044 	movi	r2,1
 8007884:	10803fcc 	andi	r2,r2,255
 8007888:	00c00044 	movi	r3,1
 800788c:	10c05c26 	beq	r2,r3,8007a00 <___svfiprintf_internal_r+0x10d4>
 8007890:	00c00084 	movi	r3,2
 8007894:	10fd1e26 	beq	r2,r3,8006d10 <__alt_data_end+0xfc006d10>
 8007898:	003ec406 	br	80073ac <__alt_data_end+0xfc0073ac>
 800789c:	d9401e17 	ldw	r5,120(sp)
 80078a0:	2c69c83a 	sub	r20,r5,r17
 80078a4:	003d4506 	br	8006dbc <__alt_data_end+0xfc006dbc>
 80078a8:	d8802415 	stw	r2,144(sp)
 80078ac:	98c00007 	ldb	r3,0(r19)
 80078b0:	003c6a06 	br	8006a5c <__alt_data_end+0xfc006a5c>
 80078b4:	d9402317 	ldw	r5,140(sp)
 80078b8:	d9002717 	ldw	r4,156(sp)
 80078bc:	d9801a04 	addi	r6,sp,104
 80078c0:	800675c0 	call	800675c <__ssprint_r>
 80078c4:	103f591e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80078c8:	d8c01c17 	ldw	r3,112(sp)
 80078cc:	003f4406 	br	80075e0 <__alt_data_end+0xfc0075e0>
 80078d0:	01420074 	movhi	r5,2049
 80078d4:	2978da04 	addi	r5,r5,-7320
 80078d8:	d9402915 	stw	r5,164(sp)
 80078dc:	003d0906 	br	8006d04 <__alt_data_end+0xfc006d04>
 80078e0:	d8c02417 	ldw	r3,144(sp)
 80078e4:	d9002617 	ldw	r4,152(sp)
 80078e8:	d9402417 	ldw	r5,144(sp)
 80078ec:	18800017 	ldw	r2,0(r3)
 80078f0:	2007d7fa 	srai	r3,r4,31
 80078f4:	29400104 	addi	r5,r5,4
 80078f8:	d9402415 	stw	r5,144(sp)
 80078fc:	11000015 	stw	r4,0(r2)
 8007900:	10c00115 	stw	r3,4(r2)
 8007904:	003c2b06 	br	80069b4 <__alt_data_end+0xfc0069b4>
 8007908:	d8c01d45 	stb	r3,117(sp)
 800790c:	d8c02017 	ldw	r3,128(sp)
 8007910:	00800c04 	movi	r2,48
 8007914:	d8801d05 	stb	r2,116(sp)
 8007918:	d8001d85 	stb	zero,118(sp)
 800791c:	80800094 	ori	r2,r16,2
 8007920:	1800ac16 	blt	r3,zero,8007bd4 <___svfiprintf_internal_r+0x12a8>
 8007924:	00bfdfc4 	movi	r2,-129
 8007928:	80a0703a 	and	r16,r16,r2
 800792c:	84000094 	ori	r16,r16,2
 8007930:	002b883a 	mov	r21,zero
 8007934:	003cf806 	br	8006d18 <__alt_data_end+0xfc006d18>
 8007938:	98c00007 	ldb	r3,0(r19)
 800793c:	003c4706 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8007940:	d9402417 	ldw	r5,144(sp)
 8007944:	2c800017 	ldw	r18,0(r5)
 8007948:	29400104 	addi	r5,r5,4
 800794c:	d9402415 	stw	r5,144(sp)
 8007950:	9029d7fa 	srai	r20,r18,31
 8007954:	a005883a 	mov	r2,r20
 8007958:	003dd806 	br	80070bc <__alt_data_end+0xfc0070bc>
 800795c:	d9402417 	ldw	r5,144(sp)
 8007960:	0029883a 	mov	r20,zero
 8007964:	2c800017 	ldw	r18,0(r5)
 8007968:	29400104 	addi	r5,r5,4
 800796c:	d9402415 	stw	r5,144(sp)
 8007970:	003cdb06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007974:	8080100c 	andi	r2,r16,64
 8007978:	d8001d85 	stb	zero,118(sp)
 800797c:	10003326 	beq	r2,zero,8007a4c <___svfiprintf_internal_r+0x1120>
 8007980:	d9002417 	ldw	r4,144(sp)
 8007984:	d9402017 	ldw	r5,128(sp)
 8007988:	0029883a 	mov	r20,zero
 800798c:	20800104 	addi	r2,r4,4
 8007990:	2480000b 	ldhu	r18,0(r4)
 8007994:	283e7e0e 	bge	r5,zero,8007390 <__alt_data_end+0xfc007390>
 8007998:	9506b03a 	or	r3,r18,r20
 800799c:	d8802415 	stw	r2,144(sp)
 80079a0:	183d271e 	bne	r3,zero,8006e40 <__alt_data_end+0xfc006e40>
 80079a4:	002b883a 	mov	r21,zero
 80079a8:	0005883a 	mov	r2,zero
 80079ac:	003fb506 	br	8007884 <__alt_data_end+0xfc007884>
 80079b0:	98c00043 	ldbu	r3,1(r19)
 80079b4:	8c400814 	ori	r17,r17,32
 80079b8:	9cc00044 	addi	r19,r19,1
 80079bc:	18c03fcc 	andi	r3,r3,255
 80079c0:	18c0201c 	xori	r3,r3,128
 80079c4:	18ffe004 	addi	r3,r3,-128
 80079c8:	003c2406 	br	8006a5c <__alt_data_end+0xfc006a5c>
 80079cc:	d8c02415 	stw	r3,144(sp)
 80079d0:	002b883a 	mov	r21,zero
 80079d4:	003fa806 	br	8007878 <__alt_data_end+0xfc007878>
 80079d8:	01020074 	movhi	r4,2049
 80079dc:	2138da04 	addi	r4,r4,-7320
 80079e0:	d9002915 	stw	r4,164(sp)
 80079e4:	d8c02415 	stw	r3,144(sp)
 80079e8:	1021883a 	mov	r16,r2
 80079ec:	9504b03a 	or	r2,r18,r20
 80079f0:	103f8b1e 	bne	r2,zero,8007820 <__alt_data_end+0xfc007820>
 80079f4:	002b883a 	mov	r21,zero
 80079f8:	00800084 	movi	r2,2
 80079fc:	003fa106 	br	8007884 <__alt_data_end+0xfc007884>
 8007a00:	0025883a 	mov	r18,zero
 8007a04:	94800c04 	addi	r18,r18,48
 8007a08:	dc8019c5 	stb	r18,103(sp)
 8007a0c:	dd002c17 	ldw	r20,176(sp)
 8007a10:	dc4019c4 	addi	r17,sp,103
 8007a14:	003ce906 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007a18:	d9402317 	ldw	r5,140(sp)
 8007a1c:	d9002717 	ldw	r4,156(sp)
 8007a20:	d9801a04 	addi	r6,sp,104
 8007a24:	800675c0 	call	800675c <__ssprint_r>
 8007a28:	103f001e 	bne	r2,zero,800762c <__alt_data_end+0xfc00762c>
 8007a2c:	d8c01c17 	ldw	r3,112(sp)
 8007a30:	d8801b17 	ldw	r2,108(sp)
 8007a34:	d811883a 	mov	r8,sp
 8007a38:	003e7e06 	br	8007434 <__alt_data_end+0xfc007434>
 8007a3c:	01420074 	movhi	r5,2049
 8007a40:	29793b04 	addi	r5,r5,-6932
 8007a44:	d9402115 	stw	r5,132(sp)
 8007a48:	003ea406 	br	80074dc <__alt_data_end+0xfc0074dc>
 8007a4c:	d8c02417 	ldw	r3,144(sp)
 8007a50:	d9002017 	ldw	r4,128(sp)
 8007a54:	0029883a 	mov	r20,zero
 8007a58:	18800104 	addi	r2,r3,4
 8007a5c:	1c800017 	ldw	r18,0(r3)
 8007a60:	203e4b0e 	bge	r4,zero,8007390 <__alt_data_end+0xfc007390>
 8007a64:	003fcc06 	br	8007998 <__alt_data_end+0xfc007998>
 8007a68:	d9002417 	ldw	r4,144(sp)
 8007a6c:	d9402017 	ldw	r5,128(sp)
 8007a70:	0029883a 	mov	r20,zero
 8007a74:	20800104 	addi	r2,r4,4
 8007a78:	24800017 	ldw	r18,0(r4)
 8007a7c:	283e270e 	bge	r5,zero,800731c <__alt_data_end+0xfc00731c>
 8007a80:	003f7b06 	br	8007870 <__alt_data_end+0xfc007870>
 8007a84:	8400100c 	andi	r16,r16,64
 8007a88:	80003326 	beq	r16,zero,8007b58 <___svfiprintf_internal_r+0x122c>
 8007a8c:	d9402417 	ldw	r5,144(sp)
 8007a90:	d8c02617 	ldw	r3,152(sp)
 8007a94:	28800017 	ldw	r2,0(r5)
 8007a98:	29400104 	addi	r5,r5,4
 8007a9c:	d9402415 	stw	r5,144(sp)
 8007aa0:	10c0000d 	sth	r3,0(r2)
 8007aa4:	003bc306 	br	80069b4 <__alt_data_end+0xfc0069b4>
 8007aa8:	d9002417 	ldw	r4,144(sp)
 8007aac:	0029883a 	mov	r20,zero
 8007ab0:	24800017 	ldw	r18,0(r4)
 8007ab4:	21000104 	addi	r4,r4,4
 8007ab8:	d9002415 	stw	r4,144(sp)
 8007abc:	003c8806 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007ac0:	d8c02417 	ldw	r3,144(sp)
 8007ac4:	1c800017 	ldw	r18,0(r3)
 8007ac8:	18c00104 	addi	r3,r3,4
 8007acc:	d8c02415 	stw	r3,144(sp)
 8007ad0:	9029d7fa 	srai	r20,r18,31
 8007ad4:	a005883a 	mov	r2,r20
 8007ad8:	003d7806 	br	80070bc <__alt_data_end+0xfc0070bc>
 8007adc:	8809883a 	mov	r4,r17
 8007ae0:	da002d15 	stw	r8,180(sp)
 8007ae4:	8000de80 	call	8000de8 <strlen>
 8007ae8:	1029883a 	mov	r20,r2
 8007aec:	dd401d83 	ldbu	r21,118(sp)
 8007af0:	ddc02415 	stw	r23,144(sp)
 8007af4:	d8002015 	stw	zero,128(sp)
 8007af8:	da002d17 	ldw	r8,180(sp)
 8007afc:	003caf06 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007b00:	013fffc4 	movi	r4,-1
 8007b04:	003df206 	br	80072d0 <__alt_data_end+0xfc0072d0>
 8007b08:	dd002017 	ldw	r20,128(sp)
 8007b0c:	00800184 	movi	r2,6
 8007b10:	1500012e 	bgeu	r2,r20,8007b18 <___svfiprintf_internal_r+0x11ec>
 8007b14:	1029883a 	mov	r20,r2
 8007b18:	a025883a 	mov	r18,r20
 8007b1c:	a0004116 	blt	r20,zero,8007c24 <___svfiprintf_internal_r+0x12f8>
 8007b20:	04420074 	movhi	r17,2049
 8007b24:	ddc02415 	stw	r23,144(sp)
 8007b28:	8c78df04 	addi	r17,r17,-7300
 8007b2c:	003ce806 	br	8006ed0 <__alt_data_end+0xfc006ed0>
 8007b30:	04001004 	movi	r16,64
 8007b34:	800b883a 	mov	r5,r16
 8007b38:	8004ac80 	call	8004ac8 <_malloc_r>
 8007b3c:	d8c02317 	ldw	r3,140(sp)
 8007b40:	18800015 	stw	r2,0(r3)
 8007b44:	18800415 	stw	r2,16(r3)
 8007b48:	10004d26 	beq	r2,zero,8007c80 <___svfiprintf_internal_r+0x1354>
 8007b4c:	d9402317 	ldw	r5,140(sp)
 8007b50:	2c000515 	stw	r16,20(r5)
 8007b54:	003b8906 	br	800697c <__alt_data_end+0xfc00697c>
 8007b58:	d9002417 	ldw	r4,144(sp)
 8007b5c:	d9402617 	ldw	r5,152(sp)
 8007b60:	20800017 	ldw	r2,0(r4)
 8007b64:	21000104 	addi	r4,r4,4
 8007b68:	d9002415 	stw	r4,144(sp)
 8007b6c:	11400015 	stw	r5,0(r2)
 8007b70:	003b9006 	br	80069b4 <__alt_data_end+0xfc0069b4>
 8007b74:	8080004c 	andi	r2,r16,1
 8007b78:	002b883a 	mov	r21,zero
 8007b7c:	10000526 	beq	r2,zero,8007b94 <___svfiprintf_internal_r+0x1268>
 8007b80:	00800c04 	movi	r2,48
 8007b84:	d88019c5 	stb	r2,103(sp)
 8007b88:	dd002c17 	ldw	r20,176(sp)
 8007b8c:	dc4019c4 	addi	r17,sp,103
 8007b90:	003c8a06 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007b94:	0029883a 	mov	r20,zero
 8007b98:	dc401a04 	addi	r17,sp,104
 8007b9c:	003c8706 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007ba0:	01420074 	movhi	r5,2049
 8007ba4:	29793f04 	addi	r5,r5,-6916
 8007ba8:	d9402815 	stw	r5,160(sp)
 8007bac:	003cff06 	br	8006fac <__alt_data_end+0xfc006fac>
 8007bb0:	00bfffc4 	movi	r2,-1
 8007bb4:	003ea206 	br	8007640 <__alt_data_end+0xfc007640>
 8007bb8:	00800044 	movi	r2,1
 8007bbc:	10803fcc 	andi	r2,r2,255
 8007bc0:	00c00044 	movi	r3,1
 8007bc4:	10fd4526 	beq	r2,r3,80070dc <__alt_data_end+0xfc0070dc>
 8007bc8:	00c00084 	movi	r3,2
 8007bcc:	10fc5226 	beq	r2,r3,8006d18 <__alt_data_end+0xfc006d18>
 8007bd0:	003c9c06 	br	8006e44 <__alt_data_end+0xfc006e44>
 8007bd4:	1021883a 	mov	r16,r2
 8007bd8:	002b883a 	mov	r21,zero
 8007bdc:	00800084 	movi	r2,2
 8007be0:	003ff606 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8007be4:	01020074 	movhi	r4,2049
 8007be8:	21393f04 	addi	r4,r4,-6916
 8007bec:	d9002815 	stw	r4,160(sp)
 8007bf0:	003e7206 	br	80075bc <__alt_data_end+0xfc0075bc>
 8007bf4:	01420074 	movhi	r5,2049
 8007bf8:	29793b04 	addi	r5,r5,-6932
 8007bfc:	d9402115 	stw	r5,132(sp)
 8007c00:	003ec506 	br	8007718 <__alt_data_end+0xfc007718>
 8007c04:	e027883a 	mov	r19,fp
 8007c08:	d8002015 	stw	zero,128(sp)
 8007c0c:	003b9406 	br	8006a60 <__alt_data_end+0xfc006a60>
 8007c10:	dd002017 	ldw	r20,128(sp)
 8007c14:	dd401d83 	ldbu	r21,118(sp)
 8007c18:	ddc02415 	stw	r23,144(sp)
 8007c1c:	d8002015 	stw	zero,128(sp)
 8007c20:	003c6606 	br	8006dbc <__alt_data_end+0xfc006dbc>
 8007c24:	0025883a 	mov	r18,zero
 8007c28:	003fbd06 	br	8007b20 <__alt_data_end+0xfc007b20>
 8007c2c:	d9402417 	ldw	r5,144(sp)
 8007c30:	d8c02417 	ldw	r3,144(sp)
 8007c34:	29400017 	ldw	r5,0(r5)
 8007c38:	19000104 	addi	r4,r3,4
 8007c3c:	d9002415 	stw	r4,144(sp)
 8007c40:	d9402015 	stw	r5,128(sp)
 8007c44:	98c00043 	ldbu	r3,1(r19)
 8007c48:	e027883a 	mov	r19,fp
 8007c4c:	283f5b0e 	bge	r5,zero,80079bc <__alt_data_end+0xfc0079bc>
 8007c50:	18c03fcc 	andi	r3,r3,255
 8007c54:	013fffc4 	movi	r4,-1
 8007c58:	18c0201c 	xori	r3,r3,128
 8007c5c:	d9002015 	stw	r4,128(sp)
 8007c60:	18ffe004 	addi	r3,r3,-128
 8007c64:	003b7d06 	br	8006a5c <__alt_data_end+0xfc006a5c>
 8007c68:	dd401d85 	stb	r21,118(sp)
 8007c6c:	003cf306 	br	800703c <__alt_data_end+0xfc00703c>
 8007c70:	dd401d85 	stb	r21,118(sp)
 8007c74:	003d4e06 	br	80071b0 <__alt_data_end+0xfc0071b0>
 8007c78:	dd401d85 	stb	r21,118(sp)
 8007c7c:	003c0e06 	br	8006cb8 <__alt_data_end+0xfc006cb8>
 8007c80:	d9002717 	ldw	r4,156(sp)
 8007c84:	00800304 	movi	r2,12
 8007c88:	20800015 	stw	r2,0(r4)
 8007c8c:	00bfffc4 	movi	r2,-1
 8007c90:	003e6b06 	br	8007640 <__alt_data_end+0xfc007640>
 8007c94:	dd401d85 	stb	r21,118(sp)
 8007c98:	003d0006 	br	800709c <__alt_data_end+0xfc00709c>
 8007c9c:	dd401d85 	stb	r21,118(sp)
 8007ca0:	003d7106 	br	8007268 <__alt_data_end+0xfc007268>
 8007ca4:	dd401d85 	stb	r21,118(sp)
 8007ca8:	003c5706 	br	8006e08 <__alt_data_end+0xfc006e08>
 8007cac:	dd401d85 	stb	r21,118(sp)
 8007cb0:	003c2e06 	br	8006d6c <__alt_data_end+0xfc006d6c>
 8007cb4:	dd401d85 	stb	r21,118(sp)
 8007cb8:	003d8c06 	br	80072ec <__alt_data_end+0xfc0072ec>
 8007cbc:	dd401d85 	stb	r21,118(sp)
 8007cc0:	003da706 	br	8007360 <__alt_data_end+0xfc007360>
 8007cc4:	dd401d85 	stb	r21,118(sp)
 8007cc8:	003cc806 	br	8006fec <__alt_data_end+0xfc006fec>

08007ccc <_calloc_r>:
 8007ccc:	defffe04 	addi	sp,sp,-8
 8007cd0:	2805883a 	mov	r2,r5
 8007cd4:	dc000015 	stw	r16,0(sp)
 8007cd8:	300b883a 	mov	r5,r6
 8007cdc:	2021883a 	mov	r16,r4
 8007ce0:	1009883a 	mov	r4,r2
 8007ce4:	dfc00115 	stw	ra,4(sp)
 8007ce8:	8000c800 	call	8000c80 <__mulsi3>
 8007cec:	100b883a 	mov	r5,r2
 8007cf0:	8009883a 	mov	r4,r16
 8007cf4:	8004ac80 	call	8004ac8 <_malloc_r>
 8007cf8:	10002926 	beq	r2,zero,8007da0 <_calloc_r+0xd4>
 8007cfc:	11bfff17 	ldw	r6,-4(r2)
 8007d00:	1021883a 	mov	r16,r2
 8007d04:	00bfff04 	movi	r2,-4
 8007d08:	308c703a 	and	r6,r6,r2
 8007d0c:	00c00904 	movi	r3,36
 8007d10:	308d883a 	add	r6,r6,r2
 8007d14:	19801636 	bltu	r3,r6,8007d70 <_calloc_r+0xa4>
 8007d18:	008004c4 	movi	r2,19
 8007d1c:	11800b2e 	bgeu	r2,r6,8007d4c <_calloc_r+0x80>
 8007d20:	80000015 	stw	zero,0(r16)
 8007d24:	80000115 	stw	zero,4(r16)
 8007d28:	008006c4 	movi	r2,27
 8007d2c:	11801a2e 	bgeu	r2,r6,8007d98 <_calloc_r+0xcc>
 8007d30:	80000215 	stw	zero,8(r16)
 8007d34:	80000315 	stw	zero,12(r16)
 8007d38:	30c0151e 	bne	r6,r3,8007d90 <_calloc_r+0xc4>
 8007d3c:	80000415 	stw	zero,16(r16)
 8007d40:	80800604 	addi	r2,r16,24
 8007d44:	80000515 	stw	zero,20(r16)
 8007d48:	00000106 	br	8007d50 <_calloc_r+0x84>
 8007d4c:	8005883a 	mov	r2,r16
 8007d50:	10000015 	stw	zero,0(r2)
 8007d54:	10000115 	stw	zero,4(r2)
 8007d58:	10000215 	stw	zero,8(r2)
 8007d5c:	8005883a 	mov	r2,r16
 8007d60:	dfc00117 	ldw	ra,4(sp)
 8007d64:	dc000017 	ldw	r16,0(sp)
 8007d68:	dec00204 	addi	sp,sp,8
 8007d6c:	f800283a 	ret
 8007d70:	000b883a 	mov	r5,zero
 8007d74:	8009883a 	mov	r4,r16
 8007d78:	80083380 	call	8008338 <memset>
 8007d7c:	8005883a 	mov	r2,r16
 8007d80:	dfc00117 	ldw	ra,4(sp)
 8007d84:	dc000017 	ldw	r16,0(sp)
 8007d88:	dec00204 	addi	sp,sp,8
 8007d8c:	f800283a 	ret
 8007d90:	80800404 	addi	r2,r16,16
 8007d94:	003fee06 	br	8007d50 <__alt_data_end+0xfc007d50>
 8007d98:	80800204 	addi	r2,r16,8
 8007d9c:	003fec06 	br	8007d50 <__alt_data_end+0xfc007d50>
 8007da0:	0005883a 	mov	r2,zero
 8007da4:	003fee06 	br	8007d60 <__alt_data_end+0xfc007d60>

08007da8 <_malloc_trim_r>:
 8007da8:	defffb04 	addi	sp,sp,-20
 8007dac:	dcc00315 	stw	r19,12(sp)
 8007db0:	04c20074 	movhi	r19,2049
 8007db4:	dc800215 	stw	r18,8(sp)
 8007db8:	dc400115 	stw	r17,4(sp)
 8007dbc:	dc000015 	stw	r16,0(sp)
 8007dc0:	dfc00415 	stw	ra,16(sp)
 8007dc4:	2821883a 	mov	r16,r5
 8007dc8:	9cfb6f04 	addi	r19,r19,-4676
 8007dcc:	2025883a 	mov	r18,r4
 8007dd0:	800c09c0 	call	800c09c <__malloc_lock>
 8007dd4:	98800217 	ldw	r2,8(r19)
 8007dd8:	14400117 	ldw	r17,4(r2)
 8007ddc:	00bfff04 	movi	r2,-4
 8007de0:	88a2703a 	and	r17,r17,r2
 8007de4:	8c21c83a 	sub	r16,r17,r16
 8007de8:	8403fbc4 	addi	r16,r16,4079
 8007dec:	8020d33a 	srli	r16,r16,12
 8007df0:	0083ffc4 	movi	r2,4095
 8007df4:	843fffc4 	addi	r16,r16,-1
 8007df8:	8020933a 	slli	r16,r16,12
 8007dfc:	1400060e 	bge	r2,r16,8007e18 <_malloc_trim_r+0x70>
 8007e00:	000b883a 	mov	r5,zero
 8007e04:	9009883a 	mov	r4,r18
 8007e08:	800662c0 	call	800662c <_sbrk_r>
 8007e0c:	98c00217 	ldw	r3,8(r19)
 8007e10:	1c47883a 	add	r3,r3,r17
 8007e14:	10c00a26 	beq	r2,r3,8007e40 <_malloc_trim_r+0x98>
 8007e18:	9009883a 	mov	r4,r18
 8007e1c:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8007e20:	0005883a 	mov	r2,zero
 8007e24:	dfc00417 	ldw	ra,16(sp)
 8007e28:	dcc00317 	ldw	r19,12(sp)
 8007e2c:	dc800217 	ldw	r18,8(sp)
 8007e30:	dc400117 	ldw	r17,4(sp)
 8007e34:	dc000017 	ldw	r16,0(sp)
 8007e38:	dec00504 	addi	sp,sp,20
 8007e3c:	f800283a 	ret
 8007e40:	040bc83a 	sub	r5,zero,r16
 8007e44:	9009883a 	mov	r4,r18
 8007e48:	800662c0 	call	800662c <_sbrk_r>
 8007e4c:	00ffffc4 	movi	r3,-1
 8007e50:	10c00d26 	beq	r2,r3,8007e88 <_malloc_trim_r+0xe0>
 8007e54:	00c20074 	movhi	r3,2049
 8007e58:	18c88604 	addi	r3,r3,8728
 8007e5c:	18800017 	ldw	r2,0(r3)
 8007e60:	99000217 	ldw	r4,8(r19)
 8007e64:	8c23c83a 	sub	r17,r17,r16
 8007e68:	8c400054 	ori	r17,r17,1
 8007e6c:	1421c83a 	sub	r16,r2,r16
 8007e70:	24400115 	stw	r17,4(r4)
 8007e74:	9009883a 	mov	r4,r18
 8007e78:	1c000015 	stw	r16,0(r3)
 8007e7c:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8007e80:	00800044 	movi	r2,1
 8007e84:	003fe706 	br	8007e24 <__alt_data_end+0xfc007e24>
 8007e88:	000b883a 	mov	r5,zero
 8007e8c:	9009883a 	mov	r4,r18
 8007e90:	800662c0 	call	800662c <_sbrk_r>
 8007e94:	99000217 	ldw	r4,8(r19)
 8007e98:	014003c4 	movi	r5,15
 8007e9c:	1107c83a 	sub	r3,r2,r4
 8007ea0:	28ffdd0e 	bge	r5,r3,8007e18 <__alt_data_end+0xfc007e18>
 8007ea4:	01420074 	movhi	r5,2049
 8007ea8:	2940f804 	addi	r5,r5,992
 8007eac:	29400017 	ldw	r5,0(r5)
 8007eb0:	18c00054 	ori	r3,r3,1
 8007eb4:	20c00115 	stw	r3,4(r4)
 8007eb8:	00c20074 	movhi	r3,2049
 8007ebc:	1145c83a 	sub	r2,r2,r5
 8007ec0:	18c88604 	addi	r3,r3,8728
 8007ec4:	18800015 	stw	r2,0(r3)
 8007ec8:	003fd306 	br	8007e18 <__alt_data_end+0xfc007e18>

08007ecc <_free_r>:
 8007ecc:	28004126 	beq	r5,zero,8007fd4 <_free_r+0x108>
 8007ed0:	defffd04 	addi	sp,sp,-12
 8007ed4:	dc400115 	stw	r17,4(sp)
 8007ed8:	dc000015 	stw	r16,0(sp)
 8007edc:	2023883a 	mov	r17,r4
 8007ee0:	2821883a 	mov	r16,r5
 8007ee4:	dfc00215 	stw	ra,8(sp)
 8007ee8:	800c09c0 	call	800c09c <__malloc_lock>
 8007eec:	81ffff17 	ldw	r7,-4(r16)
 8007ef0:	00bfff84 	movi	r2,-2
 8007ef4:	01020074 	movhi	r4,2049
 8007ef8:	81bffe04 	addi	r6,r16,-8
 8007efc:	3884703a 	and	r2,r7,r2
 8007f00:	213b6f04 	addi	r4,r4,-4676
 8007f04:	308b883a 	add	r5,r6,r2
 8007f08:	2a400117 	ldw	r9,4(r5)
 8007f0c:	22000217 	ldw	r8,8(r4)
 8007f10:	00ffff04 	movi	r3,-4
 8007f14:	48c6703a 	and	r3,r9,r3
 8007f18:	2a005726 	beq	r5,r8,8008078 <_free_r+0x1ac>
 8007f1c:	28c00115 	stw	r3,4(r5)
 8007f20:	39c0004c 	andi	r7,r7,1
 8007f24:	3800091e 	bne	r7,zero,8007f4c <_free_r+0x80>
 8007f28:	823ffe17 	ldw	r8,-8(r16)
 8007f2c:	22400204 	addi	r9,r4,8
 8007f30:	320dc83a 	sub	r6,r6,r8
 8007f34:	31c00217 	ldw	r7,8(r6)
 8007f38:	1205883a 	add	r2,r2,r8
 8007f3c:	3a406526 	beq	r7,r9,80080d4 <_free_r+0x208>
 8007f40:	32000317 	ldw	r8,12(r6)
 8007f44:	3a000315 	stw	r8,12(r7)
 8007f48:	41c00215 	stw	r7,8(r8)
 8007f4c:	28cf883a 	add	r7,r5,r3
 8007f50:	39c00117 	ldw	r7,4(r7)
 8007f54:	39c0004c 	andi	r7,r7,1
 8007f58:	38003a26 	beq	r7,zero,8008044 <_free_r+0x178>
 8007f5c:	10c00054 	ori	r3,r2,1
 8007f60:	30c00115 	stw	r3,4(r6)
 8007f64:	3087883a 	add	r3,r6,r2
 8007f68:	18800015 	stw	r2,0(r3)
 8007f6c:	00c07fc4 	movi	r3,511
 8007f70:	18801936 	bltu	r3,r2,8007fd8 <_free_r+0x10c>
 8007f74:	1004d0fa 	srli	r2,r2,3
 8007f78:	01c00044 	movi	r7,1
 8007f7c:	21400117 	ldw	r5,4(r4)
 8007f80:	10c00044 	addi	r3,r2,1
 8007f84:	18c7883a 	add	r3,r3,r3
 8007f88:	1005d0ba 	srai	r2,r2,2
 8007f8c:	18c7883a 	add	r3,r3,r3
 8007f90:	18c7883a 	add	r3,r3,r3
 8007f94:	1907883a 	add	r3,r3,r4
 8007f98:	3884983a 	sll	r2,r7,r2
 8007f9c:	19c00017 	ldw	r7,0(r3)
 8007fa0:	1a3ffe04 	addi	r8,r3,-8
 8007fa4:	1144b03a 	or	r2,r2,r5
 8007fa8:	32000315 	stw	r8,12(r6)
 8007fac:	31c00215 	stw	r7,8(r6)
 8007fb0:	20800115 	stw	r2,4(r4)
 8007fb4:	19800015 	stw	r6,0(r3)
 8007fb8:	39800315 	stw	r6,12(r7)
 8007fbc:	8809883a 	mov	r4,r17
 8007fc0:	dfc00217 	ldw	ra,8(sp)
 8007fc4:	dc400117 	ldw	r17,4(sp)
 8007fc8:	dc000017 	ldw	r16,0(sp)
 8007fcc:	dec00304 	addi	sp,sp,12
 8007fd0:	800c0c01 	jmpi	800c0c0 <__malloc_unlock>
 8007fd4:	f800283a 	ret
 8007fd8:	100ad27a 	srli	r5,r2,9
 8007fdc:	00c00104 	movi	r3,4
 8007fe0:	19404a36 	bltu	r3,r5,800810c <_free_r+0x240>
 8007fe4:	100ad1ba 	srli	r5,r2,6
 8007fe8:	28c00e44 	addi	r3,r5,57
 8007fec:	18c7883a 	add	r3,r3,r3
 8007ff0:	29400e04 	addi	r5,r5,56
 8007ff4:	18c7883a 	add	r3,r3,r3
 8007ff8:	18c7883a 	add	r3,r3,r3
 8007ffc:	1909883a 	add	r4,r3,r4
 8008000:	20c00017 	ldw	r3,0(r4)
 8008004:	01c20074 	movhi	r7,2049
 8008008:	213ffe04 	addi	r4,r4,-8
 800800c:	39fb6f04 	addi	r7,r7,-4676
 8008010:	20c04426 	beq	r4,r3,8008124 <_free_r+0x258>
 8008014:	01ffff04 	movi	r7,-4
 8008018:	19400117 	ldw	r5,4(r3)
 800801c:	29ca703a 	and	r5,r5,r7
 8008020:	1140022e 	bgeu	r2,r5,800802c <_free_r+0x160>
 8008024:	18c00217 	ldw	r3,8(r3)
 8008028:	20fffb1e 	bne	r4,r3,8008018 <__alt_data_end+0xfc008018>
 800802c:	19000317 	ldw	r4,12(r3)
 8008030:	31000315 	stw	r4,12(r6)
 8008034:	30c00215 	stw	r3,8(r6)
 8008038:	21800215 	stw	r6,8(r4)
 800803c:	19800315 	stw	r6,12(r3)
 8008040:	003fde06 	br	8007fbc <__alt_data_end+0xfc007fbc>
 8008044:	29c00217 	ldw	r7,8(r5)
 8008048:	10c5883a 	add	r2,r2,r3
 800804c:	00c20074 	movhi	r3,2049
 8008050:	18fb7104 	addi	r3,r3,-4668
 8008054:	38c03b26 	beq	r7,r3,8008144 <_free_r+0x278>
 8008058:	2a000317 	ldw	r8,12(r5)
 800805c:	11400054 	ori	r5,r2,1
 8008060:	3087883a 	add	r3,r6,r2
 8008064:	3a000315 	stw	r8,12(r7)
 8008068:	41c00215 	stw	r7,8(r8)
 800806c:	31400115 	stw	r5,4(r6)
 8008070:	18800015 	stw	r2,0(r3)
 8008074:	003fbd06 	br	8007f6c <__alt_data_end+0xfc007f6c>
 8008078:	39c0004c 	andi	r7,r7,1
 800807c:	10c5883a 	add	r2,r2,r3
 8008080:	3800071e 	bne	r7,zero,80080a0 <_free_r+0x1d4>
 8008084:	81fffe17 	ldw	r7,-8(r16)
 8008088:	31cdc83a 	sub	r6,r6,r7
 800808c:	30c00317 	ldw	r3,12(r6)
 8008090:	31400217 	ldw	r5,8(r6)
 8008094:	11c5883a 	add	r2,r2,r7
 8008098:	28c00315 	stw	r3,12(r5)
 800809c:	19400215 	stw	r5,8(r3)
 80080a0:	10c00054 	ori	r3,r2,1
 80080a4:	30c00115 	stw	r3,4(r6)
 80080a8:	00c20074 	movhi	r3,2049
 80080ac:	18c0f904 	addi	r3,r3,996
 80080b0:	18c00017 	ldw	r3,0(r3)
 80080b4:	21800215 	stw	r6,8(r4)
 80080b8:	10ffc036 	bltu	r2,r3,8007fbc <__alt_data_end+0xfc007fbc>
 80080bc:	00820074 	movhi	r2,2049
 80080c0:	10887d04 	addi	r2,r2,8692
 80080c4:	11400017 	ldw	r5,0(r2)
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	8007da80 	call	8007da8 <_malloc_trim_r>
 80080d0:	003fba06 	br	8007fbc <__alt_data_end+0xfc007fbc>
 80080d4:	28c9883a 	add	r4,r5,r3
 80080d8:	21000117 	ldw	r4,4(r4)
 80080dc:	2100004c 	andi	r4,r4,1
 80080e0:	2000391e 	bne	r4,zero,80081c8 <_free_r+0x2fc>
 80080e4:	29c00217 	ldw	r7,8(r5)
 80080e8:	29000317 	ldw	r4,12(r5)
 80080ec:	1885883a 	add	r2,r3,r2
 80080f0:	10c00054 	ori	r3,r2,1
 80080f4:	39000315 	stw	r4,12(r7)
 80080f8:	21c00215 	stw	r7,8(r4)
 80080fc:	30c00115 	stw	r3,4(r6)
 8008100:	308d883a 	add	r6,r6,r2
 8008104:	30800015 	stw	r2,0(r6)
 8008108:	003fac06 	br	8007fbc <__alt_data_end+0xfc007fbc>
 800810c:	00c00504 	movi	r3,20
 8008110:	19401536 	bltu	r3,r5,8008168 <_free_r+0x29c>
 8008114:	28c01704 	addi	r3,r5,92
 8008118:	18c7883a 	add	r3,r3,r3
 800811c:	294016c4 	addi	r5,r5,91
 8008120:	003fb406 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 8008124:	280bd0ba 	srai	r5,r5,2
 8008128:	00c00044 	movi	r3,1
 800812c:	38800117 	ldw	r2,4(r7)
 8008130:	194a983a 	sll	r5,r3,r5
 8008134:	2007883a 	mov	r3,r4
 8008138:	2884b03a 	or	r2,r5,r2
 800813c:	38800115 	stw	r2,4(r7)
 8008140:	003fbb06 	br	8008030 <__alt_data_end+0xfc008030>
 8008144:	21800515 	stw	r6,20(r4)
 8008148:	21800415 	stw	r6,16(r4)
 800814c:	10c00054 	ori	r3,r2,1
 8008150:	31c00315 	stw	r7,12(r6)
 8008154:	31c00215 	stw	r7,8(r6)
 8008158:	30c00115 	stw	r3,4(r6)
 800815c:	308d883a 	add	r6,r6,r2
 8008160:	30800015 	stw	r2,0(r6)
 8008164:	003f9506 	br	8007fbc <__alt_data_end+0xfc007fbc>
 8008168:	00c01504 	movi	r3,84
 800816c:	19400536 	bltu	r3,r5,8008184 <_free_r+0x2b8>
 8008170:	100ad33a 	srli	r5,r2,12
 8008174:	28c01bc4 	addi	r3,r5,111
 8008178:	18c7883a 	add	r3,r3,r3
 800817c:	29401b84 	addi	r5,r5,110
 8008180:	003f9c06 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 8008184:	00c05504 	movi	r3,340
 8008188:	19400536 	bltu	r3,r5,80081a0 <_free_r+0x2d4>
 800818c:	100ad3fa 	srli	r5,r2,15
 8008190:	28c01e04 	addi	r3,r5,120
 8008194:	18c7883a 	add	r3,r3,r3
 8008198:	29401dc4 	addi	r5,r5,119
 800819c:	003f9506 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 80081a0:	00c15504 	movi	r3,1364
 80081a4:	19400536 	bltu	r3,r5,80081bc <_free_r+0x2f0>
 80081a8:	100ad4ba 	srli	r5,r2,18
 80081ac:	28c01f44 	addi	r3,r5,125
 80081b0:	18c7883a 	add	r3,r3,r3
 80081b4:	29401f04 	addi	r5,r5,124
 80081b8:	003f8e06 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 80081bc:	00c03f84 	movi	r3,254
 80081c0:	01401f84 	movi	r5,126
 80081c4:	003f8b06 	br	8007ff4 <__alt_data_end+0xfc007ff4>
 80081c8:	10c00054 	ori	r3,r2,1
 80081cc:	30c00115 	stw	r3,4(r6)
 80081d0:	308d883a 	add	r6,r6,r2
 80081d4:	30800015 	stw	r2,0(r6)
 80081d8:	003f7806 	br	8007fbc <__alt_data_end+0xfc007fbc>

080081dc <memmove>:
 80081dc:	2005883a 	mov	r2,r4
 80081e0:	29000b2e 	bgeu	r5,r4,8008210 <memmove+0x34>
 80081e4:	298f883a 	add	r7,r5,r6
 80081e8:	21c0092e 	bgeu	r4,r7,8008210 <memmove+0x34>
 80081ec:	2187883a 	add	r3,r4,r6
 80081f0:	198bc83a 	sub	r5,r3,r6
 80081f4:	30004826 	beq	r6,zero,8008318 <memmove+0x13c>
 80081f8:	39ffffc4 	addi	r7,r7,-1
 80081fc:	39000003 	ldbu	r4,0(r7)
 8008200:	18ffffc4 	addi	r3,r3,-1
 8008204:	19000005 	stb	r4,0(r3)
 8008208:	28fffb1e 	bne	r5,r3,80081f8 <__alt_data_end+0xfc0081f8>
 800820c:	f800283a 	ret
 8008210:	00c003c4 	movi	r3,15
 8008214:	1980412e 	bgeu	r3,r6,800831c <memmove+0x140>
 8008218:	2886b03a 	or	r3,r5,r2
 800821c:	18c000cc 	andi	r3,r3,3
 8008220:	1800401e 	bne	r3,zero,8008324 <memmove+0x148>
 8008224:	33fffc04 	addi	r15,r6,-16
 8008228:	781ed13a 	srli	r15,r15,4
 800822c:	28c00104 	addi	r3,r5,4
 8008230:	13400104 	addi	r13,r2,4
 8008234:	781c913a 	slli	r14,r15,4
 8008238:	2b000204 	addi	r12,r5,8
 800823c:	12c00204 	addi	r11,r2,8
 8008240:	73800504 	addi	r14,r14,20
 8008244:	2a800304 	addi	r10,r5,12
 8008248:	12400304 	addi	r9,r2,12
 800824c:	2b9d883a 	add	r14,r5,r14
 8008250:	2811883a 	mov	r8,r5
 8008254:	100f883a 	mov	r7,r2
 8008258:	41000017 	ldw	r4,0(r8)
 800825c:	39c00404 	addi	r7,r7,16
 8008260:	18c00404 	addi	r3,r3,16
 8008264:	393ffc15 	stw	r4,-16(r7)
 8008268:	193ffc17 	ldw	r4,-16(r3)
 800826c:	6b400404 	addi	r13,r13,16
 8008270:	5ac00404 	addi	r11,r11,16
 8008274:	693ffc15 	stw	r4,-16(r13)
 8008278:	61000017 	ldw	r4,0(r12)
 800827c:	4a400404 	addi	r9,r9,16
 8008280:	42000404 	addi	r8,r8,16
 8008284:	593ffc15 	stw	r4,-16(r11)
 8008288:	51000017 	ldw	r4,0(r10)
 800828c:	63000404 	addi	r12,r12,16
 8008290:	52800404 	addi	r10,r10,16
 8008294:	493ffc15 	stw	r4,-16(r9)
 8008298:	1bbfef1e 	bne	r3,r14,8008258 <__alt_data_end+0xfc008258>
 800829c:	79000044 	addi	r4,r15,1
 80082a0:	2008913a 	slli	r4,r4,4
 80082a4:	328003cc 	andi	r10,r6,15
 80082a8:	02c000c4 	movi	r11,3
 80082ac:	1107883a 	add	r3,r2,r4
 80082b0:	290b883a 	add	r5,r5,r4
 80082b4:	5a801e2e 	bgeu	r11,r10,8008330 <memmove+0x154>
 80082b8:	1813883a 	mov	r9,r3
 80082bc:	2811883a 	mov	r8,r5
 80082c0:	500f883a 	mov	r7,r10
 80082c4:	41000017 	ldw	r4,0(r8)
 80082c8:	4a400104 	addi	r9,r9,4
 80082cc:	39ffff04 	addi	r7,r7,-4
 80082d0:	493fff15 	stw	r4,-4(r9)
 80082d4:	42000104 	addi	r8,r8,4
 80082d8:	59fffa36 	bltu	r11,r7,80082c4 <__alt_data_end+0xfc0082c4>
 80082dc:	513fff04 	addi	r4,r10,-4
 80082e0:	2008d0ba 	srli	r4,r4,2
 80082e4:	318000cc 	andi	r6,r6,3
 80082e8:	21000044 	addi	r4,r4,1
 80082ec:	2109883a 	add	r4,r4,r4
 80082f0:	2109883a 	add	r4,r4,r4
 80082f4:	1907883a 	add	r3,r3,r4
 80082f8:	290b883a 	add	r5,r5,r4
 80082fc:	30000b26 	beq	r6,zero,800832c <memmove+0x150>
 8008300:	198d883a 	add	r6,r3,r6
 8008304:	29c00003 	ldbu	r7,0(r5)
 8008308:	18c00044 	addi	r3,r3,1
 800830c:	29400044 	addi	r5,r5,1
 8008310:	19ffffc5 	stb	r7,-1(r3)
 8008314:	19bffb1e 	bne	r3,r6,8008304 <__alt_data_end+0xfc008304>
 8008318:	f800283a 	ret
 800831c:	1007883a 	mov	r3,r2
 8008320:	003ff606 	br	80082fc <__alt_data_end+0xfc0082fc>
 8008324:	1007883a 	mov	r3,r2
 8008328:	003ff506 	br	8008300 <__alt_data_end+0xfc008300>
 800832c:	f800283a 	ret
 8008330:	500d883a 	mov	r6,r10
 8008334:	003ff106 	br	80082fc <__alt_data_end+0xfc0082fc>

08008338 <memset>:
 8008338:	20c000cc 	andi	r3,r4,3
 800833c:	2005883a 	mov	r2,r4
 8008340:	18004426 	beq	r3,zero,8008454 <memset+0x11c>
 8008344:	31ffffc4 	addi	r7,r6,-1
 8008348:	30004026 	beq	r6,zero,800844c <memset+0x114>
 800834c:	2813883a 	mov	r9,r5
 8008350:	200d883a 	mov	r6,r4
 8008354:	2007883a 	mov	r3,r4
 8008358:	00000406 	br	800836c <memset+0x34>
 800835c:	3a3fffc4 	addi	r8,r7,-1
 8008360:	31800044 	addi	r6,r6,1
 8008364:	38003926 	beq	r7,zero,800844c <memset+0x114>
 8008368:	400f883a 	mov	r7,r8
 800836c:	18c00044 	addi	r3,r3,1
 8008370:	32400005 	stb	r9,0(r6)
 8008374:	1a0000cc 	andi	r8,r3,3
 8008378:	403ff81e 	bne	r8,zero,800835c <__alt_data_end+0xfc00835c>
 800837c:	010000c4 	movi	r4,3
 8008380:	21c02d2e 	bgeu	r4,r7,8008438 <memset+0x100>
 8008384:	29003fcc 	andi	r4,r5,255
 8008388:	200c923a 	slli	r6,r4,8
 800838c:	3108b03a 	or	r4,r6,r4
 8008390:	200c943a 	slli	r6,r4,16
 8008394:	218cb03a 	or	r6,r4,r6
 8008398:	010003c4 	movi	r4,15
 800839c:	21c0182e 	bgeu	r4,r7,8008400 <memset+0xc8>
 80083a0:	3b3ffc04 	addi	r12,r7,-16
 80083a4:	6018d13a 	srli	r12,r12,4
 80083a8:	1a000104 	addi	r8,r3,4
 80083ac:	1ac00204 	addi	r11,r3,8
 80083b0:	6008913a 	slli	r4,r12,4
 80083b4:	1a800304 	addi	r10,r3,12
 80083b8:	1813883a 	mov	r9,r3
 80083bc:	21000504 	addi	r4,r4,20
 80083c0:	1909883a 	add	r4,r3,r4
 80083c4:	49800015 	stw	r6,0(r9)
 80083c8:	41800015 	stw	r6,0(r8)
 80083cc:	59800015 	stw	r6,0(r11)
 80083d0:	51800015 	stw	r6,0(r10)
 80083d4:	42000404 	addi	r8,r8,16
 80083d8:	4a400404 	addi	r9,r9,16
 80083dc:	5ac00404 	addi	r11,r11,16
 80083e0:	52800404 	addi	r10,r10,16
 80083e4:	413ff71e 	bne	r8,r4,80083c4 <__alt_data_end+0xfc0083c4>
 80083e8:	63000044 	addi	r12,r12,1
 80083ec:	6018913a 	slli	r12,r12,4
 80083f0:	39c003cc 	andi	r7,r7,15
 80083f4:	010000c4 	movi	r4,3
 80083f8:	1b07883a 	add	r3,r3,r12
 80083fc:	21c00e2e 	bgeu	r4,r7,8008438 <memset+0x100>
 8008400:	1813883a 	mov	r9,r3
 8008404:	3811883a 	mov	r8,r7
 8008408:	010000c4 	movi	r4,3
 800840c:	49800015 	stw	r6,0(r9)
 8008410:	423fff04 	addi	r8,r8,-4
 8008414:	4a400104 	addi	r9,r9,4
 8008418:	223ffc36 	bltu	r4,r8,800840c <__alt_data_end+0xfc00840c>
 800841c:	393fff04 	addi	r4,r7,-4
 8008420:	2008d0ba 	srli	r4,r4,2
 8008424:	39c000cc 	andi	r7,r7,3
 8008428:	21000044 	addi	r4,r4,1
 800842c:	2109883a 	add	r4,r4,r4
 8008430:	2109883a 	add	r4,r4,r4
 8008434:	1907883a 	add	r3,r3,r4
 8008438:	38000526 	beq	r7,zero,8008450 <memset+0x118>
 800843c:	19cf883a 	add	r7,r3,r7
 8008440:	19400005 	stb	r5,0(r3)
 8008444:	18c00044 	addi	r3,r3,1
 8008448:	38fffd1e 	bne	r7,r3,8008440 <__alt_data_end+0xfc008440>
 800844c:	f800283a 	ret
 8008450:	f800283a 	ret
 8008454:	2007883a 	mov	r3,r4
 8008458:	300f883a 	mov	r7,r6
 800845c:	003fc706 	br	800837c <__alt_data_end+0xfc00837c>

08008460 <_realloc_r>:
 8008460:	defff604 	addi	sp,sp,-40
 8008464:	dc800215 	stw	r18,8(sp)
 8008468:	dfc00915 	stw	ra,36(sp)
 800846c:	df000815 	stw	fp,32(sp)
 8008470:	ddc00715 	stw	r23,28(sp)
 8008474:	dd800615 	stw	r22,24(sp)
 8008478:	dd400515 	stw	r21,20(sp)
 800847c:	dd000415 	stw	r20,16(sp)
 8008480:	dcc00315 	stw	r19,12(sp)
 8008484:	dc400115 	stw	r17,4(sp)
 8008488:	dc000015 	stw	r16,0(sp)
 800848c:	3025883a 	mov	r18,r6
 8008490:	2800b726 	beq	r5,zero,8008770 <_realloc_r+0x310>
 8008494:	282b883a 	mov	r21,r5
 8008498:	2029883a 	mov	r20,r4
 800849c:	800c09c0 	call	800c09c <__malloc_lock>
 80084a0:	a8bfff17 	ldw	r2,-4(r21)
 80084a4:	043fff04 	movi	r16,-4
 80084a8:	90c002c4 	addi	r3,r18,11
 80084ac:	01000584 	movi	r4,22
 80084b0:	acfffe04 	addi	r19,r21,-8
 80084b4:	1420703a 	and	r16,r2,r16
 80084b8:	20c0332e 	bgeu	r4,r3,8008588 <_realloc_r+0x128>
 80084bc:	047ffe04 	movi	r17,-8
 80084c0:	1c62703a 	and	r17,r3,r17
 80084c4:	8807883a 	mov	r3,r17
 80084c8:	88005816 	blt	r17,zero,800862c <_realloc_r+0x1cc>
 80084cc:	8c805736 	bltu	r17,r18,800862c <_realloc_r+0x1cc>
 80084d0:	80c0300e 	bge	r16,r3,8008594 <_realloc_r+0x134>
 80084d4:	07020074 	movhi	fp,2049
 80084d8:	e73b6f04 	addi	fp,fp,-4676
 80084dc:	e1c00217 	ldw	r7,8(fp)
 80084e0:	9c09883a 	add	r4,r19,r16
 80084e4:	22000117 	ldw	r8,4(r4)
 80084e8:	21c06326 	beq	r4,r7,8008678 <_realloc_r+0x218>
 80084ec:	017fff84 	movi	r5,-2
 80084f0:	414a703a 	and	r5,r8,r5
 80084f4:	214b883a 	add	r5,r4,r5
 80084f8:	29800117 	ldw	r6,4(r5)
 80084fc:	3180004c 	andi	r6,r6,1
 8008500:	30003f26 	beq	r6,zero,8008600 <_realloc_r+0x1a0>
 8008504:	1080004c 	andi	r2,r2,1
 8008508:	10008326 	beq	r2,zero,8008718 <_realloc_r+0x2b8>
 800850c:	900b883a 	mov	r5,r18
 8008510:	a009883a 	mov	r4,r20
 8008514:	8004ac80 	call	8004ac8 <_malloc_r>
 8008518:	1025883a 	mov	r18,r2
 800851c:	10011e26 	beq	r2,zero,8008998 <_realloc_r+0x538>
 8008520:	a93fff17 	ldw	r4,-4(r21)
 8008524:	10fffe04 	addi	r3,r2,-8
 8008528:	00bfff84 	movi	r2,-2
 800852c:	2084703a 	and	r2,r4,r2
 8008530:	9885883a 	add	r2,r19,r2
 8008534:	1880ee26 	beq	r3,r2,80088f0 <_realloc_r+0x490>
 8008538:	81bfff04 	addi	r6,r16,-4
 800853c:	00800904 	movi	r2,36
 8008540:	1180b836 	bltu	r2,r6,8008824 <_realloc_r+0x3c4>
 8008544:	00c004c4 	movi	r3,19
 8008548:	19809636 	bltu	r3,r6,80087a4 <_realloc_r+0x344>
 800854c:	9005883a 	mov	r2,r18
 8008550:	a807883a 	mov	r3,r21
 8008554:	19000017 	ldw	r4,0(r3)
 8008558:	11000015 	stw	r4,0(r2)
 800855c:	19000117 	ldw	r4,4(r3)
 8008560:	11000115 	stw	r4,4(r2)
 8008564:	18c00217 	ldw	r3,8(r3)
 8008568:	10c00215 	stw	r3,8(r2)
 800856c:	a80b883a 	mov	r5,r21
 8008570:	a009883a 	mov	r4,r20
 8008574:	8007ecc0 	call	8007ecc <_free_r>
 8008578:	a009883a 	mov	r4,r20
 800857c:	800c0c00 	call	800c0c0 <__malloc_unlock>
 8008580:	9005883a 	mov	r2,r18
 8008584:	00001206 	br	80085d0 <_realloc_r+0x170>
 8008588:	00c00404 	movi	r3,16
 800858c:	1823883a 	mov	r17,r3
 8008590:	003fce06 	br	80084cc <__alt_data_end+0xfc0084cc>
 8008594:	a825883a 	mov	r18,r21
 8008598:	8445c83a 	sub	r2,r16,r17
 800859c:	00c003c4 	movi	r3,15
 80085a0:	18802636 	bltu	r3,r2,800863c <_realloc_r+0x1dc>
 80085a4:	99800117 	ldw	r6,4(r19)
 80085a8:	9c07883a 	add	r3,r19,r16
 80085ac:	3180004c 	andi	r6,r6,1
 80085b0:	3420b03a 	or	r16,r6,r16
 80085b4:	9c000115 	stw	r16,4(r19)
 80085b8:	18800117 	ldw	r2,4(r3)
 80085bc:	10800054 	ori	r2,r2,1
 80085c0:	18800115 	stw	r2,4(r3)
 80085c4:	a009883a 	mov	r4,r20
 80085c8:	800c0c00 	call	800c0c0 <__malloc_unlock>
 80085cc:	9005883a 	mov	r2,r18
 80085d0:	dfc00917 	ldw	ra,36(sp)
 80085d4:	df000817 	ldw	fp,32(sp)
 80085d8:	ddc00717 	ldw	r23,28(sp)
 80085dc:	dd800617 	ldw	r22,24(sp)
 80085e0:	dd400517 	ldw	r21,20(sp)
 80085e4:	dd000417 	ldw	r20,16(sp)
 80085e8:	dcc00317 	ldw	r19,12(sp)
 80085ec:	dc800217 	ldw	r18,8(sp)
 80085f0:	dc400117 	ldw	r17,4(sp)
 80085f4:	dc000017 	ldw	r16,0(sp)
 80085f8:	dec00a04 	addi	sp,sp,40
 80085fc:	f800283a 	ret
 8008600:	017fff04 	movi	r5,-4
 8008604:	414a703a 	and	r5,r8,r5
 8008608:	814d883a 	add	r6,r16,r5
 800860c:	30c01f16 	blt	r6,r3,800868c <_realloc_r+0x22c>
 8008610:	20800317 	ldw	r2,12(r4)
 8008614:	20c00217 	ldw	r3,8(r4)
 8008618:	a825883a 	mov	r18,r21
 800861c:	3021883a 	mov	r16,r6
 8008620:	18800315 	stw	r2,12(r3)
 8008624:	10c00215 	stw	r3,8(r2)
 8008628:	003fdb06 	br	8008598 <__alt_data_end+0xfc008598>
 800862c:	00800304 	movi	r2,12
 8008630:	a0800015 	stw	r2,0(r20)
 8008634:	0005883a 	mov	r2,zero
 8008638:	003fe506 	br	80085d0 <__alt_data_end+0xfc0085d0>
 800863c:	98c00117 	ldw	r3,4(r19)
 8008640:	9c4b883a 	add	r5,r19,r17
 8008644:	11000054 	ori	r4,r2,1
 8008648:	18c0004c 	andi	r3,r3,1
 800864c:	1c62b03a 	or	r17,r3,r17
 8008650:	9c400115 	stw	r17,4(r19)
 8008654:	29000115 	stw	r4,4(r5)
 8008658:	2885883a 	add	r2,r5,r2
 800865c:	10c00117 	ldw	r3,4(r2)
 8008660:	29400204 	addi	r5,r5,8
 8008664:	a009883a 	mov	r4,r20
 8008668:	18c00054 	ori	r3,r3,1
 800866c:	10c00115 	stw	r3,4(r2)
 8008670:	8007ecc0 	call	8007ecc <_free_r>
 8008674:	003fd306 	br	80085c4 <__alt_data_end+0xfc0085c4>
 8008678:	017fff04 	movi	r5,-4
 800867c:	414a703a 	and	r5,r8,r5
 8008680:	89800404 	addi	r6,r17,16
 8008684:	8151883a 	add	r8,r16,r5
 8008688:	4180590e 	bge	r8,r6,80087f0 <_realloc_r+0x390>
 800868c:	1080004c 	andi	r2,r2,1
 8008690:	103f9e1e 	bne	r2,zero,800850c <__alt_data_end+0xfc00850c>
 8008694:	adbffe17 	ldw	r22,-8(r21)
 8008698:	00bfff04 	movi	r2,-4
 800869c:	9dadc83a 	sub	r22,r19,r22
 80086a0:	b1800117 	ldw	r6,4(r22)
 80086a4:	3084703a 	and	r2,r6,r2
 80086a8:	20002026 	beq	r4,zero,800872c <_realloc_r+0x2cc>
 80086ac:	80af883a 	add	r23,r16,r2
 80086b0:	b96f883a 	add	r23,r23,r5
 80086b4:	21c05f26 	beq	r4,r7,8008834 <_realloc_r+0x3d4>
 80086b8:	b8c01c16 	blt	r23,r3,800872c <_realloc_r+0x2cc>
 80086bc:	20800317 	ldw	r2,12(r4)
 80086c0:	20c00217 	ldw	r3,8(r4)
 80086c4:	81bfff04 	addi	r6,r16,-4
 80086c8:	01000904 	movi	r4,36
 80086cc:	18800315 	stw	r2,12(r3)
 80086d0:	10c00215 	stw	r3,8(r2)
 80086d4:	b0c00217 	ldw	r3,8(r22)
 80086d8:	b0800317 	ldw	r2,12(r22)
 80086dc:	b4800204 	addi	r18,r22,8
 80086e0:	18800315 	stw	r2,12(r3)
 80086e4:	10c00215 	stw	r3,8(r2)
 80086e8:	21801b36 	bltu	r4,r6,8008758 <_realloc_r+0x2f8>
 80086ec:	008004c4 	movi	r2,19
 80086f0:	1180352e 	bgeu	r2,r6,80087c8 <_realloc_r+0x368>
 80086f4:	a8800017 	ldw	r2,0(r21)
 80086f8:	b0800215 	stw	r2,8(r22)
 80086fc:	a8800117 	ldw	r2,4(r21)
 8008700:	b0800315 	stw	r2,12(r22)
 8008704:	008006c4 	movi	r2,27
 8008708:	11807f36 	bltu	r2,r6,8008908 <_realloc_r+0x4a8>
 800870c:	b0800404 	addi	r2,r22,16
 8008710:	ad400204 	addi	r21,r21,8
 8008714:	00002d06 	br	80087cc <_realloc_r+0x36c>
 8008718:	adbffe17 	ldw	r22,-8(r21)
 800871c:	00bfff04 	movi	r2,-4
 8008720:	9dadc83a 	sub	r22,r19,r22
 8008724:	b1000117 	ldw	r4,4(r22)
 8008728:	2084703a 	and	r2,r4,r2
 800872c:	b03f7726 	beq	r22,zero,800850c <__alt_data_end+0xfc00850c>
 8008730:	80af883a 	add	r23,r16,r2
 8008734:	b8ff7516 	blt	r23,r3,800850c <__alt_data_end+0xfc00850c>
 8008738:	b0800317 	ldw	r2,12(r22)
 800873c:	b0c00217 	ldw	r3,8(r22)
 8008740:	81bfff04 	addi	r6,r16,-4
 8008744:	01000904 	movi	r4,36
 8008748:	18800315 	stw	r2,12(r3)
 800874c:	10c00215 	stw	r3,8(r2)
 8008750:	b4800204 	addi	r18,r22,8
 8008754:	21bfe52e 	bgeu	r4,r6,80086ec <__alt_data_end+0xfc0086ec>
 8008758:	a80b883a 	mov	r5,r21
 800875c:	9009883a 	mov	r4,r18
 8008760:	80081dc0 	call	80081dc <memmove>
 8008764:	b821883a 	mov	r16,r23
 8008768:	b027883a 	mov	r19,r22
 800876c:	003f8a06 	br	8008598 <__alt_data_end+0xfc008598>
 8008770:	300b883a 	mov	r5,r6
 8008774:	dfc00917 	ldw	ra,36(sp)
 8008778:	df000817 	ldw	fp,32(sp)
 800877c:	ddc00717 	ldw	r23,28(sp)
 8008780:	dd800617 	ldw	r22,24(sp)
 8008784:	dd400517 	ldw	r21,20(sp)
 8008788:	dd000417 	ldw	r20,16(sp)
 800878c:	dcc00317 	ldw	r19,12(sp)
 8008790:	dc800217 	ldw	r18,8(sp)
 8008794:	dc400117 	ldw	r17,4(sp)
 8008798:	dc000017 	ldw	r16,0(sp)
 800879c:	dec00a04 	addi	sp,sp,40
 80087a0:	8004ac81 	jmpi	8004ac8 <_malloc_r>
 80087a4:	a8c00017 	ldw	r3,0(r21)
 80087a8:	90c00015 	stw	r3,0(r18)
 80087ac:	a8c00117 	ldw	r3,4(r21)
 80087b0:	90c00115 	stw	r3,4(r18)
 80087b4:	00c006c4 	movi	r3,27
 80087b8:	19804536 	bltu	r3,r6,80088d0 <_realloc_r+0x470>
 80087bc:	90800204 	addi	r2,r18,8
 80087c0:	a8c00204 	addi	r3,r21,8
 80087c4:	003f6306 	br	8008554 <__alt_data_end+0xfc008554>
 80087c8:	9005883a 	mov	r2,r18
 80087cc:	a8c00017 	ldw	r3,0(r21)
 80087d0:	b821883a 	mov	r16,r23
 80087d4:	b027883a 	mov	r19,r22
 80087d8:	10c00015 	stw	r3,0(r2)
 80087dc:	a8c00117 	ldw	r3,4(r21)
 80087e0:	10c00115 	stw	r3,4(r2)
 80087e4:	a8c00217 	ldw	r3,8(r21)
 80087e8:	10c00215 	stw	r3,8(r2)
 80087ec:	003f6a06 	br	8008598 <__alt_data_end+0xfc008598>
 80087f0:	9c67883a 	add	r19,r19,r17
 80087f4:	4445c83a 	sub	r2,r8,r17
 80087f8:	e4c00215 	stw	r19,8(fp)
 80087fc:	10800054 	ori	r2,r2,1
 8008800:	98800115 	stw	r2,4(r19)
 8008804:	a8bfff17 	ldw	r2,-4(r21)
 8008808:	a009883a 	mov	r4,r20
 800880c:	1080004c 	andi	r2,r2,1
 8008810:	1462b03a 	or	r17,r2,r17
 8008814:	ac7fff15 	stw	r17,-4(r21)
 8008818:	800c0c00 	call	800c0c0 <__malloc_unlock>
 800881c:	a805883a 	mov	r2,r21
 8008820:	003f6b06 	br	80085d0 <__alt_data_end+0xfc0085d0>
 8008824:	a80b883a 	mov	r5,r21
 8008828:	9009883a 	mov	r4,r18
 800882c:	80081dc0 	call	80081dc <memmove>
 8008830:	003f4e06 	br	800856c <__alt_data_end+0xfc00856c>
 8008834:	89000404 	addi	r4,r17,16
 8008838:	b93fbc16 	blt	r23,r4,800872c <__alt_data_end+0xfc00872c>
 800883c:	b0800317 	ldw	r2,12(r22)
 8008840:	b0c00217 	ldw	r3,8(r22)
 8008844:	81bfff04 	addi	r6,r16,-4
 8008848:	01000904 	movi	r4,36
 800884c:	18800315 	stw	r2,12(r3)
 8008850:	10c00215 	stw	r3,8(r2)
 8008854:	b4800204 	addi	r18,r22,8
 8008858:	21804336 	bltu	r4,r6,8008968 <_realloc_r+0x508>
 800885c:	008004c4 	movi	r2,19
 8008860:	11803f2e 	bgeu	r2,r6,8008960 <_realloc_r+0x500>
 8008864:	a8800017 	ldw	r2,0(r21)
 8008868:	b0800215 	stw	r2,8(r22)
 800886c:	a8800117 	ldw	r2,4(r21)
 8008870:	b0800315 	stw	r2,12(r22)
 8008874:	008006c4 	movi	r2,27
 8008878:	11803f36 	bltu	r2,r6,8008978 <_realloc_r+0x518>
 800887c:	b0800404 	addi	r2,r22,16
 8008880:	ad400204 	addi	r21,r21,8
 8008884:	a8c00017 	ldw	r3,0(r21)
 8008888:	10c00015 	stw	r3,0(r2)
 800888c:	a8c00117 	ldw	r3,4(r21)
 8008890:	10c00115 	stw	r3,4(r2)
 8008894:	a8c00217 	ldw	r3,8(r21)
 8008898:	10c00215 	stw	r3,8(r2)
 800889c:	b447883a 	add	r3,r22,r17
 80088a0:	bc45c83a 	sub	r2,r23,r17
 80088a4:	e0c00215 	stw	r3,8(fp)
 80088a8:	10800054 	ori	r2,r2,1
 80088ac:	18800115 	stw	r2,4(r3)
 80088b0:	b0800117 	ldw	r2,4(r22)
 80088b4:	a009883a 	mov	r4,r20
 80088b8:	1080004c 	andi	r2,r2,1
 80088bc:	1462b03a 	or	r17,r2,r17
 80088c0:	b4400115 	stw	r17,4(r22)
 80088c4:	800c0c00 	call	800c0c0 <__malloc_unlock>
 80088c8:	9005883a 	mov	r2,r18
 80088cc:	003f4006 	br	80085d0 <__alt_data_end+0xfc0085d0>
 80088d0:	a8c00217 	ldw	r3,8(r21)
 80088d4:	90c00215 	stw	r3,8(r18)
 80088d8:	a8c00317 	ldw	r3,12(r21)
 80088dc:	90c00315 	stw	r3,12(r18)
 80088e0:	30801126 	beq	r6,r2,8008928 <_realloc_r+0x4c8>
 80088e4:	90800404 	addi	r2,r18,16
 80088e8:	a8c00404 	addi	r3,r21,16
 80088ec:	003f1906 	br	8008554 <__alt_data_end+0xfc008554>
 80088f0:	90ffff17 	ldw	r3,-4(r18)
 80088f4:	00bfff04 	movi	r2,-4
 80088f8:	a825883a 	mov	r18,r21
 80088fc:	1884703a 	and	r2,r3,r2
 8008900:	80a1883a 	add	r16,r16,r2
 8008904:	003f2406 	br	8008598 <__alt_data_end+0xfc008598>
 8008908:	a8800217 	ldw	r2,8(r21)
 800890c:	b0800415 	stw	r2,16(r22)
 8008910:	a8800317 	ldw	r2,12(r21)
 8008914:	b0800515 	stw	r2,20(r22)
 8008918:	31000a26 	beq	r6,r4,8008944 <_realloc_r+0x4e4>
 800891c:	b0800604 	addi	r2,r22,24
 8008920:	ad400404 	addi	r21,r21,16
 8008924:	003fa906 	br	80087cc <__alt_data_end+0xfc0087cc>
 8008928:	a9000417 	ldw	r4,16(r21)
 800892c:	90800604 	addi	r2,r18,24
 8008930:	a8c00604 	addi	r3,r21,24
 8008934:	91000415 	stw	r4,16(r18)
 8008938:	a9000517 	ldw	r4,20(r21)
 800893c:	91000515 	stw	r4,20(r18)
 8008940:	003f0406 	br	8008554 <__alt_data_end+0xfc008554>
 8008944:	a8c00417 	ldw	r3,16(r21)
 8008948:	ad400604 	addi	r21,r21,24
 800894c:	b0800804 	addi	r2,r22,32
 8008950:	b0c00615 	stw	r3,24(r22)
 8008954:	a8ffff17 	ldw	r3,-4(r21)
 8008958:	b0c00715 	stw	r3,28(r22)
 800895c:	003f9b06 	br	80087cc <__alt_data_end+0xfc0087cc>
 8008960:	9005883a 	mov	r2,r18
 8008964:	003fc706 	br	8008884 <__alt_data_end+0xfc008884>
 8008968:	a80b883a 	mov	r5,r21
 800896c:	9009883a 	mov	r4,r18
 8008970:	80081dc0 	call	80081dc <memmove>
 8008974:	003fc906 	br	800889c <__alt_data_end+0xfc00889c>
 8008978:	a8800217 	ldw	r2,8(r21)
 800897c:	b0800415 	stw	r2,16(r22)
 8008980:	a8800317 	ldw	r2,12(r21)
 8008984:	b0800515 	stw	r2,20(r22)
 8008988:	31000726 	beq	r6,r4,80089a8 <_realloc_r+0x548>
 800898c:	b0800604 	addi	r2,r22,24
 8008990:	ad400404 	addi	r21,r21,16
 8008994:	003fbb06 	br	8008884 <__alt_data_end+0xfc008884>
 8008998:	a009883a 	mov	r4,r20
 800899c:	800c0c00 	call	800c0c0 <__malloc_unlock>
 80089a0:	0005883a 	mov	r2,zero
 80089a4:	003f0a06 	br	80085d0 <__alt_data_end+0xfc0085d0>
 80089a8:	a8c00417 	ldw	r3,16(r21)
 80089ac:	ad400604 	addi	r21,r21,24
 80089b0:	b0800804 	addi	r2,r22,32
 80089b4:	b0c00615 	stw	r3,24(r22)
 80089b8:	a8ffff17 	ldw	r3,-4(r21)
 80089bc:	b0c00715 	stw	r3,28(r22)
 80089c0:	003fb006 	br	8008884 <__alt_data_end+0xfc008884>

080089c4 <__muldi3>:
 80089c4:	defff604 	addi	sp,sp,-40
 80089c8:	dd800615 	stw	r22,24(sp)
 80089cc:	dd400515 	stw	r21,20(sp)
 80089d0:	dc400115 	stw	r17,4(sp)
 80089d4:	357fffcc 	andi	r21,r6,65535
 80089d8:	2022d43a 	srli	r17,r4,16
 80089dc:	25bfffcc 	andi	r22,r4,65535
 80089e0:	dcc00315 	stw	r19,12(sp)
 80089e4:	dc800215 	stw	r18,8(sp)
 80089e8:	2027883a 	mov	r19,r4
 80089ec:	2825883a 	mov	r18,r5
 80089f0:	b009883a 	mov	r4,r22
 80089f4:	a80b883a 	mov	r5,r21
 80089f8:	dfc00915 	stw	ra,36(sp)
 80089fc:	df000815 	stw	fp,32(sp)
 8008a00:	ddc00715 	stw	r23,28(sp)
 8008a04:	3839883a 	mov	fp,r7
 8008a08:	302ed43a 	srli	r23,r6,16
 8008a0c:	dd000415 	stw	r20,16(sp)
 8008a10:	dc000015 	stw	r16,0(sp)
 8008a14:	3029883a 	mov	r20,r6
 8008a18:	8000c800 	call	8000c80 <__mulsi3>
 8008a1c:	a80b883a 	mov	r5,r21
 8008a20:	8809883a 	mov	r4,r17
 8008a24:	1021883a 	mov	r16,r2
 8008a28:	8000c800 	call	8000c80 <__mulsi3>
 8008a2c:	8809883a 	mov	r4,r17
 8008a30:	b80b883a 	mov	r5,r23
 8008a34:	102b883a 	mov	r21,r2
 8008a38:	8000c800 	call	8000c80 <__mulsi3>
 8008a3c:	b80b883a 	mov	r5,r23
 8008a40:	b009883a 	mov	r4,r22
 8008a44:	1023883a 	mov	r17,r2
 8008a48:	8000c800 	call	8000c80 <__mulsi3>
 8008a4c:	8006d43a 	srli	r3,r16,16
 8008a50:	1545883a 	add	r2,r2,r21
 8008a54:	1885883a 	add	r2,r3,r2
 8008a58:	1540022e 	bgeu	r2,r21,8008a64 <__muldi3+0xa0>
 8008a5c:	00c00074 	movhi	r3,1
 8008a60:	88e3883a 	add	r17,r17,r3
 8008a64:	1006d43a 	srli	r3,r2,16
 8008a68:	1004943a 	slli	r2,r2,16
 8008a6c:	e00b883a 	mov	r5,fp
 8008a70:	9809883a 	mov	r4,r19
 8008a74:	843fffcc 	andi	r16,r16,65535
 8008a78:	1c63883a 	add	r17,r3,r17
 8008a7c:	1421883a 	add	r16,r2,r16
 8008a80:	8000c800 	call	8000c80 <__mulsi3>
 8008a84:	900b883a 	mov	r5,r18
 8008a88:	a009883a 	mov	r4,r20
 8008a8c:	1027883a 	mov	r19,r2
 8008a90:	8000c800 	call	8000c80 <__mulsi3>
 8008a94:	9885883a 	add	r2,r19,r2
 8008a98:	1447883a 	add	r3,r2,r17
 8008a9c:	8005883a 	mov	r2,r16
 8008aa0:	dfc00917 	ldw	ra,36(sp)
 8008aa4:	df000817 	ldw	fp,32(sp)
 8008aa8:	ddc00717 	ldw	r23,28(sp)
 8008aac:	dd800617 	ldw	r22,24(sp)
 8008ab0:	dd400517 	ldw	r21,20(sp)
 8008ab4:	dd000417 	ldw	r20,16(sp)
 8008ab8:	dcc00317 	ldw	r19,12(sp)
 8008abc:	dc800217 	ldw	r18,8(sp)
 8008ac0:	dc400117 	ldw	r17,4(sp)
 8008ac4:	dc000017 	ldw	r16,0(sp)
 8008ac8:	dec00a04 	addi	sp,sp,40
 8008acc:	f800283a 	ret

08008ad0 <__udivdi3>:
 8008ad0:	defff404 	addi	sp,sp,-48
 8008ad4:	dcc00515 	stw	r19,20(sp)
 8008ad8:	dc000215 	stw	r16,8(sp)
 8008adc:	dfc00b15 	stw	ra,44(sp)
 8008ae0:	df000a15 	stw	fp,40(sp)
 8008ae4:	ddc00915 	stw	r23,36(sp)
 8008ae8:	dd800815 	stw	r22,32(sp)
 8008aec:	dd400715 	stw	r21,28(sp)
 8008af0:	dd000615 	stw	r20,24(sp)
 8008af4:	dc800415 	stw	r18,16(sp)
 8008af8:	dc400315 	stw	r17,12(sp)
 8008afc:	2027883a 	mov	r19,r4
 8008b00:	2821883a 	mov	r16,r5
 8008b04:	3800461e 	bne	r7,zero,8008c20 <__udivdi3+0x150>
 8008b08:	3023883a 	mov	r17,r6
 8008b0c:	2025883a 	mov	r18,r4
 8008b10:	2980572e 	bgeu	r5,r6,8008c70 <__udivdi3+0x1a0>
 8008b14:	00bfffd4 	movui	r2,65535
 8008b18:	282d883a 	mov	r22,r5
 8008b1c:	1180b236 	bltu	r2,r6,8008de8 <__udivdi3+0x318>
 8008b20:	00803fc4 	movi	r2,255
 8008b24:	1185803a 	cmpltu	r2,r2,r6
 8008b28:	100490fa 	slli	r2,r2,3
 8008b2c:	3086d83a 	srl	r3,r6,r2
 8008b30:	01020074 	movhi	r4,2049
 8008b34:	21394304 	addi	r4,r4,-6900
 8008b38:	20c7883a 	add	r3,r4,r3
 8008b3c:	18c00003 	ldbu	r3,0(r3)
 8008b40:	1885883a 	add	r2,r3,r2
 8008b44:	00c00804 	movi	r3,32
 8008b48:	1887c83a 	sub	r3,r3,r2
 8008b4c:	18000526 	beq	r3,zero,8008b64 <__udivdi3+0x94>
 8008b50:	80e0983a 	sll	r16,r16,r3
 8008b54:	9884d83a 	srl	r2,r19,r2
 8008b58:	30e2983a 	sll	r17,r6,r3
 8008b5c:	98e4983a 	sll	r18,r19,r3
 8008b60:	142cb03a 	or	r22,r2,r16
 8008b64:	882ad43a 	srli	r21,r17,16
 8008b68:	b009883a 	mov	r4,r22
 8008b6c:	8d3fffcc 	andi	r20,r17,65535
 8008b70:	a80b883a 	mov	r5,r21
 8008b74:	8000c280 	call	8000c28 <__umodsi3>
 8008b78:	b009883a 	mov	r4,r22
 8008b7c:	a80b883a 	mov	r5,r21
 8008b80:	1027883a 	mov	r19,r2
 8008b84:	8000bc40 	call	8000bc4 <__udivsi3>
 8008b88:	100b883a 	mov	r5,r2
 8008b8c:	a009883a 	mov	r4,r20
 8008b90:	102d883a 	mov	r22,r2
 8008b94:	8000c800 	call	8000c80 <__mulsi3>
 8008b98:	9826943a 	slli	r19,r19,16
 8008b9c:	9006d43a 	srli	r3,r18,16
 8008ba0:	1cc6b03a 	or	r3,r3,r19
 8008ba4:	1880052e 	bgeu	r3,r2,8008bbc <__udivdi3+0xec>
 8008ba8:	1c47883a 	add	r3,r3,r17
 8008bac:	b13fffc4 	addi	r4,r22,-1
 8008bb0:	1c400136 	bltu	r3,r17,8008bb8 <__udivdi3+0xe8>
 8008bb4:	18814236 	bltu	r3,r2,80090c0 <__udivdi3+0x5f0>
 8008bb8:	202d883a 	mov	r22,r4
 8008bbc:	18a1c83a 	sub	r16,r3,r2
 8008bc0:	8009883a 	mov	r4,r16
 8008bc4:	a80b883a 	mov	r5,r21
 8008bc8:	8000c280 	call	8000c28 <__umodsi3>
 8008bcc:	1027883a 	mov	r19,r2
 8008bd0:	8009883a 	mov	r4,r16
 8008bd4:	a80b883a 	mov	r5,r21
 8008bd8:	9826943a 	slli	r19,r19,16
 8008bdc:	8000bc40 	call	8000bc4 <__udivsi3>
 8008be0:	100b883a 	mov	r5,r2
 8008be4:	a009883a 	mov	r4,r20
 8008be8:	94bfffcc 	andi	r18,r18,65535
 8008bec:	1021883a 	mov	r16,r2
 8008bf0:	94e4b03a 	or	r18,r18,r19
 8008bf4:	8000c800 	call	8000c80 <__mulsi3>
 8008bf8:	9080052e 	bgeu	r18,r2,8008c10 <__udivdi3+0x140>
 8008bfc:	8ca5883a 	add	r18,r17,r18
 8008c00:	80ffffc4 	addi	r3,r16,-1
 8008c04:	94410c36 	bltu	r18,r17,8009038 <__udivdi3+0x568>
 8008c08:	90810b2e 	bgeu	r18,r2,8009038 <__udivdi3+0x568>
 8008c0c:	843fff84 	addi	r16,r16,-2
 8008c10:	b004943a 	slli	r2,r22,16
 8008c14:	0007883a 	mov	r3,zero
 8008c18:	1404b03a 	or	r2,r2,r16
 8008c1c:	00005e06 	br	8008d98 <__udivdi3+0x2c8>
 8008c20:	29c05b36 	bltu	r5,r7,8008d90 <__udivdi3+0x2c0>
 8008c24:	00bfffd4 	movui	r2,65535
 8008c28:	11c0672e 	bgeu	r2,r7,8008dc8 <__udivdi3+0x2f8>
 8008c2c:	00804034 	movhi	r2,256
 8008c30:	10bfffc4 	addi	r2,r2,-1
 8008c34:	11c10a36 	bltu	r2,r7,8009060 <__udivdi3+0x590>
 8008c38:	00800404 	movi	r2,16
 8008c3c:	3886d83a 	srl	r3,r7,r2
 8008c40:	01020074 	movhi	r4,2049
 8008c44:	21394304 	addi	r4,r4,-6900
 8008c48:	20c7883a 	add	r3,r4,r3
 8008c4c:	18c00003 	ldbu	r3,0(r3)
 8008c50:	05c00804 	movi	r23,32
 8008c54:	1885883a 	add	r2,r3,r2
 8008c58:	b8afc83a 	sub	r23,r23,r2
 8008c5c:	b800671e 	bne	r23,zero,8008dfc <__udivdi3+0x32c>
 8008c60:	3c010536 	bltu	r7,r16,8009078 <__udivdi3+0x5a8>
 8008c64:	9985403a 	cmpgeu	r2,r19,r6
 8008c68:	0007883a 	mov	r3,zero
 8008c6c:	00004a06 	br	8008d98 <__udivdi3+0x2c8>
 8008c70:	3000041e 	bne	r6,zero,8008c84 <__udivdi3+0x1b4>
 8008c74:	000b883a 	mov	r5,zero
 8008c78:	01000044 	movi	r4,1
 8008c7c:	8000bc40 	call	8000bc4 <__udivsi3>
 8008c80:	1023883a 	mov	r17,r2
 8008c84:	00bfffd4 	movui	r2,65535
 8008c88:	1440532e 	bgeu	r2,r17,8008dd8 <__udivdi3+0x308>
 8008c8c:	00804034 	movhi	r2,256
 8008c90:	10bfffc4 	addi	r2,r2,-1
 8008c94:	1440f436 	bltu	r2,r17,8009068 <__udivdi3+0x598>
 8008c98:	00800404 	movi	r2,16
 8008c9c:	8886d83a 	srl	r3,r17,r2
 8008ca0:	01020074 	movhi	r4,2049
 8008ca4:	21394304 	addi	r4,r4,-6900
 8008ca8:	20c7883a 	add	r3,r4,r3
 8008cac:	18c00003 	ldbu	r3,0(r3)
 8008cb0:	1885883a 	add	r2,r3,r2
 8008cb4:	00c00804 	movi	r3,32
 8008cb8:	1887c83a 	sub	r3,r3,r2
 8008cbc:	1800a51e 	bne	r3,zero,8008f54 <__udivdi3+0x484>
 8008cc0:	882ad43a 	srli	r21,r17,16
 8008cc4:	8461c83a 	sub	r16,r16,r17
 8008cc8:	8d3fffcc 	andi	r20,r17,65535
 8008ccc:	00c00044 	movi	r3,1
 8008cd0:	a80b883a 	mov	r5,r21
 8008cd4:	8009883a 	mov	r4,r16
 8008cd8:	d8c00115 	stw	r3,4(sp)
 8008cdc:	8000c280 	call	8000c28 <__umodsi3>
 8008ce0:	a80b883a 	mov	r5,r21
 8008ce4:	8009883a 	mov	r4,r16
 8008ce8:	1027883a 	mov	r19,r2
 8008cec:	8000bc40 	call	8000bc4 <__udivsi3>
 8008cf0:	a00b883a 	mov	r5,r20
 8008cf4:	1009883a 	mov	r4,r2
 8008cf8:	102d883a 	mov	r22,r2
 8008cfc:	8000c800 	call	8000c80 <__mulsi3>
 8008d00:	9826943a 	slli	r19,r19,16
 8008d04:	900ed43a 	srli	r7,r18,16
 8008d08:	d8c00117 	ldw	r3,4(sp)
 8008d0c:	3cceb03a 	or	r7,r7,r19
 8008d10:	3880052e 	bgeu	r7,r2,8008d28 <__udivdi3+0x258>
 8008d14:	3c4f883a 	add	r7,r7,r17
 8008d18:	b13fffc4 	addi	r4,r22,-1
 8008d1c:	3c400136 	bltu	r7,r17,8008d24 <__udivdi3+0x254>
 8008d20:	3880e436 	bltu	r7,r2,80090b4 <__udivdi3+0x5e4>
 8008d24:	202d883a 	mov	r22,r4
 8008d28:	38a1c83a 	sub	r16,r7,r2
 8008d2c:	8009883a 	mov	r4,r16
 8008d30:	a80b883a 	mov	r5,r21
 8008d34:	d8c00115 	stw	r3,4(sp)
 8008d38:	8000c280 	call	8000c28 <__umodsi3>
 8008d3c:	1027883a 	mov	r19,r2
 8008d40:	8009883a 	mov	r4,r16
 8008d44:	a80b883a 	mov	r5,r21
 8008d48:	9826943a 	slli	r19,r19,16
 8008d4c:	8000bc40 	call	8000bc4 <__udivsi3>
 8008d50:	a00b883a 	mov	r5,r20
 8008d54:	1009883a 	mov	r4,r2
 8008d58:	94bfffcc 	andi	r18,r18,65535
 8008d5c:	1021883a 	mov	r16,r2
 8008d60:	94e4b03a 	or	r18,r18,r19
 8008d64:	8000c800 	call	8000c80 <__mulsi3>
 8008d68:	d8c00117 	ldw	r3,4(sp)
 8008d6c:	9080052e 	bgeu	r18,r2,8008d84 <__udivdi3+0x2b4>
 8008d70:	8ca5883a 	add	r18,r17,r18
 8008d74:	813fffc4 	addi	r4,r16,-1
 8008d78:	9440ad36 	bltu	r18,r17,8009030 <__udivdi3+0x560>
 8008d7c:	9080ac2e 	bgeu	r18,r2,8009030 <__udivdi3+0x560>
 8008d80:	843fff84 	addi	r16,r16,-2
 8008d84:	b004943a 	slli	r2,r22,16
 8008d88:	1404b03a 	or	r2,r2,r16
 8008d8c:	00000206 	br	8008d98 <__udivdi3+0x2c8>
 8008d90:	0007883a 	mov	r3,zero
 8008d94:	0005883a 	mov	r2,zero
 8008d98:	dfc00b17 	ldw	ra,44(sp)
 8008d9c:	df000a17 	ldw	fp,40(sp)
 8008da0:	ddc00917 	ldw	r23,36(sp)
 8008da4:	dd800817 	ldw	r22,32(sp)
 8008da8:	dd400717 	ldw	r21,28(sp)
 8008dac:	dd000617 	ldw	r20,24(sp)
 8008db0:	dcc00517 	ldw	r19,20(sp)
 8008db4:	dc800417 	ldw	r18,16(sp)
 8008db8:	dc400317 	ldw	r17,12(sp)
 8008dbc:	dc000217 	ldw	r16,8(sp)
 8008dc0:	dec00c04 	addi	sp,sp,48
 8008dc4:	f800283a 	ret
 8008dc8:	00803fc4 	movi	r2,255
 8008dcc:	11c5803a 	cmpltu	r2,r2,r7
 8008dd0:	100490fa 	slli	r2,r2,3
 8008dd4:	003f9906 	br	8008c3c <__alt_data_end+0xfc008c3c>
 8008dd8:	00803fc4 	movi	r2,255
 8008ddc:	1445803a 	cmpltu	r2,r2,r17
 8008de0:	100490fa 	slli	r2,r2,3
 8008de4:	003fad06 	br	8008c9c <__alt_data_end+0xfc008c9c>
 8008de8:	00804034 	movhi	r2,256
 8008dec:	10bfffc4 	addi	r2,r2,-1
 8008df0:	11809f36 	bltu	r2,r6,8009070 <__udivdi3+0x5a0>
 8008df4:	00800404 	movi	r2,16
 8008df8:	003f4c06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8008dfc:	3dce983a 	sll	r7,r7,r23
 8008e00:	30b8d83a 	srl	fp,r6,r2
 8008e04:	80a2d83a 	srl	r17,r16,r2
 8008e08:	35cc983a 	sll	r6,r6,r23
 8008e0c:	3f38b03a 	or	fp,r7,fp
 8008e10:	e024d43a 	srli	r18,fp,16
 8008e14:	9884d83a 	srl	r2,r19,r2
 8008e18:	85e0983a 	sll	r16,r16,r23
 8008e1c:	8809883a 	mov	r4,r17
 8008e20:	900b883a 	mov	r5,r18
 8008e24:	d9800015 	stw	r6,0(sp)
 8008e28:	1420b03a 	or	r16,r2,r16
 8008e2c:	8000c280 	call	8000c28 <__umodsi3>
 8008e30:	900b883a 	mov	r5,r18
 8008e34:	8809883a 	mov	r4,r17
 8008e38:	1029883a 	mov	r20,r2
 8008e3c:	e5bfffcc 	andi	r22,fp,65535
 8008e40:	8000bc40 	call	8000bc4 <__udivsi3>
 8008e44:	100b883a 	mov	r5,r2
 8008e48:	b009883a 	mov	r4,r22
 8008e4c:	102b883a 	mov	r21,r2
 8008e50:	8000c800 	call	8000c80 <__mulsi3>
 8008e54:	a028943a 	slli	r20,r20,16
 8008e58:	8006d43a 	srli	r3,r16,16
 8008e5c:	1d06b03a 	or	r3,r3,r20
 8008e60:	1880042e 	bgeu	r3,r2,8008e74 <__udivdi3+0x3a4>
 8008e64:	1f07883a 	add	r3,r3,fp
 8008e68:	a93fffc4 	addi	r4,r21,-1
 8008e6c:	1f00892e 	bgeu	r3,fp,8009094 <__udivdi3+0x5c4>
 8008e70:	202b883a 	mov	r21,r4
 8008e74:	18a3c83a 	sub	r17,r3,r2
 8008e78:	8809883a 	mov	r4,r17
 8008e7c:	900b883a 	mov	r5,r18
 8008e80:	8000c280 	call	8000c28 <__umodsi3>
 8008e84:	1029883a 	mov	r20,r2
 8008e88:	8809883a 	mov	r4,r17
 8008e8c:	900b883a 	mov	r5,r18
 8008e90:	a028943a 	slli	r20,r20,16
 8008e94:	8000bc40 	call	8000bc4 <__udivsi3>
 8008e98:	100b883a 	mov	r5,r2
 8008e9c:	b009883a 	mov	r4,r22
 8008ea0:	843fffcc 	andi	r16,r16,65535
 8008ea4:	1023883a 	mov	r17,r2
 8008ea8:	8520b03a 	or	r16,r16,r20
 8008eac:	8000c800 	call	8000c80 <__mulsi3>
 8008eb0:	8080042e 	bgeu	r16,r2,8008ec4 <__udivdi3+0x3f4>
 8008eb4:	8721883a 	add	r16,r16,fp
 8008eb8:	88ffffc4 	addi	r3,r17,-1
 8008ebc:	8700712e 	bgeu	r16,fp,8009084 <__udivdi3+0x5b4>
 8008ec0:	1823883a 	mov	r17,r3
 8008ec4:	a80e943a 	slli	r7,r21,16
 8008ec8:	d8c00017 	ldw	r3,0(sp)
 8008ecc:	80a1c83a 	sub	r16,r16,r2
 8008ed0:	3c64b03a 	or	r18,r7,r17
 8008ed4:	1d3fffcc 	andi	r20,r3,65535
 8008ed8:	9022d43a 	srli	r17,r18,16
 8008edc:	95bfffcc 	andi	r22,r18,65535
 8008ee0:	a00b883a 	mov	r5,r20
 8008ee4:	b009883a 	mov	r4,r22
 8008ee8:	182ad43a 	srli	r21,r3,16
 8008eec:	8000c800 	call	8000c80 <__mulsi3>
 8008ef0:	a00b883a 	mov	r5,r20
 8008ef4:	8809883a 	mov	r4,r17
 8008ef8:	1039883a 	mov	fp,r2
 8008efc:	8000c800 	call	8000c80 <__mulsi3>
 8008f00:	8809883a 	mov	r4,r17
 8008f04:	a80b883a 	mov	r5,r21
 8008f08:	1029883a 	mov	r20,r2
 8008f0c:	8000c800 	call	8000c80 <__mulsi3>
 8008f10:	a80b883a 	mov	r5,r21
 8008f14:	b009883a 	mov	r4,r22
 8008f18:	1023883a 	mov	r17,r2
 8008f1c:	8000c800 	call	8000c80 <__mulsi3>
 8008f20:	e006d43a 	srli	r3,fp,16
 8008f24:	1505883a 	add	r2,r2,r20
 8008f28:	1887883a 	add	r3,r3,r2
 8008f2c:	1d00022e 	bgeu	r3,r20,8008f38 <__udivdi3+0x468>
 8008f30:	00800074 	movhi	r2,1
 8008f34:	88a3883a 	add	r17,r17,r2
 8008f38:	1804d43a 	srli	r2,r3,16
 8008f3c:	1463883a 	add	r17,r2,r17
 8008f40:	84404436 	bltu	r16,r17,8009054 <__udivdi3+0x584>
 8008f44:	84403e26 	beq	r16,r17,8009040 <__udivdi3+0x570>
 8008f48:	9005883a 	mov	r2,r18
 8008f4c:	0007883a 	mov	r3,zero
 8008f50:	003f9106 	br	8008d98 <__alt_data_end+0xfc008d98>
 8008f54:	88e2983a 	sll	r17,r17,r3
 8008f58:	80aed83a 	srl	r23,r16,r2
 8008f5c:	80e0983a 	sll	r16,r16,r3
 8008f60:	882ad43a 	srli	r21,r17,16
 8008f64:	9884d83a 	srl	r2,r19,r2
 8008f68:	b809883a 	mov	r4,r23
 8008f6c:	a80b883a 	mov	r5,r21
 8008f70:	98e4983a 	sll	r18,r19,r3
 8008f74:	142cb03a 	or	r22,r2,r16
 8008f78:	8000c280 	call	8000c28 <__umodsi3>
 8008f7c:	b809883a 	mov	r4,r23
 8008f80:	a80b883a 	mov	r5,r21
 8008f84:	1027883a 	mov	r19,r2
 8008f88:	8d3fffcc 	andi	r20,r17,65535
 8008f8c:	8000bc40 	call	8000bc4 <__udivsi3>
 8008f90:	a009883a 	mov	r4,r20
 8008f94:	100b883a 	mov	r5,r2
 8008f98:	102f883a 	mov	r23,r2
 8008f9c:	8000c800 	call	8000c80 <__mulsi3>
 8008fa0:	9826943a 	slli	r19,r19,16
 8008fa4:	b008d43a 	srli	r4,r22,16
 8008fa8:	24c8b03a 	or	r4,r4,r19
 8008fac:	2080062e 	bgeu	r4,r2,8008fc8 <__udivdi3+0x4f8>
 8008fb0:	2449883a 	add	r4,r4,r17
 8008fb4:	b8ffffc4 	addi	r3,r23,-1
 8008fb8:	24403c36 	bltu	r4,r17,80090ac <__udivdi3+0x5dc>
 8008fbc:	20803b2e 	bgeu	r4,r2,80090ac <__udivdi3+0x5dc>
 8008fc0:	bdffff84 	addi	r23,r23,-2
 8008fc4:	2449883a 	add	r4,r4,r17
 8008fc8:	20a1c83a 	sub	r16,r4,r2
 8008fcc:	a80b883a 	mov	r5,r21
 8008fd0:	8009883a 	mov	r4,r16
 8008fd4:	8000c280 	call	8000c28 <__umodsi3>
 8008fd8:	a80b883a 	mov	r5,r21
 8008fdc:	8009883a 	mov	r4,r16
 8008fe0:	1027883a 	mov	r19,r2
 8008fe4:	8000bc40 	call	8000bc4 <__udivsi3>
 8008fe8:	a009883a 	mov	r4,r20
 8008fec:	100b883a 	mov	r5,r2
 8008ff0:	9826943a 	slli	r19,r19,16
 8008ff4:	1039883a 	mov	fp,r2
 8008ff8:	8000c800 	call	8000c80 <__mulsi3>
 8008ffc:	b13fffcc 	andi	r4,r22,65535
 8009000:	24c8b03a 	or	r4,r4,r19
 8009004:	2080062e 	bgeu	r4,r2,8009020 <__udivdi3+0x550>
 8009008:	2449883a 	add	r4,r4,r17
 800900c:	e0ffffc4 	addi	r3,fp,-1
 8009010:	24402436 	bltu	r4,r17,80090a4 <__udivdi3+0x5d4>
 8009014:	2080232e 	bgeu	r4,r2,80090a4 <__udivdi3+0x5d4>
 8009018:	e73fff84 	addi	fp,fp,-2
 800901c:	2449883a 	add	r4,r4,r17
 8009020:	b82e943a 	slli	r23,r23,16
 8009024:	20a1c83a 	sub	r16,r4,r2
 8009028:	bf06b03a 	or	r3,r23,fp
 800902c:	003f2806 	br	8008cd0 <__alt_data_end+0xfc008cd0>
 8009030:	2021883a 	mov	r16,r4
 8009034:	003f5306 	br	8008d84 <__alt_data_end+0xfc008d84>
 8009038:	1821883a 	mov	r16,r3
 800903c:	003ef406 	br	8008c10 <__alt_data_end+0xfc008c10>
 8009040:	1806943a 	slli	r3,r3,16
 8009044:	9de6983a 	sll	r19,r19,r23
 8009048:	e73fffcc 	andi	fp,fp,65535
 800904c:	1f07883a 	add	r3,r3,fp
 8009050:	98ffbd2e 	bgeu	r19,r3,8008f48 <__alt_data_end+0xfc008f48>
 8009054:	90bfffc4 	addi	r2,r18,-1
 8009058:	0007883a 	mov	r3,zero
 800905c:	003f4e06 	br	8008d98 <__alt_data_end+0xfc008d98>
 8009060:	00800604 	movi	r2,24
 8009064:	003ef506 	br	8008c3c <__alt_data_end+0xfc008c3c>
 8009068:	00800604 	movi	r2,24
 800906c:	003f0b06 	br	8008c9c <__alt_data_end+0xfc008c9c>
 8009070:	00800604 	movi	r2,24
 8009074:	003ead06 	br	8008b2c <__alt_data_end+0xfc008b2c>
 8009078:	0007883a 	mov	r3,zero
 800907c:	00800044 	movi	r2,1
 8009080:	003f4506 	br	8008d98 <__alt_data_end+0xfc008d98>
 8009084:	80bf8e2e 	bgeu	r16,r2,8008ec0 <__alt_data_end+0xfc008ec0>
 8009088:	8c7fff84 	addi	r17,r17,-2
 800908c:	8721883a 	add	r16,r16,fp
 8009090:	003f8c06 	br	8008ec4 <__alt_data_end+0xfc008ec4>
 8009094:	18bf762e 	bgeu	r3,r2,8008e70 <__alt_data_end+0xfc008e70>
 8009098:	ad7fff84 	addi	r21,r21,-2
 800909c:	1f07883a 	add	r3,r3,fp
 80090a0:	003f7406 	br	8008e74 <__alt_data_end+0xfc008e74>
 80090a4:	1839883a 	mov	fp,r3
 80090a8:	003fdd06 	br	8009020 <__alt_data_end+0xfc009020>
 80090ac:	182f883a 	mov	r23,r3
 80090b0:	003fc506 	br	8008fc8 <__alt_data_end+0xfc008fc8>
 80090b4:	b5bfff84 	addi	r22,r22,-2
 80090b8:	3c4f883a 	add	r7,r7,r17
 80090bc:	003f1a06 	br	8008d28 <__alt_data_end+0xfc008d28>
 80090c0:	b5bfff84 	addi	r22,r22,-2
 80090c4:	1c47883a 	add	r3,r3,r17
 80090c8:	003ebc06 	br	8008bbc <__alt_data_end+0xfc008bbc>

080090cc <__umoddi3>:
 80090cc:	defff304 	addi	sp,sp,-52
 80090d0:	df000b15 	stw	fp,44(sp)
 80090d4:	dc400415 	stw	r17,16(sp)
 80090d8:	dc000315 	stw	r16,12(sp)
 80090dc:	dfc00c15 	stw	ra,48(sp)
 80090e0:	ddc00a15 	stw	r23,40(sp)
 80090e4:	dd800915 	stw	r22,36(sp)
 80090e8:	dd400815 	stw	r21,32(sp)
 80090ec:	dd000715 	stw	r20,28(sp)
 80090f0:	dcc00615 	stw	r19,24(sp)
 80090f4:	dc800515 	stw	r18,20(sp)
 80090f8:	2021883a 	mov	r16,r4
 80090fc:	2823883a 	mov	r17,r5
 8009100:	2839883a 	mov	fp,r5
 8009104:	3800401e 	bne	r7,zero,8009208 <__umoddi3+0x13c>
 8009108:	3027883a 	mov	r19,r6
 800910c:	2029883a 	mov	r20,r4
 8009110:	2980552e 	bgeu	r5,r6,8009268 <__umoddi3+0x19c>
 8009114:	00bfffd4 	movui	r2,65535
 8009118:	1180a236 	bltu	r2,r6,80093a4 <__umoddi3+0x2d8>
 800911c:	01003fc4 	movi	r4,255
 8009120:	2189803a 	cmpltu	r4,r4,r6
 8009124:	200890fa 	slli	r4,r4,3
 8009128:	3104d83a 	srl	r2,r6,r4
 800912c:	00c20074 	movhi	r3,2049
 8009130:	18f94304 	addi	r3,r3,-6900
 8009134:	1885883a 	add	r2,r3,r2
 8009138:	10c00003 	ldbu	r3,0(r2)
 800913c:	00800804 	movi	r2,32
 8009140:	1909883a 	add	r4,r3,r4
 8009144:	1125c83a 	sub	r18,r2,r4
 8009148:	90000526 	beq	r18,zero,8009160 <__umoddi3+0x94>
 800914c:	8ca2983a 	sll	r17,r17,r18
 8009150:	8108d83a 	srl	r4,r16,r4
 8009154:	34a6983a 	sll	r19,r6,r18
 8009158:	84a8983a 	sll	r20,r16,r18
 800915c:	2478b03a 	or	fp,r4,r17
 8009160:	982cd43a 	srli	r22,r19,16
 8009164:	e009883a 	mov	r4,fp
 8009168:	9dffffcc 	andi	r23,r19,65535
 800916c:	b00b883a 	mov	r5,r22
 8009170:	8000c280 	call	8000c28 <__umodsi3>
 8009174:	b00b883a 	mov	r5,r22
 8009178:	e009883a 	mov	r4,fp
 800917c:	102b883a 	mov	r21,r2
 8009180:	8000bc40 	call	8000bc4 <__udivsi3>
 8009184:	100b883a 	mov	r5,r2
 8009188:	b809883a 	mov	r4,r23
 800918c:	8000c800 	call	8000c80 <__mulsi3>
 8009190:	a82a943a 	slli	r21,r21,16
 8009194:	a006d43a 	srli	r3,r20,16
 8009198:	1d46b03a 	or	r3,r3,r21
 800919c:	1880032e 	bgeu	r3,r2,80091ac <__umoddi3+0xe0>
 80091a0:	1cc7883a 	add	r3,r3,r19
 80091a4:	1cc00136 	bltu	r3,r19,80091ac <__umoddi3+0xe0>
 80091a8:	18813136 	bltu	r3,r2,8009670 <__umoddi3+0x5a4>
 80091ac:	18a1c83a 	sub	r16,r3,r2
 80091b0:	b00b883a 	mov	r5,r22
 80091b4:	8009883a 	mov	r4,r16
 80091b8:	8000c280 	call	8000c28 <__umodsi3>
 80091bc:	b00b883a 	mov	r5,r22
 80091c0:	8009883a 	mov	r4,r16
 80091c4:	1023883a 	mov	r17,r2
 80091c8:	8000bc40 	call	8000bc4 <__udivsi3>
 80091cc:	100b883a 	mov	r5,r2
 80091d0:	b809883a 	mov	r4,r23
 80091d4:	8822943a 	slli	r17,r17,16
 80091d8:	8000c800 	call	8000c80 <__mulsi3>
 80091dc:	a0ffffcc 	andi	r3,r20,65535
 80091e0:	1c46b03a 	or	r3,r3,r17
 80091e4:	1880042e 	bgeu	r3,r2,80091f8 <__umoddi3+0x12c>
 80091e8:	1cc7883a 	add	r3,r3,r19
 80091ec:	1cc00236 	bltu	r3,r19,80091f8 <__umoddi3+0x12c>
 80091f0:	1880012e 	bgeu	r3,r2,80091f8 <__umoddi3+0x12c>
 80091f4:	1cc7883a 	add	r3,r3,r19
 80091f8:	1885c83a 	sub	r2,r3,r2
 80091fc:	1484d83a 	srl	r2,r2,r18
 8009200:	0007883a 	mov	r3,zero
 8009204:	00005306 	br	8009354 <__umoddi3+0x288>
 8009208:	29c05036 	bltu	r5,r7,800934c <__umoddi3+0x280>
 800920c:	00bfffd4 	movui	r2,65535
 8009210:	11c05c2e 	bgeu	r2,r7,8009384 <__umoddi3+0x2b8>
 8009214:	00804034 	movhi	r2,256
 8009218:	10bfffc4 	addi	r2,r2,-1
 800921c:	11c10636 	bltu	r2,r7,8009638 <__umoddi3+0x56c>
 8009220:	01000404 	movi	r4,16
 8009224:	3904d83a 	srl	r2,r7,r4
 8009228:	00c20074 	movhi	r3,2049
 800922c:	18f94304 	addi	r3,r3,-6900
 8009230:	1885883a 	add	r2,r3,r2
 8009234:	14c00003 	ldbu	r19,0(r2)
 8009238:	00c00804 	movi	r3,32
 800923c:	9927883a 	add	r19,r19,r4
 8009240:	1ce9c83a 	sub	r20,r3,r19
 8009244:	a0005c1e 	bne	r20,zero,80093b8 <__umoddi3+0x2ec>
 8009248:	3c400136 	bltu	r7,r17,8009250 <__umoddi3+0x184>
 800924c:	81810a36 	bltu	r16,r6,8009678 <__umoddi3+0x5ac>
 8009250:	8185c83a 	sub	r2,r16,r6
 8009254:	89e3c83a 	sub	r17,r17,r7
 8009258:	8089803a 	cmpltu	r4,r16,r2
 800925c:	8939c83a 	sub	fp,r17,r4
 8009260:	e007883a 	mov	r3,fp
 8009264:	00003b06 	br	8009354 <__umoddi3+0x288>
 8009268:	3000041e 	bne	r6,zero,800927c <__umoddi3+0x1b0>
 800926c:	000b883a 	mov	r5,zero
 8009270:	01000044 	movi	r4,1
 8009274:	8000bc40 	call	8000bc4 <__udivsi3>
 8009278:	1027883a 	mov	r19,r2
 800927c:	00bfffd4 	movui	r2,65535
 8009280:	14c0442e 	bgeu	r2,r19,8009394 <__umoddi3+0x2c8>
 8009284:	00804034 	movhi	r2,256
 8009288:	10bfffc4 	addi	r2,r2,-1
 800928c:	14c0ec36 	bltu	r2,r19,8009640 <__umoddi3+0x574>
 8009290:	00800404 	movi	r2,16
 8009294:	9886d83a 	srl	r3,r19,r2
 8009298:	01020074 	movhi	r4,2049
 800929c:	21394304 	addi	r4,r4,-6900
 80092a0:	20c7883a 	add	r3,r4,r3
 80092a4:	18c00003 	ldbu	r3,0(r3)
 80092a8:	1887883a 	add	r3,r3,r2
 80092ac:	00800804 	movi	r2,32
 80092b0:	10e5c83a 	sub	r18,r2,r3
 80092b4:	9000ab1e 	bne	r18,zero,8009564 <__umoddi3+0x498>
 80092b8:	982cd43a 	srli	r22,r19,16
 80092bc:	8ce3c83a 	sub	r17,r17,r19
 80092c0:	9dffffcc 	andi	r23,r19,65535
 80092c4:	b00b883a 	mov	r5,r22
 80092c8:	8809883a 	mov	r4,r17
 80092cc:	8000c280 	call	8000c28 <__umodsi3>
 80092d0:	b00b883a 	mov	r5,r22
 80092d4:	8809883a 	mov	r4,r17
 80092d8:	102b883a 	mov	r21,r2
 80092dc:	8000bc40 	call	8000bc4 <__udivsi3>
 80092e0:	b80b883a 	mov	r5,r23
 80092e4:	1009883a 	mov	r4,r2
 80092e8:	8000c800 	call	8000c80 <__mulsi3>
 80092ec:	a82a943a 	slli	r21,r21,16
 80092f0:	a006d43a 	srli	r3,r20,16
 80092f4:	1d46b03a 	or	r3,r3,r21
 80092f8:	1880042e 	bgeu	r3,r2,800930c <__umoddi3+0x240>
 80092fc:	1cc7883a 	add	r3,r3,r19
 8009300:	1cc00236 	bltu	r3,r19,800930c <__umoddi3+0x240>
 8009304:	1880012e 	bgeu	r3,r2,800930c <__umoddi3+0x240>
 8009308:	1cc7883a 	add	r3,r3,r19
 800930c:	18a1c83a 	sub	r16,r3,r2
 8009310:	b00b883a 	mov	r5,r22
 8009314:	8009883a 	mov	r4,r16
 8009318:	8000c280 	call	8000c28 <__umodsi3>
 800931c:	1023883a 	mov	r17,r2
 8009320:	b00b883a 	mov	r5,r22
 8009324:	8009883a 	mov	r4,r16
 8009328:	8000bc40 	call	8000bc4 <__udivsi3>
 800932c:	8822943a 	slli	r17,r17,16
 8009330:	b80b883a 	mov	r5,r23
 8009334:	1009883a 	mov	r4,r2
 8009338:	8000c800 	call	8000c80 <__mulsi3>
 800933c:	a53fffcc 	andi	r20,r20,65535
 8009340:	a446b03a 	or	r3,r20,r17
 8009344:	18bfac2e 	bgeu	r3,r2,80091f8 <__alt_data_end+0xfc0091f8>
 8009348:	003fa706 	br	80091e8 <__alt_data_end+0xfc0091e8>
 800934c:	2005883a 	mov	r2,r4
 8009350:	2807883a 	mov	r3,r5
 8009354:	dfc00c17 	ldw	ra,48(sp)
 8009358:	df000b17 	ldw	fp,44(sp)
 800935c:	ddc00a17 	ldw	r23,40(sp)
 8009360:	dd800917 	ldw	r22,36(sp)
 8009364:	dd400817 	ldw	r21,32(sp)
 8009368:	dd000717 	ldw	r20,28(sp)
 800936c:	dcc00617 	ldw	r19,24(sp)
 8009370:	dc800517 	ldw	r18,20(sp)
 8009374:	dc400417 	ldw	r17,16(sp)
 8009378:	dc000317 	ldw	r16,12(sp)
 800937c:	dec00d04 	addi	sp,sp,52
 8009380:	f800283a 	ret
 8009384:	04c03fc4 	movi	r19,255
 8009388:	99c9803a 	cmpltu	r4,r19,r7
 800938c:	200890fa 	slli	r4,r4,3
 8009390:	003fa406 	br	8009224 <__alt_data_end+0xfc009224>
 8009394:	00803fc4 	movi	r2,255
 8009398:	14c5803a 	cmpltu	r2,r2,r19
 800939c:	100490fa 	slli	r2,r2,3
 80093a0:	003fbc06 	br	8009294 <__alt_data_end+0xfc009294>
 80093a4:	00804034 	movhi	r2,256
 80093a8:	10bfffc4 	addi	r2,r2,-1
 80093ac:	1180a636 	bltu	r2,r6,8009648 <__umoddi3+0x57c>
 80093b0:	01000404 	movi	r4,16
 80093b4:	003f5c06 	br	8009128 <__alt_data_end+0xfc009128>
 80093b8:	3d0e983a 	sll	r7,r7,r20
 80093bc:	34ead83a 	srl	r21,r6,r19
 80093c0:	8cc6d83a 	srl	r3,r17,r19
 80093c4:	8d10983a 	sll	r8,r17,r20
 80093c8:	3d6ab03a 	or	r21,r7,r21
 80093cc:	a82cd43a 	srli	r22,r21,16
 80093d0:	84e2d83a 	srl	r17,r16,r19
 80093d4:	1809883a 	mov	r4,r3
 80093d8:	b00b883a 	mov	r5,r22
 80093dc:	8a22b03a 	or	r17,r17,r8
 80093e0:	3524983a 	sll	r18,r6,r20
 80093e4:	dc400015 	stw	r17,0(sp)
 80093e8:	d8c00115 	stw	r3,4(sp)
 80093ec:	8000c280 	call	8000c28 <__umodsi3>
 80093f0:	d8c00117 	ldw	r3,4(sp)
 80093f4:	b00b883a 	mov	r5,r22
 80093f8:	1039883a 	mov	fp,r2
 80093fc:	1809883a 	mov	r4,r3
 8009400:	8000bc40 	call	8000bc4 <__udivsi3>
 8009404:	adffffcc 	andi	r23,r21,65535
 8009408:	100b883a 	mov	r5,r2
 800940c:	b809883a 	mov	r4,r23
 8009410:	1023883a 	mov	r17,r2
 8009414:	8000c800 	call	8000c80 <__mulsi3>
 8009418:	d9400017 	ldw	r5,0(sp)
 800941c:	e008943a 	slli	r4,fp,16
 8009420:	8520983a 	sll	r16,r16,r20
 8009424:	2806d43a 	srli	r3,r5,16
 8009428:	1906b03a 	or	r3,r3,r4
 800942c:	1880042e 	bgeu	r3,r2,8009440 <__umoddi3+0x374>
 8009430:	1d47883a 	add	r3,r3,r21
 8009434:	893fffc4 	addi	r4,r17,-1
 8009438:	1d40892e 	bgeu	r3,r21,8009660 <__umoddi3+0x594>
 800943c:	2023883a 	mov	r17,r4
 8009440:	18b9c83a 	sub	fp,r3,r2
 8009444:	b00b883a 	mov	r5,r22
 8009448:	e009883a 	mov	r4,fp
 800944c:	8000c280 	call	8000c28 <__umodsi3>
 8009450:	b00b883a 	mov	r5,r22
 8009454:	e009883a 	mov	r4,fp
 8009458:	d8800215 	stw	r2,8(sp)
 800945c:	8000bc40 	call	8000bc4 <__udivsi3>
 8009460:	100b883a 	mov	r5,r2
 8009464:	b809883a 	mov	r4,r23
 8009468:	102d883a 	mov	r22,r2
 800946c:	8000c800 	call	8000c80 <__mulsi3>
 8009470:	d9800217 	ldw	r6,8(sp)
 8009474:	d8c00017 	ldw	r3,0(sp)
 8009478:	300c943a 	slli	r6,r6,16
 800947c:	1a3fffcc 	andi	r8,r3,65535
 8009480:	4190b03a 	or	r8,r8,r6
 8009484:	4080042e 	bgeu	r8,r2,8009498 <__umoddi3+0x3cc>
 8009488:	4551883a 	add	r8,r8,r21
 800948c:	b0ffffc4 	addi	r3,r22,-1
 8009490:	45406f2e 	bgeu	r8,r21,8009650 <__umoddi3+0x584>
 8009494:	182d883a 	mov	r22,r3
 8009498:	880e943a 	slli	r7,r17,16
 800949c:	9006d43a 	srli	r3,r18,16
 80094a0:	91bfffcc 	andi	r6,r18,65535
 80094a4:	3dacb03a 	or	r22,r7,r22
 80094a8:	b02ed43a 	srli	r23,r22,16
 80094ac:	b5bfffcc 	andi	r22,r22,65535
 80094b0:	300b883a 	mov	r5,r6
 80094b4:	b009883a 	mov	r4,r22
 80094b8:	40a3c83a 	sub	r17,r8,r2
 80094bc:	d8c00115 	stw	r3,4(sp)
 80094c0:	d9800215 	stw	r6,8(sp)
 80094c4:	8000c800 	call	8000c80 <__mulsi3>
 80094c8:	d9800217 	ldw	r6,8(sp)
 80094cc:	b809883a 	mov	r4,r23
 80094d0:	1039883a 	mov	fp,r2
 80094d4:	300b883a 	mov	r5,r6
 80094d8:	8000c800 	call	8000c80 <__mulsi3>
 80094dc:	d8c00117 	ldw	r3,4(sp)
 80094e0:	b809883a 	mov	r4,r23
 80094e4:	d8800215 	stw	r2,8(sp)
 80094e8:	180b883a 	mov	r5,r3
 80094ec:	8000c800 	call	8000c80 <__mulsi3>
 80094f0:	d8c00117 	ldw	r3,4(sp)
 80094f4:	b009883a 	mov	r4,r22
 80094f8:	102f883a 	mov	r23,r2
 80094fc:	180b883a 	mov	r5,r3
 8009500:	8000c800 	call	8000c80 <__mulsi3>
 8009504:	d9800217 	ldw	r6,8(sp)
 8009508:	e006d43a 	srli	r3,fp,16
 800950c:	1185883a 	add	r2,r2,r6
 8009510:	1885883a 	add	r2,r3,r2
 8009514:	1180022e 	bgeu	r2,r6,8009520 <__umoddi3+0x454>
 8009518:	00c00074 	movhi	r3,1
 800951c:	b8ef883a 	add	r23,r23,r3
 8009520:	1006d43a 	srli	r3,r2,16
 8009524:	1004943a 	slli	r2,r2,16
 8009528:	e73fffcc 	andi	fp,fp,65535
 800952c:	1dc7883a 	add	r3,r3,r23
 8009530:	1739883a 	add	fp,r2,fp
 8009534:	88c03a36 	bltu	r17,r3,8009620 <__umoddi3+0x554>
 8009538:	88c05126 	beq	r17,r3,8009680 <__umoddi3+0x5b4>
 800953c:	88c9c83a 	sub	r4,r17,r3
 8009540:	e00f883a 	mov	r7,fp
 8009544:	81cfc83a 	sub	r7,r16,r7
 8009548:	81c7803a 	cmpltu	r3,r16,r7
 800954c:	20c7c83a 	sub	r3,r4,r3
 8009550:	1cc4983a 	sll	r2,r3,r19
 8009554:	3d0ed83a 	srl	r7,r7,r20
 8009558:	1d06d83a 	srl	r3,r3,r20
 800955c:	11c4b03a 	or	r2,r2,r7
 8009560:	003f7c06 	br	8009354 <__alt_data_end+0xfc009354>
 8009564:	9ca6983a 	sll	r19,r19,r18
 8009568:	88f8d83a 	srl	fp,r17,r3
 800956c:	80c4d83a 	srl	r2,r16,r3
 8009570:	982cd43a 	srli	r22,r19,16
 8009574:	8ca2983a 	sll	r17,r17,r18
 8009578:	e009883a 	mov	r4,fp
 800957c:	b00b883a 	mov	r5,r22
 8009580:	146ab03a 	or	r21,r2,r17
 8009584:	8000c280 	call	8000c28 <__umodsi3>
 8009588:	b00b883a 	mov	r5,r22
 800958c:	e009883a 	mov	r4,fp
 8009590:	1029883a 	mov	r20,r2
 8009594:	9dffffcc 	andi	r23,r19,65535
 8009598:	8000bc40 	call	8000bc4 <__udivsi3>
 800959c:	b809883a 	mov	r4,r23
 80095a0:	100b883a 	mov	r5,r2
 80095a4:	8000c800 	call	8000c80 <__mulsi3>
 80095a8:	a008943a 	slli	r4,r20,16
 80095ac:	a806d43a 	srli	r3,r21,16
 80095b0:	84a8983a 	sll	r20,r16,r18
 80095b4:	1906b03a 	or	r3,r3,r4
 80095b8:	1880042e 	bgeu	r3,r2,80095cc <__umoddi3+0x500>
 80095bc:	1cc7883a 	add	r3,r3,r19
 80095c0:	1cc00236 	bltu	r3,r19,80095cc <__umoddi3+0x500>
 80095c4:	1880012e 	bgeu	r3,r2,80095cc <__umoddi3+0x500>
 80095c8:	1cc7883a 	add	r3,r3,r19
 80095cc:	18a3c83a 	sub	r17,r3,r2
 80095d0:	b00b883a 	mov	r5,r22
 80095d4:	8809883a 	mov	r4,r17
 80095d8:	8000c280 	call	8000c28 <__umodsi3>
 80095dc:	b00b883a 	mov	r5,r22
 80095e0:	8809883a 	mov	r4,r17
 80095e4:	1021883a 	mov	r16,r2
 80095e8:	8000bc40 	call	8000bc4 <__udivsi3>
 80095ec:	100b883a 	mov	r5,r2
 80095f0:	b809883a 	mov	r4,r23
 80095f4:	8020943a 	slli	r16,r16,16
 80095f8:	8000c800 	call	8000c80 <__mulsi3>
 80095fc:	a8ffffcc 	andi	r3,r21,65535
 8009600:	1c06b03a 	or	r3,r3,r16
 8009604:	1880042e 	bgeu	r3,r2,8009618 <__umoddi3+0x54c>
 8009608:	1cc7883a 	add	r3,r3,r19
 800960c:	1cc00236 	bltu	r3,r19,8009618 <__umoddi3+0x54c>
 8009610:	1880012e 	bgeu	r3,r2,8009618 <__umoddi3+0x54c>
 8009614:	1cc7883a 	add	r3,r3,r19
 8009618:	18a3c83a 	sub	r17,r3,r2
 800961c:	003f2906 	br	80092c4 <__alt_data_end+0xfc0092c4>
 8009620:	e48fc83a 	sub	r7,fp,r18
 8009624:	1d49c83a 	sub	r4,r3,r21
 8009628:	e1f9803a 	cmpltu	fp,fp,r7
 800962c:	2739c83a 	sub	fp,r4,fp
 8009630:	8f09c83a 	sub	r4,r17,fp
 8009634:	003fc306 	br	8009544 <__alt_data_end+0xfc009544>
 8009638:	01000604 	movi	r4,24
 800963c:	003ef906 	br	8009224 <__alt_data_end+0xfc009224>
 8009640:	00800604 	movi	r2,24
 8009644:	003f1306 	br	8009294 <__alt_data_end+0xfc009294>
 8009648:	01000604 	movi	r4,24
 800964c:	003eb606 	br	8009128 <__alt_data_end+0xfc009128>
 8009650:	40bf902e 	bgeu	r8,r2,8009494 <__alt_data_end+0xfc009494>
 8009654:	b5bfff84 	addi	r22,r22,-2
 8009658:	4551883a 	add	r8,r8,r21
 800965c:	003f8e06 	br	8009498 <__alt_data_end+0xfc009498>
 8009660:	18bf762e 	bgeu	r3,r2,800943c <__alt_data_end+0xfc00943c>
 8009664:	8c7fff84 	addi	r17,r17,-2
 8009668:	1d47883a 	add	r3,r3,r21
 800966c:	003f7406 	br	8009440 <__alt_data_end+0xfc009440>
 8009670:	1cc7883a 	add	r3,r3,r19
 8009674:	003ecd06 	br	80091ac <__alt_data_end+0xfc0091ac>
 8009678:	8005883a 	mov	r2,r16
 800967c:	003ef806 	br	8009260 <__alt_data_end+0xfc009260>
 8009680:	873fe736 	bltu	r16,fp,8009620 <__alt_data_end+0xfc009620>
 8009684:	e00f883a 	mov	r7,fp
 8009688:	0009883a 	mov	r4,zero
 800968c:	003fad06 	br	8009544 <__alt_data_end+0xfc009544>

08009690 <__adddf3>:
 8009690:	02c00434 	movhi	r11,16
 8009694:	5affffc4 	addi	r11,r11,-1
 8009698:	2806d7fa 	srli	r3,r5,31
 800969c:	2ad4703a 	and	r10,r5,r11
 80096a0:	3ad2703a 	and	r9,r7,r11
 80096a4:	3804d53a 	srli	r2,r7,20
 80096a8:	3018d77a 	srli	r12,r6,29
 80096ac:	280ad53a 	srli	r5,r5,20
 80096b0:	501490fa 	slli	r10,r10,3
 80096b4:	2010d77a 	srli	r8,r4,29
 80096b8:	481290fa 	slli	r9,r9,3
 80096bc:	380ed7fa 	srli	r7,r7,31
 80096c0:	defffb04 	addi	sp,sp,-20
 80096c4:	dc800215 	stw	r18,8(sp)
 80096c8:	dc400115 	stw	r17,4(sp)
 80096cc:	dc000015 	stw	r16,0(sp)
 80096d0:	dfc00415 	stw	ra,16(sp)
 80096d4:	dcc00315 	stw	r19,12(sp)
 80096d8:	1c803fcc 	andi	r18,r3,255
 80096dc:	2c01ffcc 	andi	r16,r5,2047
 80096e0:	5210b03a 	or	r8,r10,r8
 80096e4:	202290fa 	slli	r17,r4,3
 80096e8:	1081ffcc 	andi	r2,r2,2047
 80096ec:	4b12b03a 	or	r9,r9,r12
 80096f0:	300c90fa 	slli	r6,r6,3
 80096f4:	91c07526 	beq	r18,r7,80098cc <__adddf3+0x23c>
 80096f8:	8087c83a 	sub	r3,r16,r2
 80096fc:	00c0ab0e 	bge	zero,r3,80099ac <__adddf3+0x31c>
 8009700:	10002a1e 	bne	r2,zero,80097ac <__adddf3+0x11c>
 8009704:	4984b03a 	or	r2,r9,r6
 8009708:	1000961e 	bne	r2,zero,8009964 <__adddf3+0x2d4>
 800970c:	888001cc 	andi	r2,r17,7
 8009710:	10000726 	beq	r2,zero,8009730 <__adddf3+0xa0>
 8009714:	888003cc 	andi	r2,r17,15
 8009718:	00c00104 	movi	r3,4
 800971c:	10c00426 	beq	r2,r3,8009730 <__adddf3+0xa0>
 8009720:	88c7883a 	add	r3,r17,r3
 8009724:	1c63803a 	cmpltu	r17,r3,r17
 8009728:	4451883a 	add	r8,r8,r17
 800972c:	1823883a 	mov	r17,r3
 8009730:	4080202c 	andhi	r2,r8,128
 8009734:	10005926 	beq	r2,zero,800989c <__adddf3+0x20c>
 8009738:	84000044 	addi	r16,r16,1
 800973c:	0081ffc4 	movi	r2,2047
 8009740:	8080ba26 	beq	r16,r2,8009a2c <__adddf3+0x39c>
 8009744:	00bfe034 	movhi	r2,65408
 8009748:	10bfffc4 	addi	r2,r2,-1
 800974c:	4090703a 	and	r8,r8,r2
 8009750:	4004977a 	slli	r2,r8,29
 8009754:	4010927a 	slli	r8,r8,9
 8009758:	8822d0fa 	srli	r17,r17,3
 800975c:	8401ffcc 	andi	r16,r16,2047
 8009760:	4010d33a 	srli	r8,r8,12
 8009764:	9007883a 	mov	r3,r18
 8009768:	1444b03a 	or	r2,r2,r17
 800976c:	8401ffcc 	andi	r16,r16,2047
 8009770:	8020953a 	slli	r16,r16,20
 8009774:	18c03fcc 	andi	r3,r3,255
 8009778:	01000434 	movhi	r4,16
 800977c:	213fffc4 	addi	r4,r4,-1
 8009780:	180697fa 	slli	r3,r3,31
 8009784:	4110703a 	and	r8,r8,r4
 8009788:	4410b03a 	or	r8,r8,r16
 800978c:	40c6b03a 	or	r3,r8,r3
 8009790:	dfc00417 	ldw	ra,16(sp)
 8009794:	dcc00317 	ldw	r19,12(sp)
 8009798:	dc800217 	ldw	r18,8(sp)
 800979c:	dc400117 	ldw	r17,4(sp)
 80097a0:	dc000017 	ldw	r16,0(sp)
 80097a4:	dec00504 	addi	sp,sp,20
 80097a8:	f800283a 	ret
 80097ac:	0081ffc4 	movi	r2,2047
 80097b0:	80bfd626 	beq	r16,r2,800970c <__alt_data_end+0xfc00970c>
 80097b4:	4a402034 	orhi	r9,r9,128
 80097b8:	00800e04 	movi	r2,56
 80097bc:	10c09f16 	blt	r2,r3,8009a3c <__adddf3+0x3ac>
 80097c0:	008007c4 	movi	r2,31
 80097c4:	10c0c216 	blt	r2,r3,8009ad0 <__adddf3+0x440>
 80097c8:	00800804 	movi	r2,32
 80097cc:	10c5c83a 	sub	r2,r2,r3
 80097d0:	488a983a 	sll	r5,r9,r2
 80097d4:	30c8d83a 	srl	r4,r6,r3
 80097d8:	3084983a 	sll	r2,r6,r2
 80097dc:	48c6d83a 	srl	r3,r9,r3
 80097e0:	290cb03a 	or	r6,r5,r4
 80097e4:	1004c03a 	cmpne	r2,r2,zero
 80097e8:	308cb03a 	or	r6,r6,r2
 80097ec:	898dc83a 	sub	r6,r17,r6
 80097f0:	89a3803a 	cmpltu	r17,r17,r6
 80097f4:	40d1c83a 	sub	r8,r8,r3
 80097f8:	4451c83a 	sub	r8,r8,r17
 80097fc:	3023883a 	mov	r17,r6
 8009800:	4080202c 	andhi	r2,r8,128
 8009804:	10002326 	beq	r2,zero,8009894 <__adddf3+0x204>
 8009808:	04c02034 	movhi	r19,128
 800980c:	9cffffc4 	addi	r19,r19,-1
 8009810:	44e6703a 	and	r19,r8,r19
 8009814:	98007626 	beq	r19,zero,80099f0 <__adddf3+0x360>
 8009818:	9809883a 	mov	r4,r19
 800981c:	800bed00 	call	800bed0 <__clzsi2>
 8009820:	10fffe04 	addi	r3,r2,-8
 8009824:	010007c4 	movi	r4,31
 8009828:	20c07716 	blt	r4,r3,8009a08 <__adddf3+0x378>
 800982c:	00800804 	movi	r2,32
 8009830:	10c5c83a 	sub	r2,r2,r3
 8009834:	8884d83a 	srl	r2,r17,r2
 8009838:	98d0983a 	sll	r8,r19,r3
 800983c:	88e2983a 	sll	r17,r17,r3
 8009840:	1204b03a 	or	r2,r2,r8
 8009844:	1c007416 	blt	r3,r16,8009a18 <__adddf3+0x388>
 8009848:	1c21c83a 	sub	r16,r3,r16
 800984c:	82000044 	addi	r8,r16,1
 8009850:	00c007c4 	movi	r3,31
 8009854:	1a009116 	blt	r3,r8,8009a9c <__adddf3+0x40c>
 8009858:	00c00804 	movi	r3,32
 800985c:	1a07c83a 	sub	r3,r3,r8
 8009860:	8a08d83a 	srl	r4,r17,r8
 8009864:	88e2983a 	sll	r17,r17,r3
 8009868:	10c6983a 	sll	r3,r2,r3
 800986c:	1210d83a 	srl	r8,r2,r8
 8009870:	8804c03a 	cmpne	r2,r17,zero
 8009874:	1906b03a 	or	r3,r3,r4
 8009878:	18a2b03a 	or	r17,r3,r2
 800987c:	0021883a 	mov	r16,zero
 8009880:	003fa206 	br	800970c <__alt_data_end+0xfc00970c>
 8009884:	1890b03a 	or	r8,r3,r2
 8009888:	40017d26 	beq	r8,zero,8009e80 <__adddf3+0x7f0>
 800988c:	1011883a 	mov	r8,r2
 8009890:	1823883a 	mov	r17,r3
 8009894:	888001cc 	andi	r2,r17,7
 8009898:	103f9e1e 	bne	r2,zero,8009714 <__alt_data_end+0xfc009714>
 800989c:	4004977a 	slli	r2,r8,29
 80098a0:	8822d0fa 	srli	r17,r17,3
 80098a4:	4010d0fa 	srli	r8,r8,3
 80098a8:	9007883a 	mov	r3,r18
 80098ac:	1444b03a 	or	r2,r2,r17
 80098b0:	0101ffc4 	movi	r4,2047
 80098b4:	81002426 	beq	r16,r4,8009948 <__adddf3+0x2b8>
 80098b8:	8120703a 	and	r16,r16,r4
 80098bc:	01000434 	movhi	r4,16
 80098c0:	213fffc4 	addi	r4,r4,-1
 80098c4:	4110703a 	and	r8,r8,r4
 80098c8:	003fa806 	br	800976c <__alt_data_end+0xfc00976c>
 80098cc:	8089c83a 	sub	r4,r16,r2
 80098d0:	01005e0e 	bge	zero,r4,8009a4c <__adddf3+0x3bc>
 80098d4:	10002b26 	beq	r2,zero,8009984 <__adddf3+0x2f4>
 80098d8:	0081ffc4 	movi	r2,2047
 80098dc:	80bf8b26 	beq	r16,r2,800970c <__alt_data_end+0xfc00970c>
 80098e0:	4a402034 	orhi	r9,r9,128
 80098e4:	00800e04 	movi	r2,56
 80098e8:	1100a40e 	bge	r2,r4,8009b7c <__adddf3+0x4ec>
 80098ec:	498cb03a 	or	r6,r9,r6
 80098f0:	300ac03a 	cmpne	r5,r6,zero
 80098f4:	0013883a 	mov	r9,zero
 80098f8:	2c4b883a 	add	r5,r5,r17
 80098fc:	2c63803a 	cmpltu	r17,r5,r17
 8009900:	4a11883a 	add	r8,r9,r8
 8009904:	8a11883a 	add	r8,r17,r8
 8009908:	2823883a 	mov	r17,r5
 800990c:	4080202c 	andhi	r2,r8,128
 8009910:	103fe026 	beq	r2,zero,8009894 <__alt_data_end+0xfc009894>
 8009914:	84000044 	addi	r16,r16,1
 8009918:	0081ffc4 	movi	r2,2047
 800991c:	8080d226 	beq	r16,r2,8009c68 <__adddf3+0x5d8>
 8009920:	00bfe034 	movhi	r2,65408
 8009924:	10bfffc4 	addi	r2,r2,-1
 8009928:	4090703a 	and	r8,r8,r2
 800992c:	880ad07a 	srli	r5,r17,1
 8009930:	400897fa 	slli	r4,r8,31
 8009934:	88c0004c 	andi	r3,r17,1
 8009938:	28e2b03a 	or	r17,r5,r3
 800993c:	4010d07a 	srli	r8,r8,1
 8009940:	2462b03a 	or	r17,r4,r17
 8009944:	003f7106 	br	800970c <__alt_data_end+0xfc00970c>
 8009948:	4088b03a 	or	r4,r8,r2
 800994c:	20014526 	beq	r4,zero,8009e64 <__adddf3+0x7d4>
 8009950:	01000434 	movhi	r4,16
 8009954:	42000234 	orhi	r8,r8,8
 8009958:	213fffc4 	addi	r4,r4,-1
 800995c:	4110703a 	and	r8,r8,r4
 8009960:	003f8206 	br	800976c <__alt_data_end+0xfc00976c>
 8009964:	18ffffc4 	addi	r3,r3,-1
 8009968:	1800491e 	bne	r3,zero,8009a90 <__adddf3+0x400>
 800996c:	898bc83a 	sub	r5,r17,r6
 8009970:	8963803a 	cmpltu	r17,r17,r5
 8009974:	4251c83a 	sub	r8,r8,r9
 8009978:	4451c83a 	sub	r8,r8,r17
 800997c:	2823883a 	mov	r17,r5
 8009980:	003f9f06 	br	8009800 <__alt_data_end+0xfc009800>
 8009984:	4984b03a 	or	r2,r9,r6
 8009988:	103f6026 	beq	r2,zero,800970c <__alt_data_end+0xfc00970c>
 800998c:	213fffc4 	addi	r4,r4,-1
 8009990:	2000931e 	bne	r4,zero,8009be0 <__adddf3+0x550>
 8009994:	898d883a 	add	r6,r17,r6
 8009998:	3463803a 	cmpltu	r17,r6,r17
 800999c:	4251883a 	add	r8,r8,r9
 80099a0:	8a11883a 	add	r8,r17,r8
 80099a4:	3023883a 	mov	r17,r6
 80099a8:	003fd806 	br	800990c <__alt_data_end+0xfc00990c>
 80099ac:	1800541e 	bne	r3,zero,8009b00 <__adddf3+0x470>
 80099b0:	80800044 	addi	r2,r16,1
 80099b4:	1081ffcc 	andi	r2,r2,2047
 80099b8:	00c00044 	movi	r3,1
 80099bc:	1880a00e 	bge	r3,r2,8009c40 <__adddf3+0x5b0>
 80099c0:	8989c83a 	sub	r4,r17,r6
 80099c4:	8905803a 	cmpltu	r2,r17,r4
 80099c8:	4267c83a 	sub	r19,r8,r9
 80099cc:	98a7c83a 	sub	r19,r19,r2
 80099d0:	9880202c 	andhi	r2,r19,128
 80099d4:	10006326 	beq	r2,zero,8009b64 <__adddf3+0x4d4>
 80099d8:	3463c83a 	sub	r17,r6,r17
 80099dc:	4a07c83a 	sub	r3,r9,r8
 80099e0:	344d803a 	cmpltu	r6,r6,r17
 80099e4:	19a7c83a 	sub	r19,r3,r6
 80099e8:	3825883a 	mov	r18,r7
 80099ec:	983f8a1e 	bne	r19,zero,8009818 <__alt_data_end+0xfc009818>
 80099f0:	8809883a 	mov	r4,r17
 80099f4:	800bed00 	call	800bed0 <__clzsi2>
 80099f8:	10800804 	addi	r2,r2,32
 80099fc:	10fffe04 	addi	r3,r2,-8
 8009a00:	010007c4 	movi	r4,31
 8009a04:	20ff890e 	bge	r4,r3,800982c <__alt_data_end+0xfc00982c>
 8009a08:	10bff604 	addi	r2,r2,-40
 8009a0c:	8884983a 	sll	r2,r17,r2
 8009a10:	0023883a 	mov	r17,zero
 8009a14:	1c3f8c0e 	bge	r3,r16,8009848 <__alt_data_end+0xfc009848>
 8009a18:	023fe034 	movhi	r8,65408
 8009a1c:	423fffc4 	addi	r8,r8,-1
 8009a20:	80e1c83a 	sub	r16,r16,r3
 8009a24:	1210703a 	and	r8,r2,r8
 8009a28:	003f3806 	br	800970c <__alt_data_end+0xfc00970c>
 8009a2c:	9007883a 	mov	r3,r18
 8009a30:	0011883a 	mov	r8,zero
 8009a34:	0005883a 	mov	r2,zero
 8009a38:	003f4c06 	br	800976c <__alt_data_end+0xfc00976c>
 8009a3c:	498cb03a 	or	r6,r9,r6
 8009a40:	300cc03a 	cmpne	r6,r6,zero
 8009a44:	0007883a 	mov	r3,zero
 8009a48:	003f6806 	br	80097ec <__alt_data_end+0xfc0097ec>
 8009a4c:	20009c1e 	bne	r4,zero,8009cc0 <__adddf3+0x630>
 8009a50:	80800044 	addi	r2,r16,1
 8009a54:	1141ffcc 	andi	r5,r2,2047
 8009a58:	01000044 	movi	r4,1
 8009a5c:	2140670e 	bge	r4,r5,8009bfc <__adddf3+0x56c>
 8009a60:	0101ffc4 	movi	r4,2047
 8009a64:	11007f26 	beq	r2,r4,8009c64 <__adddf3+0x5d4>
 8009a68:	898d883a 	add	r6,r17,r6
 8009a6c:	4247883a 	add	r3,r8,r9
 8009a70:	3451803a 	cmpltu	r8,r6,r17
 8009a74:	40d1883a 	add	r8,r8,r3
 8009a78:	402297fa 	slli	r17,r8,31
 8009a7c:	300cd07a 	srli	r6,r6,1
 8009a80:	4010d07a 	srli	r8,r8,1
 8009a84:	1021883a 	mov	r16,r2
 8009a88:	89a2b03a 	or	r17,r17,r6
 8009a8c:	003f1f06 	br	800970c <__alt_data_end+0xfc00970c>
 8009a90:	0081ffc4 	movi	r2,2047
 8009a94:	80bf481e 	bne	r16,r2,80097b8 <__alt_data_end+0xfc0097b8>
 8009a98:	003f1c06 	br	800970c <__alt_data_end+0xfc00970c>
 8009a9c:	843ff844 	addi	r16,r16,-31
 8009aa0:	01000804 	movi	r4,32
 8009aa4:	1406d83a 	srl	r3,r2,r16
 8009aa8:	41005026 	beq	r8,r4,8009bec <__adddf3+0x55c>
 8009aac:	01001004 	movi	r4,64
 8009ab0:	2211c83a 	sub	r8,r4,r8
 8009ab4:	1204983a 	sll	r2,r2,r8
 8009ab8:	88a2b03a 	or	r17,r17,r2
 8009abc:	8822c03a 	cmpne	r17,r17,zero
 8009ac0:	1c62b03a 	or	r17,r3,r17
 8009ac4:	0011883a 	mov	r8,zero
 8009ac8:	0021883a 	mov	r16,zero
 8009acc:	003f7106 	br	8009894 <__alt_data_end+0xfc009894>
 8009ad0:	193ff804 	addi	r4,r3,-32
 8009ad4:	00800804 	movi	r2,32
 8009ad8:	4908d83a 	srl	r4,r9,r4
 8009adc:	18804526 	beq	r3,r2,8009bf4 <__adddf3+0x564>
 8009ae0:	00801004 	movi	r2,64
 8009ae4:	10c5c83a 	sub	r2,r2,r3
 8009ae8:	4886983a 	sll	r3,r9,r2
 8009aec:	198cb03a 	or	r6,r3,r6
 8009af0:	300cc03a 	cmpne	r6,r6,zero
 8009af4:	218cb03a 	or	r6,r4,r6
 8009af8:	0007883a 	mov	r3,zero
 8009afc:	003f3b06 	br	80097ec <__alt_data_end+0xfc0097ec>
 8009b00:	80002a26 	beq	r16,zero,8009bac <__adddf3+0x51c>
 8009b04:	0101ffc4 	movi	r4,2047
 8009b08:	11006826 	beq	r2,r4,8009cac <__adddf3+0x61c>
 8009b0c:	00c7c83a 	sub	r3,zero,r3
 8009b10:	42002034 	orhi	r8,r8,128
 8009b14:	01000e04 	movi	r4,56
 8009b18:	20c07c16 	blt	r4,r3,8009d0c <__adddf3+0x67c>
 8009b1c:	010007c4 	movi	r4,31
 8009b20:	20c0da16 	blt	r4,r3,8009e8c <__adddf3+0x7fc>
 8009b24:	01000804 	movi	r4,32
 8009b28:	20c9c83a 	sub	r4,r4,r3
 8009b2c:	4114983a 	sll	r10,r8,r4
 8009b30:	88cad83a 	srl	r5,r17,r3
 8009b34:	8908983a 	sll	r4,r17,r4
 8009b38:	40c6d83a 	srl	r3,r8,r3
 8009b3c:	5162b03a 	or	r17,r10,r5
 8009b40:	2008c03a 	cmpne	r4,r4,zero
 8009b44:	8922b03a 	or	r17,r17,r4
 8009b48:	3463c83a 	sub	r17,r6,r17
 8009b4c:	48c7c83a 	sub	r3,r9,r3
 8009b50:	344d803a 	cmpltu	r6,r6,r17
 8009b54:	1991c83a 	sub	r8,r3,r6
 8009b58:	1021883a 	mov	r16,r2
 8009b5c:	3825883a 	mov	r18,r7
 8009b60:	003f2706 	br	8009800 <__alt_data_end+0xfc009800>
 8009b64:	24d0b03a 	or	r8,r4,r19
 8009b68:	40001b1e 	bne	r8,zero,8009bd8 <__adddf3+0x548>
 8009b6c:	0005883a 	mov	r2,zero
 8009b70:	0007883a 	mov	r3,zero
 8009b74:	0021883a 	mov	r16,zero
 8009b78:	003f4d06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 8009b7c:	008007c4 	movi	r2,31
 8009b80:	11003c16 	blt	r2,r4,8009c74 <__adddf3+0x5e4>
 8009b84:	00800804 	movi	r2,32
 8009b88:	1105c83a 	sub	r2,r2,r4
 8009b8c:	488e983a 	sll	r7,r9,r2
 8009b90:	310ad83a 	srl	r5,r6,r4
 8009b94:	3084983a 	sll	r2,r6,r2
 8009b98:	4912d83a 	srl	r9,r9,r4
 8009b9c:	394ab03a 	or	r5,r7,r5
 8009ba0:	1004c03a 	cmpne	r2,r2,zero
 8009ba4:	288ab03a 	or	r5,r5,r2
 8009ba8:	003f5306 	br	80098f8 <__alt_data_end+0xfc0098f8>
 8009bac:	4448b03a 	or	r4,r8,r17
 8009bb0:	20003e26 	beq	r4,zero,8009cac <__adddf3+0x61c>
 8009bb4:	00c6303a 	nor	r3,zero,r3
 8009bb8:	18003a1e 	bne	r3,zero,8009ca4 <__adddf3+0x614>
 8009bbc:	3463c83a 	sub	r17,r6,r17
 8009bc0:	4a07c83a 	sub	r3,r9,r8
 8009bc4:	344d803a 	cmpltu	r6,r6,r17
 8009bc8:	1991c83a 	sub	r8,r3,r6
 8009bcc:	1021883a 	mov	r16,r2
 8009bd0:	3825883a 	mov	r18,r7
 8009bd4:	003f0a06 	br	8009800 <__alt_data_end+0xfc009800>
 8009bd8:	2023883a 	mov	r17,r4
 8009bdc:	003f0d06 	br	8009814 <__alt_data_end+0xfc009814>
 8009be0:	0081ffc4 	movi	r2,2047
 8009be4:	80bf3f1e 	bne	r16,r2,80098e4 <__alt_data_end+0xfc0098e4>
 8009be8:	003ec806 	br	800970c <__alt_data_end+0xfc00970c>
 8009bec:	0005883a 	mov	r2,zero
 8009bf0:	003fb106 	br	8009ab8 <__alt_data_end+0xfc009ab8>
 8009bf4:	0007883a 	mov	r3,zero
 8009bf8:	003fbc06 	br	8009aec <__alt_data_end+0xfc009aec>
 8009bfc:	4444b03a 	or	r2,r8,r17
 8009c00:	8000871e 	bne	r16,zero,8009e20 <__adddf3+0x790>
 8009c04:	1000ba26 	beq	r2,zero,8009ef0 <__adddf3+0x860>
 8009c08:	4984b03a 	or	r2,r9,r6
 8009c0c:	103ebf26 	beq	r2,zero,800970c <__alt_data_end+0xfc00970c>
 8009c10:	8985883a 	add	r2,r17,r6
 8009c14:	4247883a 	add	r3,r8,r9
 8009c18:	1451803a 	cmpltu	r8,r2,r17
 8009c1c:	40d1883a 	add	r8,r8,r3
 8009c20:	40c0202c 	andhi	r3,r8,128
 8009c24:	1023883a 	mov	r17,r2
 8009c28:	183f1a26 	beq	r3,zero,8009894 <__alt_data_end+0xfc009894>
 8009c2c:	00bfe034 	movhi	r2,65408
 8009c30:	10bfffc4 	addi	r2,r2,-1
 8009c34:	2021883a 	mov	r16,r4
 8009c38:	4090703a 	and	r8,r8,r2
 8009c3c:	003eb306 	br	800970c <__alt_data_end+0xfc00970c>
 8009c40:	4444b03a 	or	r2,r8,r17
 8009c44:	8000291e 	bne	r16,zero,8009cec <__adddf3+0x65c>
 8009c48:	10004b1e 	bne	r2,zero,8009d78 <__adddf3+0x6e8>
 8009c4c:	4990b03a 	or	r8,r9,r6
 8009c50:	40008b26 	beq	r8,zero,8009e80 <__adddf3+0x7f0>
 8009c54:	4811883a 	mov	r8,r9
 8009c58:	3023883a 	mov	r17,r6
 8009c5c:	3825883a 	mov	r18,r7
 8009c60:	003eaa06 	br	800970c <__alt_data_end+0xfc00970c>
 8009c64:	1021883a 	mov	r16,r2
 8009c68:	0011883a 	mov	r8,zero
 8009c6c:	0005883a 	mov	r2,zero
 8009c70:	003f0f06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 8009c74:	217ff804 	addi	r5,r4,-32
 8009c78:	00800804 	movi	r2,32
 8009c7c:	494ad83a 	srl	r5,r9,r5
 8009c80:	20807d26 	beq	r4,r2,8009e78 <__adddf3+0x7e8>
 8009c84:	00801004 	movi	r2,64
 8009c88:	1109c83a 	sub	r4,r2,r4
 8009c8c:	4912983a 	sll	r9,r9,r4
 8009c90:	498cb03a 	or	r6,r9,r6
 8009c94:	300cc03a 	cmpne	r6,r6,zero
 8009c98:	298ab03a 	or	r5,r5,r6
 8009c9c:	0013883a 	mov	r9,zero
 8009ca0:	003f1506 	br	80098f8 <__alt_data_end+0xfc0098f8>
 8009ca4:	0101ffc4 	movi	r4,2047
 8009ca8:	113f9a1e 	bne	r2,r4,8009b14 <__alt_data_end+0xfc009b14>
 8009cac:	4811883a 	mov	r8,r9
 8009cb0:	3023883a 	mov	r17,r6
 8009cb4:	1021883a 	mov	r16,r2
 8009cb8:	3825883a 	mov	r18,r7
 8009cbc:	003e9306 	br	800970c <__alt_data_end+0xfc00970c>
 8009cc0:	8000161e 	bne	r16,zero,8009d1c <__adddf3+0x68c>
 8009cc4:	444ab03a 	or	r5,r8,r17
 8009cc8:	28005126 	beq	r5,zero,8009e10 <__adddf3+0x780>
 8009ccc:	0108303a 	nor	r4,zero,r4
 8009cd0:	20004d1e 	bne	r4,zero,8009e08 <__adddf3+0x778>
 8009cd4:	89a3883a 	add	r17,r17,r6
 8009cd8:	4253883a 	add	r9,r8,r9
 8009cdc:	898d803a 	cmpltu	r6,r17,r6
 8009ce0:	3251883a 	add	r8,r6,r9
 8009ce4:	1021883a 	mov	r16,r2
 8009ce8:	003f0806 	br	800990c <__alt_data_end+0xfc00990c>
 8009cec:	1000301e 	bne	r2,zero,8009db0 <__adddf3+0x720>
 8009cf0:	4984b03a 	or	r2,r9,r6
 8009cf4:	10007126 	beq	r2,zero,8009ebc <__adddf3+0x82c>
 8009cf8:	4811883a 	mov	r8,r9
 8009cfc:	3023883a 	mov	r17,r6
 8009d00:	3825883a 	mov	r18,r7
 8009d04:	0401ffc4 	movi	r16,2047
 8009d08:	003e8006 	br	800970c <__alt_data_end+0xfc00970c>
 8009d0c:	4462b03a 	or	r17,r8,r17
 8009d10:	8822c03a 	cmpne	r17,r17,zero
 8009d14:	0007883a 	mov	r3,zero
 8009d18:	003f8b06 	br	8009b48 <__alt_data_end+0xfc009b48>
 8009d1c:	0141ffc4 	movi	r5,2047
 8009d20:	11403b26 	beq	r2,r5,8009e10 <__adddf3+0x780>
 8009d24:	0109c83a 	sub	r4,zero,r4
 8009d28:	42002034 	orhi	r8,r8,128
 8009d2c:	01400e04 	movi	r5,56
 8009d30:	29006716 	blt	r5,r4,8009ed0 <__adddf3+0x840>
 8009d34:	014007c4 	movi	r5,31
 8009d38:	29007016 	blt	r5,r4,8009efc <__adddf3+0x86c>
 8009d3c:	01400804 	movi	r5,32
 8009d40:	290bc83a 	sub	r5,r5,r4
 8009d44:	4154983a 	sll	r10,r8,r5
 8009d48:	890ed83a 	srl	r7,r17,r4
 8009d4c:	894a983a 	sll	r5,r17,r5
 8009d50:	4108d83a 	srl	r4,r8,r4
 8009d54:	51e2b03a 	or	r17,r10,r7
 8009d58:	280ac03a 	cmpne	r5,r5,zero
 8009d5c:	8962b03a 	or	r17,r17,r5
 8009d60:	89a3883a 	add	r17,r17,r6
 8009d64:	2253883a 	add	r9,r4,r9
 8009d68:	898d803a 	cmpltu	r6,r17,r6
 8009d6c:	3251883a 	add	r8,r6,r9
 8009d70:	1021883a 	mov	r16,r2
 8009d74:	003ee506 	br	800990c <__alt_data_end+0xfc00990c>
 8009d78:	4984b03a 	or	r2,r9,r6
 8009d7c:	103e6326 	beq	r2,zero,800970c <__alt_data_end+0xfc00970c>
 8009d80:	8987c83a 	sub	r3,r17,r6
 8009d84:	88c9803a 	cmpltu	r4,r17,r3
 8009d88:	4245c83a 	sub	r2,r8,r9
 8009d8c:	1105c83a 	sub	r2,r2,r4
 8009d90:	1100202c 	andhi	r4,r2,128
 8009d94:	203ebb26 	beq	r4,zero,8009884 <__alt_data_end+0xfc009884>
 8009d98:	3463c83a 	sub	r17,r6,r17
 8009d9c:	4a07c83a 	sub	r3,r9,r8
 8009da0:	344d803a 	cmpltu	r6,r6,r17
 8009da4:	1991c83a 	sub	r8,r3,r6
 8009da8:	3825883a 	mov	r18,r7
 8009dac:	003e5706 	br	800970c <__alt_data_end+0xfc00970c>
 8009db0:	4984b03a 	or	r2,r9,r6
 8009db4:	10002e26 	beq	r2,zero,8009e70 <__adddf3+0x7e0>
 8009db8:	4004d0fa 	srli	r2,r8,3
 8009dbc:	8822d0fa 	srli	r17,r17,3
 8009dc0:	4010977a 	slli	r8,r8,29
 8009dc4:	10c0022c 	andhi	r3,r2,8
 8009dc8:	4462b03a 	or	r17,r8,r17
 8009dcc:	18000826 	beq	r3,zero,8009df0 <__adddf3+0x760>
 8009dd0:	4808d0fa 	srli	r4,r9,3
 8009dd4:	20c0022c 	andhi	r3,r4,8
 8009dd8:	1800051e 	bne	r3,zero,8009df0 <__adddf3+0x760>
 8009ddc:	300cd0fa 	srli	r6,r6,3
 8009de0:	4806977a 	slli	r3,r9,29
 8009de4:	2005883a 	mov	r2,r4
 8009de8:	3825883a 	mov	r18,r7
 8009dec:	19a2b03a 	or	r17,r3,r6
 8009df0:	8810d77a 	srli	r8,r17,29
 8009df4:	100490fa 	slli	r2,r2,3
 8009df8:	882290fa 	slli	r17,r17,3
 8009dfc:	0401ffc4 	movi	r16,2047
 8009e00:	4090b03a 	or	r8,r8,r2
 8009e04:	003e4106 	br	800970c <__alt_data_end+0xfc00970c>
 8009e08:	0141ffc4 	movi	r5,2047
 8009e0c:	117fc71e 	bne	r2,r5,8009d2c <__alt_data_end+0xfc009d2c>
 8009e10:	4811883a 	mov	r8,r9
 8009e14:	3023883a 	mov	r17,r6
 8009e18:	1021883a 	mov	r16,r2
 8009e1c:	003e3b06 	br	800970c <__alt_data_end+0xfc00970c>
 8009e20:	10002f26 	beq	r2,zero,8009ee0 <__adddf3+0x850>
 8009e24:	4984b03a 	or	r2,r9,r6
 8009e28:	10001126 	beq	r2,zero,8009e70 <__adddf3+0x7e0>
 8009e2c:	4004d0fa 	srli	r2,r8,3
 8009e30:	8822d0fa 	srli	r17,r17,3
 8009e34:	4010977a 	slli	r8,r8,29
 8009e38:	10c0022c 	andhi	r3,r2,8
 8009e3c:	4462b03a 	or	r17,r8,r17
 8009e40:	183feb26 	beq	r3,zero,8009df0 <__alt_data_end+0xfc009df0>
 8009e44:	4808d0fa 	srli	r4,r9,3
 8009e48:	20c0022c 	andhi	r3,r4,8
 8009e4c:	183fe81e 	bne	r3,zero,8009df0 <__alt_data_end+0xfc009df0>
 8009e50:	300cd0fa 	srli	r6,r6,3
 8009e54:	4806977a 	slli	r3,r9,29
 8009e58:	2005883a 	mov	r2,r4
 8009e5c:	19a2b03a 	or	r17,r3,r6
 8009e60:	003fe306 	br	8009df0 <__alt_data_end+0xfc009df0>
 8009e64:	0011883a 	mov	r8,zero
 8009e68:	0005883a 	mov	r2,zero
 8009e6c:	003e3f06 	br	800976c <__alt_data_end+0xfc00976c>
 8009e70:	0401ffc4 	movi	r16,2047
 8009e74:	003e2506 	br	800970c <__alt_data_end+0xfc00970c>
 8009e78:	0013883a 	mov	r9,zero
 8009e7c:	003f8406 	br	8009c90 <__alt_data_end+0xfc009c90>
 8009e80:	0005883a 	mov	r2,zero
 8009e84:	0007883a 	mov	r3,zero
 8009e88:	003e8906 	br	80098b0 <__alt_data_end+0xfc0098b0>
 8009e8c:	197ff804 	addi	r5,r3,-32
 8009e90:	01000804 	movi	r4,32
 8009e94:	414ad83a 	srl	r5,r8,r5
 8009e98:	19002426 	beq	r3,r4,8009f2c <__adddf3+0x89c>
 8009e9c:	01001004 	movi	r4,64
 8009ea0:	20c7c83a 	sub	r3,r4,r3
 8009ea4:	40c6983a 	sll	r3,r8,r3
 8009ea8:	1c46b03a 	or	r3,r3,r17
 8009eac:	1806c03a 	cmpne	r3,r3,zero
 8009eb0:	28e2b03a 	or	r17,r5,r3
 8009eb4:	0007883a 	mov	r3,zero
 8009eb8:	003f2306 	br	8009b48 <__alt_data_end+0xfc009b48>
 8009ebc:	0007883a 	mov	r3,zero
 8009ec0:	5811883a 	mov	r8,r11
 8009ec4:	00bfffc4 	movi	r2,-1
 8009ec8:	0401ffc4 	movi	r16,2047
 8009ecc:	003e7806 	br	80098b0 <__alt_data_end+0xfc0098b0>
 8009ed0:	4462b03a 	or	r17,r8,r17
 8009ed4:	8822c03a 	cmpne	r17,r17,zero
 8009ed8:	0009883a 	mov	r4,zero
 8009edc:	003fa006 	br	8009d60 <__alt_data_end+0xfc009d60>
 8009ee0:	4811883a 	mov	r8,r9
 8009ee4:	3023883a 	mov	r17,r6
 8009ee8:	0401ffc4 	movi	r16,2047
 8009eec:	003e0706 	br	800970c <__alt_data_end+0xfc00970c>
 8009ef0:	4811883a 	mov	r8,r9
 8009ef4:	3023883a 	mov	r17,r6
 8009ef8:	003e0406 	br	800970c <__alt_data_end+0xfc00970c>
 8009efc:	21fff804 	addi	r7,r4,-32
 8009f00:	01400804 	movi	r5,32
 8009f04:	41ced83a 	srl	r7,r8,r7
 8009f08:	21400a26 	beq	r4,r5,8009f34 <__adddf3+0x8a4>
 8009f0c:	01401004 	movi	r5,64
 8009f10:	2909c83a 	sub	r4,r5,r4
 8009f14:	4108983a 	sll	r4,r8,r4
 8009f18:	2448b03a 	or	r4,r4,r17
 8009f1c:	2008c03a 	cmpne	r4,r4,zero
 8009f20:	3922b03a 	or	r17,r7,r4
 8009f24:	0009883a 	mov	r4,zero
 8009f28:	003f8d06 	br	8009d60 <__alt_data_end+0xfc009d60>
 8009f2c:	0007883a 	mov	r3,zero
 8009f30:	003fdd06 	br	8009ea8 <__alt_data_end+0xfc009ea8>
 8009f34:	0009883a 	mov	r4,zero
 8009f38:	003ff706 	br	8009f18 <__alt_data_end+0xfc009f18>

08009f3c <__divdf3>:
 8009f3c:	defff004 	addi	sp,sp,-64
 8009f40:	dc800815 	stw	r18,32(sp)
 8009f44:	2824d53a 	srli	r18,r5,20
 8009f48:	dd800c15 	stw	r22,48(sp)
 8009f4c:	282cd7fa 	srli	r22,r5,31
 8009f50:	dc000615 	stw	r16,24(sp)
 8009f54:	04000434 	movhi	r16,16
 8009f58:	843fffc4 	addi	r16,r16,-1
 8009f5c:	dfc00f15 	stw	ra,60(sp)
 8009f60:	df000e15 	stw	fp,56(sp)
 8009f64:	ddc00d15 	stw	r23,52(sp)
 8009f68:	dd400b15 	stw	r21,44(sp)
 8009f6c:	dd000a15 	stw	r20,40(sp)
 8009f70:	dcc00915 	stw	r19,36(sp)
 8009f74:	dc400715 	stw	r17,28(sp)
 8009f78:	9481ffcc 	andi	r18,r18,2047
 8009f7c:	2c20703a 	and	r16,r5,r16
 8009f80:	b2003fcc 	andi	r8,r22,255
 8009f84:	90006126 	beq	r18,zero,800a10c <__divdf3+0x1d0>
 8009f88:	0081ffc4 	movi	r2,2047
 8009f8c:	202b883a 	mov	r21,r4
 8009f90:	90803726 	beq	r18,r2,800a070 <__divdf3+0x134>
 8009f94:	80800434 	orhi	r2,r16,16
 8009f98:	100490fa 	slli	r2,r2,3
 8009f9c:	2020d77a 	srli	r16,r4,29
 8009fa0:	202a90fa 	slli	r21,r4,3
 8009fa4:	94bf0044 	addi	r18,r18,-1023
 8009fa8:	80a0b03a 	or	r16,r16,r2
 8009fac:	0013883a 	mov	r9,zero
 8009fb0:	000b883a 	mov	r5,zero
 8009fb4:	3806d53a 	srli	r3,r7,20
 8009fb8:	382ed7fa 	srli	r23,r7,31
 8009fbc:	04400434 	movhi	r17,16
 8009fc0:	8c7fffc4 	addi	r17,r17,-1
 8009fc4:	18c1ffcc 	andi	r3,r3,2047
 8009fc8:	3029883a 	mov	r20,r6
 8009fcc:	3c62703a 	and	r17,r7,r17
 8009fd0:	bf003fcc 	andi	fp,r23,255
 8009fd4:	18006e26 	beq	r3,zero,800a190 <__divdf3+0x254>
 8009fd8:	0081ffc4 	movi	r2,2047
 8009fdc:	18806626 	beq	r3,r2,800a178 <__divdf3+0x23c>
 8009fe0:	88800434 	orhi	r2,r17,16
 8009fe4:	100490fa 	slli	r2,r2,3
 8009fe8:	3022d77a 	srli	r17,r6,29
 8009fec:	302890fa 	slli	r20,r6,3
 8009ff0:	18ff0044 	addi	r3,r3,-1023
 8009ff4:	88a2b03a 	or	r17,r17,r2
 8009ff8:	000f883a 	mov	r7,zero
 8009ffc:	b5e6f03a 	xor	r19,r22,r23
 800a000:	3a4cb03a 	or	r6,r7,r9
 800a004:	008003c4 	movi	r2,15
 800a008:	9809883a 	mov	r4,r19
 800a00c:	90c7c83a 	sub	r3,r18,r3
 800a010:	9cc03fcc 	andi	r19,r19,255
 800a014:	11809636 	bltu	r2,r6,800a270 <__divdf3+0x334>
 800a018:	300c90ba 	slli	r6,r6,2
 800a01c:	00820074 	movhi	r2,2049
 800a020:	10a80c04 	addi	r2,r2,-24528
 800a024:	308d883a 	add	r6,r6,r2
 800a028:	30800017 	ldw	r2,0(r6)
 800a02c:	1000683a 	jmp	r2
 800a030:	0800a270 	cmpltui	zero,at,649
 800a034:	0800a0a8 	cmpgeui	zero,at,642
 800a038:	0800a260 	cmpeqi	zero,at,649
 800a03c:	0800a09c 	xori	zero,at,642
 800a040:	0800a260 	cmpeqi	zero,at,649
 800a044:	0800a234 	orhi	zero,at,648
 800a048:	0800a260 	cmpeqi	zero,at,649
 800a04c:	0800a09c 	xori	zero,at,642
 800a050:	0800a0a8 	cmpgeui	zero,at,642
 800a054:	0800a0a8 	cmpgeui	zero,at,642
 800a058:	0800a234 	orhi	zero,at,648
 800a05c:	0800a09c 	xori	zero,at,642
 800a060:	0800a08c 	andi	zero,at,642
 800a064:	0800a08c 	andi	zero,at,642
 800a068:	0800a08c 	andi	zero,at,642
 800a06c:	0800a5f8 	rdprs	zero,at,663
 800a070:	2404b03a 	or	r2,r4,r16
 800a074:	10006c1e 	bne	r2,zero,800a228 <__divdf3+0x2ec>
 800a078:	02400204 	movi	r9,8
 800a07c:	0021883a 	mov	r16,zero
 800a080:	002b883a 	mov	r21,zero
 800a084:	01400084 	movi	r5,2
 800a088:	003fca06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a08c:	8023883a 	mov	r17,r16
 800a090:	a829883a 	mov	r20,r21
 800a094:	4039883a 	mov	fp,r8
 800a098:	280f883a 	mov	r7,r5
 800a09c:	00800084 	movi	r2,2
 800a0a0:	3881601e 	bne	r7,r2,800a624 <__divdf3+0x6e8>
 800a0a4:	e027883a 	mov	r19,fp
 800a0a8:	9900004c 	andi	r4,r19,1
 800a0ac:	0081ffc4 	movi	r2,2047
 800a0b0:	0021883a 	mov	r16,zero
 800a0b4:	002b883a 	mov	r21,zero
 800a0b8:	1004953a 	slli	r2,r2,20
 800a0bc:	20c03fcc 	andi	r3,r4,255
 800a0c0:	01400434 	movhi	r5,16
 800a0c4:	297fffc4 	addi	r5,r5,-1
 800a0c8:	180697fa 	slli	r3,r3,31
 800a0cc:	8160703a 	and	r16,r16,r5
 800a0d0:	80a0b03a 	or	r16,r16,r2
 800a0d4:	80c6b03a 	or	r3,r16,r3
 800a0d8:	a805883a 	mov	r2,r21
 800a0dc:	dfc00f17 	ldw	ra,60(sp)
 800a0e0:	df000e17 	ldw	fp,56(sp)
 800a0e4:	ddc00d17 	ldw	r23,52(sp)
 800a0e8:	dd800c17 	ldw	r22,48(sp)
 800a0ec:	dd400b17 	ldw	r21,44(sp)
 800a0f0:	dd000a17 	ldw	r20,40(sp)
 800a0f4:	dcc00917 	ldw	r19,36(sp)
 800a0f8:	dc800817 	ldw	r18,32(sp)
 800a0fc:	dc400717 	ldw	r17,28(sp)
 800a100:	dc000617 	ldw	r16,24(sp)
 800a104:	dec01004 	addi	sp,sp,64
 800a108:	f800283a 	ret
 800a10c:	2404b03a 	or	r2,r4,r16
 800a110:	2023883a 	mov	r17,r4
 800a114:	10003f26 	beq	r2,zero,800a214 <__divdf3+0x2d8>
 800a118:	80015e26 	beq	r16,zero,800a694 <__divdf3+0x758>
 800a11c:	8009883a 	mov	r4,r16
 800a120:	d9800215 	stw	r6,8(sp)
 800a124:	d9c00515 	stw	r7,20(sp)
 800a128:	da000415 	stw	r8,16(sp)
 800a12c:	800bed00 	call	800bed0 <__clzsi2>
 800a130:	d9800217 	ldw	r6,8(sp)
 800a134:	d9c00517 	ldw	r7,20(sp)
 800a138:	da000417 	ldw	r8,16(sp)
 800a13c:	113ffd44 	addi	r4,r2,-11
 800a140:	00c00704 	movi	r3,28
 800a144:	19014f16 	blt	r3,r4,800a684 <__divdf3+0x748>
 800a148:	00c00744 	movi	r3,29
 800a14c:	157ffe04 	addi	r21,r2,-8
 800a150:	1907c83a 	sub	r3,r3,r4
 800a154:	8560983a 	sll	r16,r16,r21
 800a158:	88c6d83a 	srl	r3,r17,r3
 800a15c:	8d6a983a 	sll	r21,r17,r21
 800a160:	1c20b03a 	or	r16,r3,r16
 800a164:	1080fcc4 	addi	r2,r2,1011
 800a168:	00a5c83a 	sub	r18,zero,r2
 800a16c:	0013883a 	mov	r9,zero
 800a170:	000b883a 	mov	r5,zero
 800a174:	003f8f06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a178:	3444b03a 	or	r2,r6,r17
 800a17c:	1000231e 	bne	r2,zero,800a20c <__divdf3+0x2d0>
 800a180:	0023883a 	mov	r17,zero
 800a184:	0029883a 	mov	r20,zero
 800a188:	01c00084 	movi	r7,2
 800a18c:	003f9b06 	br	8009ffc <__alt_data_end+0xfc009ffc>
 800a190:	3444b03a 	or	r2,r6,r17
 800a194:	10001926 	beq	r2,zero,800a1fc <__divdf3+0x2c0>
 800a198:	88014b26 	beq	r17,zero,800a6c8 <__divdf3+0x78c>
 800a19c:	8809883a 	mov	r4,r17
 800a1a0:	d9400115 	stw	r5,4(sp)
 800a1a4:	d9800215 	stw	r6,8(sp)
 800a1a8:	da000415 	stw	r8,16(sp)
 800a1ac:	da400315 	stw	r9,12(sp)
 800a1b0:	800bed00 	call	800bed0 <__clzsi2>
 800a1b4:	d9400117 	ldw	r5,4(sp)
 800a1b8:	d9800217 	ldw	r6,8(sp)
 800a1bc:	da000417 	ldw	r8,16(sp)
 800a1c0:	da400317 	ldw	r9,12(sp)
 800a1c4:	113ffd44 	addi	r4,r2,-11
 800a1c8:	00c00704 	movi	r3,28
 800a1cc:	19013a16 	blt	r3,r4,800a6b8 <__divdf3+0x77c>
 800a1d0:	00c00744 	movi	r3,29
 800a1d4:	153ffe04 	addi	r20,r2,-8
 800a1d8:	1907c83a 	sub	r3,r3,r4
 800a1dc:	8d22983a 	sll	r17,r17,r20
 800a1e0:	30c6d83a 	srl	r3,r6,r3
 800a1e4:	3528983a 	sll	r20,r6,r20
 800a1e8:	1c62b03a 	or	r17,r3,r17
 800a1ec:	1080fcc4 	addi	r2,r2,1011
 800a1f0:	0087c83a 	sub	r3,zero,r2
 800a1f4:	000f883a 	mov	r7,zero
 800a1f8:	003f8006 	br	8009ffc <__alt_data_end+0xfc009ffc>
 800a1fc:	0023883a 	mov	r17,zero
 800a200:	0029883a 	mov	r20,zero
 800a204:	01c00044 	movi	r7,1
 800a208:	003f7c06 	br	8009ffc <__alt_data_end+0xfc009ffc>
 800a20c:	01c000c4 	movi	r7,3
 800a210:	003f7a06 	br	8009ffc <__alt_data_end+0xfc009ffc>
 800a214:	02400104 	movi	r9,4
 800a218:	0021883a 	mov	r16,zero
 800a21c:	002b883a 	mov	r21,zero
 800a220:	01400044 	movi	r5,1
 800a224:	003f6306 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a228:	02400304 	movi	r9,12
 800a22c:	014000c4 	movi	r5,3
 800a230:	003f6006 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a234:	04000434 	movhi	r16,16
 800a238:	0009883a 	mov	r4,zero
 800a23c:	843fffc4 	addi	r16,r16,-1
 800a240:	057fffc4 	movi	r21,-1
 800a244:	0081ffc4 	movi	r2,2047
 800a248:	003f9b06 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a24c:	00c00044 	movi	r3,1
 800a250:	1887c83a 	sub	r3,r3,r2
 800a254:	01000e04 	movi	r4,56
 800a258:	20c1530e 	bge	r4,r3,800a7a8 <__divdf3+0x86c>
 800a25c:	9900004c 	andi	r4,r19,1
 800a260:	0005883a 	mov	r2,zero
 800a264:	0021883a 	mov	r16,zero
 800a268:	002b883a 	mov	r21,zero
 800a26c:	003f9206 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a270:	8c012e36 	bltu	r17,r16,800a72c <__divdf3+0x7f0>
 800a274:	84412c26 	beq	r16,r17,800a728 <__divdf3+0x7ec>
 800a278:	a82f883a 	mov	r23,r21
 800a27c:	18ffffc4 	addi	r3,r3,-1
 800a280:	002b883a 	mov	r21,zero
 800a284:	a004d63a 	srli	r2,r20,24
 800a288:	8822923a 	slli	r17,r17,8
 800a28c:	a028923a 	slli	r20,r20,8
 800a290:	8009883a 	mov	r4,r16
 800a294:	88acb03a 	or	r22,r17,r2
 800a298:	dd000015 	stw	r20,0(sp)
 800a29c:	b028d43a 	srli	r20,r22,16
 800a2a0:	d8c00215 	stw	r3,8(sp)
 800a2a4:	b4bfffcc 	andi	r18,r22,65535
 800a2a8:	a00b883a 	mov	r5,r20
 800a2ac:	8000bc40 	call	8000bc4 <__udivsi3>
 800a2b0:	100b883a 	mov	r5,r2
 800a2b4:	9009883a 	mov	r4,r18
 800a2b8:	1023883a 	mov	r17,r2
 800a2bc:	8000c800 	call	8000c80 <__mulsi3>
 800a2c0:	8009883a 	mov	r4,r16
 800a2c4:	a00b883a 	mov	r5,r20
 800a2c8:	1039883a 	mov	fp,r2
 800a2cc:	8000c280 	call	8000c28 <__umodsi3>
 800a2d0:	1004943a 	slli	r2,r2,16
 800a2d4:	b808d43a 	srli	r4,r23,16
 800a2d8:	d8c00217 	ldw	r3,8(sp)
 800a2dc:	2084b03a 	or	r2,r4,r2
 800a2e0:	1700062e 	bgeu	r2,fp,800a2fc <__divdf3+0x3c0>
 800a2e4:	1585883a 	add	r2,r2,r22
 800a2e8:	893fffc4 	addi	r4,r17,-1
 800a2ec:	15811d36 	bltu	r2,r22,800a764 <__divdf3+0x828>
 800a2f0:	17011c2e 	bgeu	r2,fp,800a764 <__divdf3+0x828>
 800a2f4:	8c7fff84 	addi	r17,r17,-2
 800a2f8:	1585883a 	add	r2,r2,r22
 800a2fc:	1739c83a 	sub	fp,r2,fp
 800a300:	a00b883a 	mov	r5,r20
 800a304:	e009883a 	mov	r4,fp
 800a308:	d8c00215 	stw	r3,8(sp)
 800a30c:	8000bc40 	call	8000bc4 <__udivsi3>
 800a310:	100b883a 	mov	r5,r2
 800a314:	9009883a 	mov	r4,r18
 800a318:	1021883a 	mov	r16,r2
 800a31c:	8000c800 	call	8000c80 <__mulsi3>
 800a320:	a00b883a 	mov	r5,r20
 800a324:	e009883a 	mov	r4,fp
 800a328:	d8800415 	stw	r2,16(sp)
 800a32c:	8000c280 	call	8000c28 <__umodsi3>
 800a330:	1004943a 	slli	r2,r2,16
 800a334:	da000417 	ldw	r8,16(sp)
 800a338:	bdffffcc 	andi	r23,r23,65535
 800a33c:	b884b03a 	or	r2,r23,r2
 800a340:	d8c00217 	ldw	r3,8(sp)
 800a344:	1200062e 	bgeu	r2,r8,800a360 <__divdf3+0x424>
 800a348:	1585883a 	add	r2,r2,r22
 800a34c:	813fffc4 	addi	r4,r16,-1
 800a350:	15810236 	bltu	r2,r22,800a75c <__divdf3+0x820>
 800a354:	1201012e 	bgeu	r2,r8,800a75c <__divdf3+0x820>
 800a358:	843fff84 	addi	r16,r16,-2
 800a35c:	1585883a 	add	r2,r2,r22
 800a360:	8822943a 	slli	r17,r17,16
 800a364:	d9800017 	ldw	r6,0(sp)
 800a368:	1211c83a 	sub	r8,r2,r8
 800a36c:	8c22b03a 	or	r17,r17,r16
 800a370:	373fffcc 	andi	fp,r6,65535
 800a374:	8abfffcc 	andi	r10,r17,65535
 800a378:	8820d43a 	srli	r16,r17,16
 800a37c:	5009883a 	mov	r4,r10
 800a380:	e00b883a 	mov	r5,fp
 800a384:	302ed43a 	srli	r23,r6,16
 800a388:	d8c00215 	stw	r3,8(sp)
 800a38c:	da000415 	stw	r8,16(sp)
 800a390:	da800115 	stw	r10,4(sp)
 800a394:	8000c800 	call	8000c80 <__mulsi3>
 800a398:	800b883a 	mov	r5,r16
 800a39c:	e009883a 	mov	r4,fp
 800a3a0:	d8800515 	stw	r2,20(sp)
 800a3a4:	8000c800 	call	8000c80 <__mulsi3>
 800a3a8:	8009883a 	mov	r4,r16
 800a3ac:	b80b883a 	mov	r5,r23
 800a3b0:	d8800315 	stw	r2,12(sp)
 800a3b4:	8000c800 	call	8000c80 <__mulsi3>
 800a3b8:	da800117 	ldw	r10,4(sp)
 800a3bc:	b80b883a 	mov	r5,r23
 800a3c0:	1021883a 	mov	r16,r2
 800a3c4:	5009883a 	mov	r4,r10
 800a3c8:	8000c800 	call	8000c80 <__mulsi3>
 800a3cc:	d9c00517 	ldw	r7,20(sp)
 800a3d0:	da400317 	ldw	r9,12(sp)
 800a3d4:	d8c00217 	ldw	r3,8(sp)
 800a3d8:	3808d43a 	srli	r4,r7,16
 800a3dc:	1245883a 	add	r2,r2,r9
 800a3e0:	da000417 	ldw	r8,16(sp)
 800a3e4:	2085883a 	add	r2,r4,r2
 800a3e8:	1240022e 	bgeu	r2,r9,800a3f4 <__divdf3+0x4b8>
 800a3ec:	01000074 	movhi	r4,1
 800a3f0:	8121883a 	add	r16,r16,r4
 800a3f4:	1008d43a 	srli	r4,r2,16
 800a3f8:	1004943a 	slli	r2,r2,16
 800a3fc:	39ffffcc 	andi	r7,r7,65535
 800a400:	2409883a 	add	r4,r4,r16
 800a404:	11c5883a 	add	r2,r2,r7
 800a408:	4100bb36 	bltu	r8,r4,800a6f8 <__divdf3+0x7bc>
 800a40c:	4100d726 	beq	r8,r4,800a76c <__divdf3+0x830>
 800a410:	4109c83a 	sub	r4,r8,r4
 800a414:	a8a1c83a 	sub	r16,r21,r2
 800a418:	ac2b803a 	cmpltu	r21,r21,r16
 800a41c:	256bc83a 	sub	r21,r4,r21
 800a420:	b540d926 	beq	r22,r21,800a788 <__divdf3+0x84c>
 800a424:	a00b883a 	mov	r5,r20
 800a428:	a809883a 	mov	r4,r21
 800a42c:	d8c00215 	stw	r3,8(sp)
 800a430:	8000bc40 	call	8000bc4 <__udivsi3>
 800a434:	100b883a 	mov	r5,r2
 800a438:	9009883a 	mov	r4,r18
 800a43c:	d8800515 	stw	r2,20(sp)
 800a440:	8000c800 	call	8000c80 <__mulsi3>
 800a444:	a809883a 	mov	r4,r21
 800a448:	a00b883a 	mov	r5,r20
 800a44c:	d8800415 	stw	r2,16(sp)
 800a450:	8000c280 	call	8000c28 <__umodsi3>
 800a454:	1004943a 	slli	r2,r2,16
 800a458:	8008d43a 	srli	r4,r16,16
 800a45c:	da000417 	ldw	r8,16(sp)
 800a460:	d8c00217 	ldw	r3,8(sp)
 800a464:	2084b03a 	or	r2,r4,r2
 800a468:	d9c00517 	ldw	r7,20(sp)
 800a46c:	1200062e 	bgeu	r2,r8,800a488 <__divdf3+0x54c>
 800a470:	1585883a 	add	r2,r2,r22
 800a474:	393fffc4 	addi	r4,r7,-1
 800a478:	1580c536 	bltu	r2,r22,800a790 <__divdf3+0x854>
 800a47c:	1200c42e 	bgeu	r2,r8,800a790 <__divdf3+0x854>
 800a480:	39ffff84 	addi	r7,r7,-2
 800a484:	1585883a 	add	r2,r2,r22
 800a488:	122bc83a 	sub	r21,r2,r8
 800a48c:	a00b883a 	mov	r5,r20
 800a490:	a809883a 	mov	r4,r21
 800a494:	d8c00215 	stw	r3,8(sp)
 800a498:	d9c00515 	stw	r7,20(sp)
 800a49c:	8000bc40 	call	8000bc4 <__udivsi3>
 800a4a0:	9009883a 	mov	r4,r18
 800a4a4:	100b883a 	mov	r5,r2
 800a4a8:	d8800415 	stw	r2,16(sp)
 800a4ac:	8000c800 	call	8000c80 <__mulsi3>
 800a4b0:	a809883a 	mov	r4,r21
 800a4b4:	a00b883a 	mov	r5,r20
 800a4b8:	1025883a 	mov	r18,r2
 800a4bc:	8000c280 	call	8000c28 <__umodsi3>
 800a4c0:	1004943a 	slli	r2,r2,16
 800a4c4:	813fffcc 	andi	r4,r16,65535
 800a4c8:	d8c00217 	ldw	r3,8(sp)
 800a4cc:	20a0b03a 	or	r16,r4,r2
 800a4d0:	d9c00517 	ldw	r7,20(sp)
 800a4d4:	da000417 	ldw	r8,16(sp)
 800a4d8:	8480062e 	bgeu	r16,r18,800a4f4 <__divdf3+0x5b8>
 800a4dc:	85a1883a 	add	r16,r16,r22
 800a4e0:	40bfffc4 	addi	r2,r8,-1
 800a4e4:	8580ac36 	bltu	r16,r22,800a798 <__divdf3+0x85c>
 800a4e8:	8480ab2e 	bgeu	r16,r18,800a798 <__divdf3+0x85c>
 800a4ec:	423fff84 	addi	r8,r8,-2
 800a4f0:	85a1883a 	add	r16,r16,r22
 800a4f4:	3804943a 	slli	r2,r7,16
 800a4f8:	84a1c83a 	sub	r16,r16,r18
 800a4fc:	e009883a 	mov	r4,fp
 800a500:	1228b03a 	or	r20,r2,r8
 800a504:	a1ffffcc 	andi	r7,r20,65535
 800a508:	a024d43a 	srli	r18,r20,16
 800a50c:	380b883a 	mov	r5,r7
 800a510:	d8c00215 	stw	r3,8(sp)
 800a514:	d9c00515 	stw	r7,20(sp)
 800a518:	8000c800 	call	8000c80 <__mulsi3>
 800a51c:	900b883a 	mov	r5,r18
 800a520:	e009883a 	mov	r4,fp
 800a524:	102b883a 	mov	r21,r2
 800a528:	8000c800 	call	8000c80 <__mulsi3>
 800a52c:	900b883a 	mov	r5,r18
 800a530:	b809883a 	mov	r4,r23
 800a534:	1039883a 	mov	fp,r2
 800a538:	8000c800 	call	8000c80 <__mulsi3>
 800a53c:	d9c00517 	ldw	r7,20(sp)
 800a540:	b80b883a 	mov	r5,r23
 800a544:	1025883a 	mov	r18,r2
 800a548:	3809883a 	mov	r4,r7
 800a54c:	8000c800 	call	8000c80 <__mulsi3>
 800a550:	a808d43a 	srli	r4,r21,16
 800a554:	1705883a 	add	r2,r2,fp
 800a558:	d8c00217 	ldw	r3,8(sp)
 800a55c:	2085883a 	add	r2,r4,r2
 800a560:	1700022e 	bgeu	r2,fp,800a56c <__divdf3+0x630>
 800a564:	01000074 	movhi	r4,1
 800a568:	9125883a 	add	r18,r18,r4
 800a56c:	1008d43a 	srli	r4,r2,16
 800a570:	1004943a 	slli	r2,r2,16
 800a574:	ad7fffcc 	andi	r21,r21,65535
 800a578:	2489883a 	add	r4,r4,r18
 800a57c:	1545883a 	add	r2,r2,r21
 800a580:	81003836 	bltu	r16,r4,800a664 <__divdf3+0x728>
 800a584:	81003626 	beq	r16,r4,800a660 <__divdf3+0x724>
 800a588:	a5000054 	ori	r20,r20,1
 800a58c:	1880ffc4 	addi	r2,r3,1023
 800a590:	00bf2e0e 	bge	zero,r2,800a24c <__alt_data_end+0xfc00a24c>
 800a594:	a10001cc 	andi	r4,r20,7
 800a598:	20000726 	beq	r4,zero,800a5b8 <__divdf3+0x67c>
 800a59c:	a10003cc 	andi	r4,r20,15
 800a5a0:	01400104 	movi	r5,4
 800a5a4:	21400426 	beq	r4,r5,800a5b8 <__divdf3+0x67c>
 800a5a8:	a149883a 	add	r4,r20,r5
 800a5ac:	2529803a 	cmpltu	r20,r4,r20
 800a5b0:	8d23883a 	add	r17,r17,r20
 800a5b4:	2029883a 	mov	r20,r4
 800a5b8:	8900402c 	andhi	r4,r17,256
 800a5bc:	20000426 	beq	r4,zero,800a5d0 <__divdf3+0x694>
 800a5c0:	18810004 	addi	r2,r3,1024
 800a5c4:	00ffc034 	movhi	r3,65280
 800a5c8:	18ffffc4 	addi	r3,r3,-1
 800a5cc:	88e2703a 	and	r17,r17,r3
 800a5d0:	00c1ff84 	movi	r3,2046
 800a5d4:	18beb416 	blt	r3,r2,800a0a8 <__alt_data_end+0xfc00a0a8>
 800a5d8:	a028d0fa 	srli	r20,r20,3
 800a5dc:	882a977a 	slli	r21,r17,29
 800a5e0:	8820927a 	slli	r16,r17,9
 800a5e4:	1081ffcc 	andi	r2,r2,2047
 800a5e8:	ad2ab03a 	or	r21,r21,r20
 800a5ec:	8020d33a 	srli	r16,r16,12
 800a5f0:	9900004c 	andi	r4,r19,1
 800a5f4:	003eb006 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a5f8:	8080022c 	andhi	r2,r16,8
 800a5fc:	10001226 	beq	r2,zero,800a648 <__divdf3+0x70c>
 800a600:	8880022c 	andhi	r2,r17,8
 800a604:	1000101e 	bne	r2,zero,800a648 <__divdf3+0x70c>
 800a608:	00800434 	movhi	r2,16
 800a60c:	8c000234 	orhi	r16,r17,8
 800a610:	10bfffc4 	addi	r2,r2,-1
 800a614:	b809883a 	mov	r4,r23
 800a618:	80a0703a 	and	r16,r16,r2
 800a61c:	a02b883a 	mov	r21,r20
 800a620:	003f0806 	br	800a244 <__alt_data_end+0xfc00a244>
 800a624:	008000c4 	movi	r2,3
 800a628:	3880b126 	beq	r7,r2,800a8f0 <__divdf3+0x9b4>
 800a62c:	00800044 	movi	r2,1
 800a630:	38805b1e 	bne	r7,r2,800a7a0 <__divdf3+0x864>
 800a634:	e009883a 	mov	r4,fp
 800a638:	0005883a 	mov	r2,zero
 800a63c:	0021883a 	mov	r16,zero
 800a640:	002b883a 	mov	r21,zero
 800a644:	003e9c06 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a648:	00800434 	movhi	r2,16
 800a64c:	84000234 	orhi	r16,r16,8
 800a650:	10bfffc4 	addi	r2,r2,-1
 800a654:	b009883a 	mov	r4,r22
 800a658:	80a0703a 	and	r16,r16,r2
 800a65c:	003ef906 	br	800a244 <__alt_data_end+0xfc00a244>
 800a660:	103fca26 	beq	r2,zero,800a58c <__alt_data_end+0xfc00a58c>
 800a664:	b421883a 	add	r16,r22,r16
 800a668:	a17fffc4 	addi	r5,r20,-1
 800a66c:	8580422e 	bgeu	r16,r22,800a778 <__divdf3+0x83c>
 800a670:	2829883a 	mov	r20,r5
 800a674:	813fc41e 	bne	r16,r4,800a588 <__alt_data_end+0xfc00a588>
 800a678:	d9800017 	ldw	r6,0(sp)
 800a67c:	30bfc21e 	bne	r6,r2,800a588 <__alt_data_end+0xfc00a588>
 800a680:	003fc206 	br	800a58c <__alt_data_end+0xfc00a58c>
 800a684:	143ff604 	addi	r16,r2,-40
 800a688:	8c20983a 	sll	r16,r17,r16
 800a68c:	002b883a 	mov	r21,zero
 800a690:	003eb406 	br	800a164 <__alt_data_end+0xfc00a164>
 800a694:	d9800215 	stw	r6,8(sp)
 800a698:	d9c00515 	stw	r7,20(sp)
 800a69c:	da000415 	stw	r8,16(sp)
 800a6a0:	800bed00 	call	800bed0 <__clzsi2>
 800a6a4:	10800804 	addi	r2,r2,32
 800a6a8:	da000417 	ldw	r8,16(sp)
 800a6ac:	d9c00517 	ldw	r7,20(sp)
 800a6b0:	d9800217 	ldw	r6,8(sp)
 800a6b4:	003ea106 	br	800a13c <__alt_data_end+0xfc00a13c>
 800a6b8:	147ff604 	addi	r17,r2,-40
 800a6bc:	3462983a 	sll	r17,r6,r17
 800a6c0:	0029883a 	mov	r20,zero
 800a6c4:	003ec906 	br	800a1ec <__alt_data_end+0xfc00a1ec>
 800a6c8:	3009883a 	mov	r4,r6
 800a6cc:	d9400115 	stw	r5,4(sp)
 800a6d0:	d9800215 	stw	r6,8(sp)
 800a6d4:	da000415 	stw	r8,16(sp)
 800a6d8:	da400315 	stw	r9,12(sp)
 800a6dc:	800bed00 	call	800bed0 <__clzsi2>
 800a6e0:	10800804 	addi	r2,r2,32
 800a6e4:	da400317 	ldw	r9,12(sp)
 800a6e8:	da000417 	ldw	r8,16(sp)
 800a6ec:	d9800217 	ldw	r6,8(sp)
 800a6f0:	d9400117 	ldw	r5,4(sp)
 800a6f4:	003eb306 	br	800a1c4 <__alt_data_end+0xfc00a1c4>
 800a6f8:	d9800017 	ldw	r6,0(sp)
 800a6fc:	a9ab883a 	add	r21,r21,r6
 800a700:	a98b803a 	cmpltu	r5,r21,r6
 800a704:	2d8b883a 	add	r5,r5,r22
 800a708:	2a11883a 	add	r8,r5,r8
 800a70c:	897fffc4 	addi	r5,r17,-1
 800a710:	b2000c2e 	bgeu	r22,r8,800a744 <__divdf3+0x808>
 800a714:	41003f36 	bltu	r8,r4,800a814 <__divdf3+0x8d8>
 800a718:	22006c26 	beq	r4,r8,800a8cc <__divdf3+0x990>
 800a71c:	4109c83a 	sub	r4,r8,r4
 800a720:	2823883a 	mov	r17,r5
 800a724:	003f3b06 	br	800a414 <__alt_data_end+0xfc00a414>
 800a728:	ad3ed336 	bltu	r21,r20,800a278 <__alt_data_end+0xfc00a278>
 800a72c:	a804d07a 	srli	r2,r21,1
 800a730:	802e97fa 	slli	r23,r16,31
 800a734:	a82a97fa 	slli	r21,r21,31
 800a738:	8020d07a 	srli	r16,r16,1
 800a73c:	b8aeb03a 	or	r23,r23,r2
 800a740:	003ed006 	br	800a284 <__alt_data_end+0xfc00a284>
 800a744:	b23ff51e 	bne	r22,r8,800a71c <__alt_data_end+0xfc00a71c>
 800a748:	d9800017 	ldw	r6,0(sp)
 800a74c:	a9bff12e 	bgeu	r21,r6,800a714 <__alt_data_end+0xfc00a714>
 800a750:	b109c83a 	sub	r4,r22,r4
 800a754:	2823883a 	mov	r17,r5
 800a758:	003f2e06 	br	800a414 <__alt_data_end+0xfc00a414>
 800a75c:	2021883a 	mov	r16,r4
 800a760:	003eff06 	br	800a360 <__alt_data_end+0xfc00a360>
 800a764:	2023883a 	mov	r17,r4
 800a768:	003ee406 	br	800a2fc <__alt_data_end+0xfc00a2fc>
 800a76c:	a8bfe236 	bltu	r21,r2,800a6f8 <__alt_data_end+0xfc00a6f8>
 800a770:	0009883a 	mov	r4,zero
 800a774:	003f2706 	br	800a414 <__alt_data_end+0xfc00a414>
 800a778:	81002d36 	bltu	r16,r4,800a830 <__divdf3+0x8f4>
 800a77c:	24005626 	beq	r4,r16,800a8d8 <__divdf3+0x99c>
 800a780:	2829883a 	mov	r20,r5
 800a784:	003f8006 	br	800a588 <__alt_data_end+0xfc00a588>
 800a788:	053fffc4 	movi	r20,-1
 800a78c:	003f7f06 	br	800a58c <__alt_data_end+0xfc00a58c>
 800a790:	200f883a 	mov	r7,r4
 800a794:	003f3c06 	br	800a488 <__alt_data_end+0xfc00a488>
 800a798:	1011883a 	mov	r8,r2
 800a79c:	003f5506 	br	800a4f4 <__alt_data_end+0xfc00a4f4>
 800a7a0:	e027883a 	mov	r19,fp
 800a7a4:	003f7906 	br	800a58c <__alt_data_end+0xfc00a58c>
 800a7a8:	010007c4 	movi	r4,31
 800a7ac:	20c02816 	blt	r4,r3,800a850 <__divdf3+0x914>
 800a7b0:	00800804 	movi	r2,32
 800a7b4:	10c5c83a 	sub	r2,r2,r3
 800a7b8:	888a983a 	sll	r5,r17,r2
 800a7bc:	a0c8d83a 	srl	r4,r20,r3
 800a7c0:	a084983a 	sll	r2,r20,r2
 800a7c4:	88e2d83a 	srl	r17,r17,r3
 800a7c8:	2906b03a 	or	r3,r5,r4
 800a7cc:	1004c03a 	cmpne	r2,r2,zero
 800a7d0:	1886b03a 	or	r3,r3,r2
 800a7d4:	188001cc 	andi	r2,r3,7
 800a7d8:	10000726 	beq	r2,zero,800a7f8 <__divdf3+0x8bc>
 800a7dc:	188003cc 	andi	r2,r3,15
 800a7e0:	01000104 	movi	r4,4
 800a7e4:	11000426 	beq	r2,r4,800a7f8 <__divdf3+0x8bc>
 800a7e8:	1805883a 	mov	r2,r3
 800a7ec:	10c00104 	addi	r3,r2,4
 800a7f0:	1885803a 	cmpltu	r2,r3,r2
 800a7f4:	88a3883a 	add	r17,r17,r2
 800a7f8:	8880202c 	andhi	r2,r17,128
 800a7fc:	10002926 	beq	r2,zero,800a8a4 <__divdf3+0x968>
 800a800:	9900004c 	andi	r4,r19,1
 800a804:	00800044 	movi	r2,1
 800a808:	0021883a 	mov	r16,zero
 800a80c:	002b883a 	mov	r21,zero
 800a810:	003e2906 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a814:	d9800017 	ldw	r6,0(sp)
 800a818:	8c7fff84 	addi	r17,r17,-2
 800a81c:	a9ab883a 	add	r21,r21,r6
 800a820:	a98b803a 	cmpltu	r5,r21,r6
 800a824:	2d8b883a 	add	r5,r5,r22
 800a828:	2a11883a 	add	r8,r5,r8
 800a82c:	003ef806 	br	800a410 <__alt_data_end+0xfc00a410>
 800a830:	d9800017 	ldw	r6,0(sp)
 800a834:	318f883a 	add	r7,r6,r6
 800a838:	398b803a 	cmpltu	r5,r7,r6
 800a83c:	2d8d883a 	add	r6,r5,r22
 800a840:	81a1883a 	add	r16,r16,r6
 800a844:	a17fff84 	addi	r5,r20,-2
 800a848:	d9c00015 	stw	r7,0(sp)
 800a84c:	003f8806 	br	800a670 <__alt_data_end+0xfc00a670>
 800a850:	013ff844 	movi	r4,-31
 800a854:	2085c83a 	sub	r2,r4,r2
 800a858:	8888d83a 	srl	r4,r17,r2
 800a85c:	00800804 	movi	r2,32
 800a860:	18802126 	beq	r3,r2,800a8e8 <__divdf3+0x9ac>
 800a864:	04001004 	movi	r16,64
 800a868:	80c7c83a 	sub	r3,r16,r3
 800a86c:	88e0983a 	sll	r16,r17,r3
 800a870:	8504b03a 	or	r2,r16,r20
 800a874:	1004c03a 	cmpne	r2,r2,zero
 800a878:	2084b03a 	or	r2,r4,r2
 800a87c:	144001cc 	andi	r17,r2,7
 800a880:	88000d1e 	bne	r17,zero,800a8b8 <__divdf3+0x97c>
 800a884:	0021883a 	mov	r16,zero
 800a888:	102ad0fa 	srli	r21,r2,3
 800a88c:	9900004c 	andi	r4,r19,1
 800a890:	0005883a 	mov	r2,zero
 800a894:	ac6ab03a 	or	r21,r21,r17
 800a898:	003e0706 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a89c:	1007883a 	mov	r3,r2
 800a8a0:	0023883a 	mov	r17,zero
 800a8a4:	8820927a 	slli	r16,r17,9
 800a8a8:	1805883a 	mov	r2,r3
 800a8ac:	8822977a 	slli	r17,r17,29
 800a8b0:	8020d33a 	srli	r16,r16,12
 800a8b4:	003ff406 	br	800a888 <__alt_data_end+0xfc00a888>
 800a8b8:	10c003cc 	andi	r3,r2,15
 800a8bc:	01000104 	movi	r4,4
 800a8c0:	193ff626 	beq	r3,r4,800a89c <__alt_data_end+0xfc00a89c>
 800a8c4:	0023883a 	mov	r17,zero
 800a8c8:	003fc806 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800a8cc:	a8bfd136 	bltu	r21,r2,800a814 <__alt_data_end+0xfc00a814>
 800a8d0:	2823883a 	mov	r17,r5
 800a8d4:	003fa606 	br	800a770 <__alt_data_end+0xfc00a770>
 800a8d8:	d9800017 	ldw	r6,0(sp)
 800a8dc:	30bfd436 	bltu	r6,r2,800a830 <__alt_data_end+0xfc00a830>
 800a8e0:	2829883a 	mov	r20,r5
 800a8e4:	003f6406 	br	800a678 <__alt_data_end+0xfc00a678>
 800a8e8:	0021883a 	mov	r16,zero
 800a8ec:	003fe006 	br	800a870 <__alt_data_end+0xfc00a870>
 800a8f0:	00800434 	movhi	r2,16
 800a8f4:	8c000234 	orhi	r16,r17,8
 800a8f8:	10bfffc4 	addi	r2,r2,-1
 800a8fc:	e009883a 	mov	r4,fp
 800a900:	80a0703a 	and	r16,r16,r2
 800a904:	a02b883a 	mov	r21,r20
 800a908:	003e4e06 	br	800a244 <__alt_data_end+0xfc00a244>

0800a90c <__eqdf2>:
 800a90c:	2804d53a 	srli	r2,r5,20
 800a910:	3806d53a 	srli	r3,r7,20
 800a914:	02000434 	movhi	r8,16
 800a918:	423fffc4 	addi	r8,r8,-1
 800a91c:	1081ffcc 	andi	r2,r2,2047
 800a920:	0281ffc4 	movi	r10,2047
 800a924:	2a12703a 	and	r9,r5,r8
 800a928:	18c1ffcc 	andi	r3,r3,2047
 800a92c:	3a10703a 	and	r8,r7,r8
 800a930:	280ad7fa 	srli	r5,r5,31
 800a934:	380ed7fa 	srli	r7,r7,31
 800a938:	12801026 	beq	r2,r10,800a97c <__eqdf2+0x70>
 800a93c:	0281ffc4 	movi	r10,2047
 800a940:	1a800a26 	beq	r3,r10,800a96c <__eqdf2+0x60>
 800a944:	10c00226 	beq	r2,r3,800a950 <__eqdf2+0x44>
 800a948:	00800044 	movi	r2,1
 800a94c:	f800283a 	ret
 800a950:	4a3ffd1e 	bne	r9,r8,800a948 <__alt_data_end+0xfc00a948>
 800a954:	21bffc1e 	bne	r4,r6,800a948 <__alt_data_end+0xfc00a948>
 800a958:	29c00c26 	beq	r5,r7,800a98c <__eqdf2+0x80>
 800a95c:	103ffa1e 	bne	r2,zero,800a948 <__alt_data_end+0xfc00a948>
 800a960:	2244b03a 	or	r2,r4,r9
 800a964:	1004c03a 	cmpne	r2,r2,zero
 800a968:	f800283a 	ret
 800a96c:	3214b03a 	or	r10,r6,r8
 800a970:	503ff426 	beq	r10,zero,800a944 <__alt_data_end+0xfc00a944>
 800a974:	00800044 	movi	r2,1
 800a978:	f800283a 	ret
 800a97c:	2254b03a 	or	r10,r4,r9
 800a980:	503fee26 	beq	r10,zero,800a93c <__alt_data_end+0xfc00a93c>
 800a984:	00800044 	movi	r2,1
 800a988:	f800283a 	ret
 800a98c:	0005883a 	mov	r2,zero
 800a990:	f800283a 	ret

0800a994 <__gedf2>:
 800a994:	2804d53a 	srli	r2,r5,20
 800a998:	3806d53a 	srli	r3,r7,20
 800a99c:	02000434 	movhi	r8,16
 800a9a0:	423fffc4 	addi	r8,r8,-1
 800a9a4:	1081ffcc 	andi	r2,r2,2047
 800a9a8:	0241ffc4 	movi	r9,2047
 800a9ac:	2a14703a 	and	r10,r5,r8
 800a9b0:	18c1ffcc 	andi	r3,r3,2047
 800a9b4:	3a10703a 	and	r8,r7,r8
 800a9b8:	280ad7fa 	srli	r5,r5,31
 800a9bc:	380ed7fa 	srli	r7,r7,31
 800a9c0:	12401d26 	beq	r2,r9,800aa38 <__gedf2+0xa4>
 800a9c4:	0241ffc4 	movi	r9,2047
 800a9c8:	1a401226 	beq	r3,r9,800aa14 <__gedf2+0x80>
 800a9cc:	1000081e 	bne	r2,zero,800a9f0 <__gedf2+0x5c>
 800a9d0:	2296b03a 	or	r11,r4,r10
 800a9d4:	5813003a 	cmpeq	r9,r11,zero
 800a9d8:	1800091e 	bne	r3,zero,800aa00 <__gedf2+0x6c>
 800a9dc:	3218b03a 	or	r12,r6,r8
 800a9e0:	6000071e 	bne	r12,zero,800aa00 <__gedf2+0x6c>
 800a9e4:	0005883a 	mov	r2,zero
 800a9e8:	5800101e 	bne	r11,zero,800aa2c <__gedf2+0x98>
 800a9ec:	f800283a 	ret
 800a9f0:	18000c1e 	bne	r3,zero,800aa24 <__gedf2+0x90>
 800a9f4:	3212b03a 	or	r9,r6,r8
 800a9f8:	48000c26 	beq	r9,zero,800aa2c <__gedf2+0x98>
 800a9fc:	0013883a 	mov	r9,zero
 800aa00:	39c03fcc 	andi	r7,r7,255
 800aa04:	48000826 	beq	r9,zero,800aa28 <__gedf2+0x94>
 800aa08:	38000926 	beq	r7,zero,800aa30 <__gedf2+0x9c>
 800aa0c:	00800044 	movi	r2,1
 800aa10:	f800283a 	ret
 800aa14:	3212b03a 	or	r9,r6,r8
 800aa18:	483fec26 	beq	r9,zero,800a9cc <__alt_data_end+0xfc00a9cc>
 800aa1c:	00bfff84 	movi	r2,-2
 800aa20:	f800283a 	ret
 800aa24:	39c03fcc 	andi	r7,r7,255
 800aa28:	29c00626 	beq	r5,r7,800aa44 <__gedf2+0xb0>
 800aa2c:	283ff726 	beq	r5,zero,800aa0c <__alt_data_end+0xfc00aa0c>
 800aa30:	00bfffc4 	movi	r2,-1
 800aa34:	f800283a 	ret
 800aa38:	2292b03a 	or	r9,r4,r10
 800aa3c:	483fe126 	beq	r9,zero,800a9c4 <__alt_data_end+0xfc00a9c4>
 800aa40:	003ff606 	br	800aa1c <__alt_data_end+0xfc00aa1c>
 800aa44:	18bff916 	blt	r3,r2,800aa2c <__alt_data_end+0xfc00aa2c>
 800aa48:	10c00316 	blt	r2,r3,800aa58 <__gedf2+0xc4>
 800aa4c:	42bff736 	bltu	r8,r10,800aa2c <__alt_data_end+0xfc00aa2c>
 800aa50:	52000326 	beq	r10,r8,800aa60 <__gedf2+0xcc>
 800aa54:	5200042e 	bgeu	r10,r8,800aa68 <__gedf2+0xd4>
 800aa58:	283fec1e 	bne	r5,zero,800aa0c <__alt_data_end+0xfc00aa0c>
 800aa5c:	003ff406 	br	800aa30 <__alt_data_end+0xfc00aa30>
 800aa60:	313ff236 	bltu	r6,r4,800aa2c <__alt_data_end+0xfc00aa2c>
 800aa64:	21bffc36 	bltu	r4,r6,800aa58 <__alt_data_end+0xfc00aa58>
 800aa68:	0005883a 	mov	r2,zero
 800aa6c:	f800283a 	ret

0800aa70 <__ledf2>:
 800aa70:	2804d53a 	srli	r2,r5,20
 800aa74:	3810d53a 	srli	r8,r7,20
 800aa78:	00c00434 	movhi	r3,16
 800aa7c:	18ffffc4 	addi	r3,r3,-1
 800aa80:	1081ffcc 	andi	r2,r2,2047
 800aa84:	0241ffc4 	movi	r9,2047
 800aa88:	28d4703a 	and	r10,r5,r3
 800aa8c:	4201ffcc 	andi	r8,r8,2047
 800aa90:	38c6703a 	and	r3,r7,r3
 800aa94:	280ad7fa 	srli	r5,r5,31
 800aa98:	380ed7fa 	srli	r7,r7,31
 800aa9c:	12401f26 	beq	r2,r9,800ab1c <__ledf2+0xac>
 800aaa0:	0241ffc4 	movi	r9,2047
 800aaa4:	42401426 	beq	r8,r9,800aaf8 <__ledf2+0x88>
 800aaa8:	1000091e 	bne	r2,zero,800aad0 <__ledf2+0x60>
 800aaac:	2296b03a 	or	r11,r4,r10
 800aab0:	5813003a 	cmpeq	r9,r11,zero
 800aab4:	29403fcc 	andi	r5,r5,255
 800aab8:	40000a1e 	bne	r8,zero,800aae4 <__ledf2+0x74>
 800aabc:	30d8b03a 	or	r12,r6,r3
 800aac0:	6000081e 	bne	r12,zero,800aae4 <__ledf2+0x74>
 800aac4:	0005883a 	mov	r2,zero
 800aac8:	5800111e 	bne	r11,zero,800ab10 <__ledf2+0xa0>
 800aacc:	f800283a 	ret
 800aad0:	29403fcc 	andi	r5,r5,255
 800aad4:	40000c1e 	bne	r8,zero,800ab08 <__ledf2+0x98>
 800aad8:	30d2b03a 	or	r9,r6,r3
 800aadc:	48000c26 	beq	r9,zero,800ab10 <__ledf2+0xa0>
 800aae0:	0013883a 	mov	r9,zero
 800aae4:	39c03fcc 	andi	r7,r7,255
 800aae8:	48000826 	beq	r9,zero,800ab0c <__ledf2+0x9c>
 800aaec:	38001126 	beq	r7,zero,800ab34 <__ledf2+0xc4>
 800aaf0:	00800044 	movi	r2,1
 800aaf4:	f800283a 	ret
 800aaf8:	30d2b03a 	or	r9,r6,r3
 800aafc:	483fea26 	beq	r9,zero,800aaa8 <__alt_data_end+0xfc00aaa8>
 800ab00:	00800084 	movi	r2,2
 800ab04:	f800283a 	ret
 800ab08:	39c03fcc 	andi	r7,r7,255
 800ab0c:	39400726 	beq	r7,r5,800ab2c <__ledf2+0xbc>
 800ab10:	2800081e 	bne	r5,zero,800ab34 <__ledf2+0xc4>
 800ab14:	00800044 	movi	r2,1
 800ab18:	f800283a 	ret
 800ab1c:	2292b03a 	or	r9,r4,r10
 800ab20:	483fdf26 	beq	r9,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800ab24:	00800084 	movi	r2,2
 800ab28:	f800283a 	ret
 800ab2c:	4080030e 	bge	r8,r2,800ab3c <__ledf2+0xcc>
 800ab30:	383fef26 	beq	r7,zero,800aaf0 <__alt_data_end+0xfc00aaf0>
 800ab34:	00bfffc4 	movi	r2,-1
 800ab38:	f800283a 	ret
 800ab3c:	123feb16 	blt	r2,r8,800aaec <__alt_data_end+0xfc00aaec>
 800ab40:	1abff336 	bltu	r3,r10,800ab10 <__alt_data_end+0xfc00ab10>
 800ab44:	50c00326 	beq	r10,r3,800ab54 <__ledf2+0xe4>
 800ab48:	50c0042e 	bgeu	r10,r3,800ab5c <__ledf2+0xec>
 800ab4c:	283fe81e 	bne	r5,zero,800aaf0 <__alt_data_end+0xfc00aaf0>
 800ab50:	003ff806 	br	800ab34 <__alt_data_end+0xfc00ab34>
 800ab54:	313fee36 	bltu	r6,r4,800ab10 <__alt_data_end+0xfc00ab10>
 800ab58:	21bffc36 	bltu	r4,r6,800ab4c <__alt_data_end+0xfc00ab4c>
 800ab5c:	0005883a 	mov	r2,zero
 800ab60:	f800283a 	ret

0800ab64 <__muldf3>:
 800ab64:	deffee04 	addi	sp,sp,-72
 800ab68:	dd000c15 	stw	r20,48(sp)
 800ab6c:	2828d53a 	srli	r20,r5,20
 800ab70:	ddc00f15 	stw	r23,60(sp)
 800ab74:	282ed7fa 	srli	r23,r5,31
 800ab78:	dc000815 	stw	r16,32(sp)
 800ab7c:	04000434 	movhi	r16,16
 800ab80:	dcc00b15 	stw	r19,44(sp)
 800ab84:	843fffc4 	addi	r16,r16,-1
 800ab88:	dfc01115 	stw	ra,68(sp)
 800ab8c:	df001015 	stw	fp,64(sp)
 800ab90:	dd800e15 	stw	r22,56(sp)
 800ab94:	dd400d15 	stw	r21,52(sp)
 800ab98:	dc800a15 	stw	r18,40(sp)
 800ab9c:	dc400915 	stw	r17,36(sp)
 800aba0:	a501ffcc 	andi	r20,r20,2047
 800aba4:	2c20703a 	and	r16,r5,r16
 800aba8:	b827883a 	mov	r19,r23
 800abac:	ba403fcc 	andi	r9,r23,255
 800abb0:	a0006026 	beq	r20,zero,800ad34 <__muldf3+0x1d0>
 800abb4:	0081ffc4 	movi	r2,2047
 800abb8:	202d883a 	mov	r22,r4
 800abbc:	a0803626 	beq	r20,r2,800ac98 <__muldf3+0x134>
 800abc0:	84000434 	orhi	r16,r16,16
 800abc4:	200ad77a 	srli	r5,r4,29
 800abc8:	800490fa 	slli	r2,r16,3
 800abcc:	202c90fa 	slli	r22,r4,3
 800abd0:	a53f0044 	addi	r20,r20,-1023
 800abd4:	28a0b03a 	or	r16,r5,r2
 800abd8:	002b883a 	mov	r21,zero
 800abdc:	000b883a 	mov	r5,zero
 800abe0:	3804d53a 	srli	r2,r7,20
 800abe4:	3838d7fa 	srli	fp,r7,31
 800abe8:	04400434 	movhi	r17,16
 800abec:	8c7fffc4 	addi	r17,r17,-1
 800abf0:	1081ffcc 	andi	r2,r2,2047
 800abf4:	3025883a 	mov	r18,r6
 800abf8:	3c62703a 	and	r17,r7,r17
 800abfc:	e2803fcc 	andi	r10,fp,255
 800ac00:	10006d26 	beq	r2,zero,800adb8 <__muldf3+0x254>
 800ac04:	00c1ffc4 	movi	r3,2047
 800ac08:	10c06526 	beq	r2,r3,800ada0 <__muldf3+0x23c>
 800ac0c:	8c400434 	orhi	r17,r17,16
 800ac10:	300ed77a 	srli	r7,r6,29
 800ac14:	880690fa 	slli	r3,r17,3
 800ac18:	302490fa 	slli	r18,r6,3
 800ac1c:	10bf0044 	addi	r2,r2,-1023
 800ac20:	38e2b03a 	or	r17,r7,r3
 800ac24:	000f883a 	mov	r7,zero
 800ac28:	a087883a 	add	r3,r20,r2
 800ac2c:	010003c4 	movi	r4,15
 800ac30:	3d44b03a 	or	r2,r7,r21
 800ac34:	e5ccf03a 	xor	r6,fp,r23
 800ac38:	1a000044 	addi	r8,r3,1
 800ac3c:	20809b36 	bltu	r4,r2,800aeac <__muldf3+0x348>
 800ac40:	100490ba 	slli	r2,r2,2
 800ac44:	01020074 	movhi	r4,2049
 800ac48:	212b1604 	addi	r4,r4,-21416
 800ac4c:	1105883a 	add	r2,r2,r4
 800ac50:	10800017 	ldw	r2,0(r2)
 800ac54:	1000683a 	jmp	r2
 800ac58:	0800aeac 	andhi	zero,at,698
 800ac5c:	0800acb8 	rdprs	zero,at,690
 800ac60:	0800acb8 	rdprs	zero,at,690
 800ac64:	0800acb4 	orhi	zero,at,690
 800ac68:	0800ae88 	cmpgei	zero,at,698
 800ac6c:	0800ae88 	cmpgei	zero,at,698
 800ac70:	0800ae70 	cmpltui	zero,at,697
 800ac74:	0800acb4 	orhi	zero,at,690
 800ac78:	0800ae88 	cmpgei	zero,at,698
 800ac7c:	0800ae70 	cmpltui	zero,at,697
 800ac80:	0800ae88 	cmpgei	zero,at,698
 800ac84:	0800acb4 	orhi	zero,at,690
 800ac88:	0800ae98 	cmpnei	zero,at,698
 800ac8c:	0800ae98 	cmpnei	zero,at,698
 800ac90:	0800ae98 	cmpnei	zero,at,698
 800ac94:	0800b1f8 	rdprs	zero,at,711
 800ac98:	2404b03a 	or	r2,r4,r16
 800ac9c:	1000711e 	bne	r2,zero,800ae64 <__muldf3+0x300>
 800aca0:	05400204 	movi	r21,8
 800aca4:	0021883a 	mov	r16,zero
 800aca8:	002d883a 	mov	r22,zero
 800acac:	01400084 	movi	r5,2
 800acb0:	003fcb06 	br	800abe0 <__alt_data_end+0xfc00abe0>
 800acb4:	500d883a 	mov	r6,r10
 800acb8:	00800084 	movi	r2,2
 800acbc:	38805926 	beq	r7,r2,800ae24 <__muldf3+0x2c0>
 800acc0:	008000c4 	movi	r2,3
 800acc4:	3881bb26 	beq	r7,r2,800b3b4 <__muldf3+0x850>
 800acc8:	00800044 	movi	r2,1
 800accc:	3881961e 	bne	r7,r2,800b328 <__muldf3+0x7c4>
 800acd0:	3027883a 	mov	r19,r6
 800acd4:	0005883a 	mov	r2,zero
 800acd8:	0021883a 	mov	r16,zero
 800acdc:	002d883a 	mov	r22,zero
 800ace0:	1004953a 	slli	r2,r2,20
 800ace4:	98c03fcc 	andi	r3,r19,255
 800ace8:	04400434 	movhi	r17,16
 800acec:	8c7fffc4 	addi	r17,r17,-1
 800acf0:	180697fa 	slli	r3,r3,31
 800acf4:	8460703a 	and	r16,r16,r17
 800acf8:	80a0b03a 	or	r16,r16,r2
 800acfc:	80c6b03a 	or	r3,r16,r3
 800ad00:	b005883a 	mov	r2,r22
 800ad04:	dfc01117 	ldw	ra,68(sp)
 800ad08:	df001017 	ldw	fp,64(sp)
 800ad0c:	ddc00f17 	ldw	r23,60(sp)
 800ad10:	dd800e17 	ldw	r22,56(sp)
 800ad14:	dd400d17 	ldw	r21,52(sp)
 800ad18:	dd000c17 	ldw	r20,48(sp)
 800ad1c:	dcc00b17 	ldw	r19,44(sp)
 800ad20:	dc800a17 	ldw	r18,40(sp)
 800ad24:	dc400917 	ldw	r17,36(sp)
 800ad28:	dc000817 	ldw	r16,32(sp)
 800ad2c:	dec01204 	addi	sp,sp,72
 800ad30:	f800283a 	ret
 800ad34:	2404b03a 	or	r2,r4,r16
 800ad38:	202b883a 	mov	r21,r4
 800ad3c:	10004426 	beq	r2,zero,800ae50 <__muldf3+0x2ec>
 800ad40:	80015126 	beq	r16,zero,800b288 <__muldf3+0x724>
 800ad44:	8009883a 	mov	r4,r16
 800ad48:	d9800715 	stw	r6,28(sp)
 800ad4c:	d9c00215 	stw	r7,8(sp)
 800ad50:	da400415 	stw	r9,16(sp)
 800ad54:	800bed00 	call	800bed0 <__clzsi2>
 800ad58:	d9800717 	ldw	r6,28(sp)
 800ad5c:	d9c00217 	ldw	r7,8(sp)
 800ad60:	da400417 	ldw	r9,16(sp)
 800ad64:	113ffd44 	addi	r4,r2,-11
 800ad68:	00c00704 	movi	r3,28
 800ad6c:	19014216 	blt	r3,r4,800b278 <__muldf3+0x714>
 800ad70:	00c00744 	movi	r3,29
 800ad74:	15bffe04 	addi	r22,r2,-8
 800ad78:	1907c83a 	sub	r3,r3,r4
 800ad7c:	85a0983a 	sll	r16,r16,r22
 800ad80:	a8c6d83a 	srl	r3,r21,r3
 800ad84:	adac983a 	sll	r22,r21,r22
 800ad88:	1c20b03a 	or	r16,r3,r16
 800ad8c:	1080fcc4 	addi	r2,r2,1011
 800ad90:	00a9c83a 	sub	r20,zero,r2
 800ad94:	002b883a 	mov	r21,zero
 800ad98:	000b883a 	mov	r5,zero
 800ad9c:	003f9006 	br	800abe0 <__alt_data_end+0xfc00abe0>
 800ada0:	3446b03a 	or	r3,r6,r17
 800ada4:	1800281e 	bne	r3,zero,800ae48 <__muldf3+0x2e4>
 800ada8:	0023883a 	mov	r17,zero
 800adac:	0025883a 	mov	r18,zero
 800adb0:	01c00084 	movi	r7,2
 800adb4:	003f9c06 	br	800ac28 <__alt_data_end+0xfc00ac28>
 800adb8:	3446b03a 	or	r3,r6,r17
 800adbc:	18001e26 	beq	r3,zero,800ae38 <__muldf3+0x2d4>
 800adc0:	88012126 	beq	r17,zero,800b248 <__muldf3+0x6e4>
 800adc4:	8809883a 	mov	r4,r17
 800adc8:	d9400215 	stw	r5,8(sp)
 800adcc:	d9800715 	stw	r6,28(sp)
 800add0:	da400415 	stw	r9,16(sp)
 800add4:	da800315 	stw	r10,12(sp)
 800add8:	800bed00 	call	800bed0 <__clzsi2>
 800addc:	d9400217 	ldw	r5,8(sp)
 800ade0:	d9800717 	ldw	r6,28(sp)
 800ade4:	da400417 	ldw	r9,16(sp)
 800ade8:	da800317 	ldw	r10,12(sp)
 800adec:	113ffd44 	addi	r4,r2,-11
 800adf0:	00c00704 	movi	r3,28
 800adf4:	19011016 	blt	r3,r4,800b238 <__muldf3+0x6d4>
 800adf8:	00c00744 	movi	r3,29
 800adfc:	14bffe04 	addi	r18,r2,-8
 800ae00:	1907c83a 	sub	r3,r3,r4
 800ae04:	8ca2983a 	sll	r17,r17,r18
 800ae08:	30c6d83a 	srl	r3,r6,r3
 800ae0c:	34a4983a 	sll	r18,r6,r18
 800ae10:	1c62b03a 	or	r17,r3,r17
 800ae14:	1080fcc4 	addi	r2,r2,1011
 800ae18:	0085c83a 	sub	r2,zero,r2
 800ae1c:	000f883a 	mov	r7,zero
 800ae20:	003f8106 	br	800ac28 <__alt_data_end+0xfc00ac28>
 800ae24:	3027883a 	mov	r19,r6
 800ae28:	0081ffc4 	movi	r2,2047
 800ae2c:	0021883a 	mov	r16,zero
 800ae30:	002d883a 	mov	r22,zero
 800ae34:	003faa06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae38:	0023883a 	mov	r17,zero
 800ae3c:	0025883a 	mov	r18,zero
 800ae40:	01c00044 	movi	r7,1
 800ae44:	003f7806 	br	800ac28 <__alt_data_end+0xfc00ac28>
 800ae48:	01c000c4 	movi	r7,3
 800ae4c:	003f7606 	br	800ac28 <__alt_data_end+0xfc00ac28>
 800ae50:	05400104 	movi	r21,4
 800ae54:	0021883a 	mov	r16,zero
 800ae58:	002d883a 	mov	r22,zero
 800ae5c:	01400044 	movi	r5,1
 800ae60:	003f5f06 	br	800abe0 <__alt_data_end+0xfc00abe0>
 800ae64:	05400304 	movi	r21,12
 800ae68:	014000c4 	movi	r5,3
 800ae6c:	003f5c06 	br	800abe0 <__alt_data_end+0xfc00abe0>
 800ae70:	04000434 	movhi	r16,16
 800ae74:	0027883a 	mov	r19,zero
 800ae78:	843fffc4 	addi	r16,r16,-1
 800ae7c:	05bfffc4 	movi	r22,-1
 800ae80:	0081ffc4 	movi	r2,2047
 800ae84:	003f9606 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae88:	8023883a 	mov	r17,r16
 800ae8c:	b025883a 	mov	r18,r22
 800ae90:	280f883a 	mov	r7,r5
 800ae94:	003f8806 	br	800acb8 <__alt_data_end+0xfc00acb8>
 800ae98:	8023883a 	mov	r17,r16
 800ae9c:	b025883a 	mov	r18,r22
 800aea0:	480d883a 	mov	r6,r9
 800aea4:	280f883a 	mov	r7,r5
 800aea8:	003f8306 	br	800acb8 <__alt_data_end+0xfc00acb8>
 800aeac:	b026d43a 	srli	r19,r22,16
 800aeb0:	902ed43a 	srli	r23,r18,16
 800aeb4:	b5bfffcc 	andi	r22,r22,65535
 800aeb8:	94bfffcc 	andi	r18,r18,65535
 800aebc:	b00b883a 	mov	r5,r22
 800aec0:	9009883a 	mov	r4,r18
 800aec4:	d8c00515 	stw	r3,20(sp)
 800aec8:	d9800715 	stw	r6,28(sp)
 800aecc:	da000615 	stw	r8,24(sp)
 800aed0:	8000c800 	call	8000c80 <__mulsi3>
 800aed4:	980b883a 	mov	r5,r19
 800aed8:	9009883a 	mov	r4,r18
 800aedc:	1029883a 	mov	r20,r2
 800aee0:	8000c800 	call	8000c80 <__mulsi3>
 800aee4:	b80b883a 	mov	r5,r23
 800aee8:	9809883a 	mov	r4,r19
 800aeec:	102b883a 	mov	r21,r2
 800aef0:	8000c800 	call	8000c80 <__mulsi3>
 800aef4:	b809883a 	mov	r4,r23
 800aef8:	b00b883a 	mov	r5,r22
 800aefc:	1039883a 	mov	fp,r2
 800af00:	8000c800 	call	8000c80 <__mulsi3>
 800af04:	a008d43a 	srli	r4,r20,16
 800af08:	1545883a 	add	r2,r2,r21
 800af0c:	d8c00517 	ldw	r3,20(sp)
 800af10:	2085883a 	add	r2,r4,r2
 800af14:	d9800717 	ldw	r6,28(sp)
 800af18:	da000617 	ldw	r8,24(sp)
 800af1c:	1540022e 	bgeu	r2,r21,800af28 <__muldf3+0x3c4>
 800af20:	01000074 	movhi	r4,1
 800af24:	e139883a 	add	fp,fp,r4
 800af28:	100e943a 	slli	r7,r2,16
 800af2c:	1004d43a 	srli	r2,r2,16
 800af30:	882ad43a 	srli	r21,r17,16
 800af34:	a53fffcc 	andi	r20,r20,65535
 800af38:	8c7fffcc 	andi	r17,r17,65535
 800af3c:	3d29883a 	add	r20,r7,r20
 800af40:	b00b883a 	mov	r5,r22
 800af44:	8809883a 	mov	r4,r17
 800af48:	d8c00515 	stw	r3,20(sp)
 800af4c:	d9800715 	stw	r6,28(sp)
 800af50:	da000615 	stw	r8,24(sp)
 800af54:	dd000115 	stw	r20,4(sp)
 800af58:	d8800015 	stw	r2,0(sp)
 800af5c:	8000c800 	call	8000c80 <__mulsi3>
 800af60:	980b883a 	mov	r5,r19
 800af64:	8809883a 	mov	r4,r17
 800af68:	d8800215 	stw	r2,8(sp)
 800af6c:	8000c800 	call	8000c80 <__mulsi3>
 800af70:	9809883a 	mov	r4,r19
 800af74:	a80b883a 	mov	r5,r21
 800af78:	1029883a 	mov	r20,r2
 800af7c:	8000c800 	call	8000c80 <__mulsi3>
 800af80:	b00b883a 	mov	r5,r22
 800af84:	a809883a 	mov	r4,r21
 800af88:	d8800415 	stw	r2,16(sp)
 800af8c:	8000c800 	call	8000c80 <__mulsi3>
 800af90:	d9c00217 	ldw	r7,8(sp)
 800af94:	1505883a 	add	r2,r2,r20
 800af98:	d8c00517 	ldw	r3,20(sp)
 800af9c:	3826d43a 	srli	r19,r7,16
 800afa0:	d9800717 	ldw	r6,28(sp)
 800afa4:	da000617 	ldw	r8,24(sp)
 800afa8:	9885883a 	add	r2,r19,r2
 800afac:	da400417 	ldw	r9,16(sp)
 800afb0:	1500022e 	bgeu	r2,r20,800afbc <__muldf3+0x458>
 800afb4:	01000074 	movhi	r4,1
 800afb8:	4913883a 	add	r9,r9,r4
 800afbc:	1028d43a 	srli	r20,r2,16
 800afc0:	1004943a 	slli	r2,r2,16
 800afc4:	802cd43a 	srli	r22,r16,16
 800afc8:	843fffcc 	andi	r16,r16,65535
 800afcc:	3cffffcc 	andi	r19,r7,65535
 800afd0:	9009883a 	mov	r4,r18
 800afd4:	800b883a 	mov	r5,r16
 800afd8:	a269883a 	add	r20,r20,r9
 800afdc:	d8c00515 	stw	r3,20(sp)
 800afe0:	d9800715 	stw	r6,28(sp)
 800afe4:	da000615 	stw	r8,24(sp)
 800afe8:	14e7883a 	add	r19,r2,r19
 800afec:	8000c800 	call	8000c80 <__mulsi3>
 800aff0:	9009883a 	mov	r4,r18
 800aff4:	b00b883a 	mov	r5,r22
 800aff8:	d8800315 	stw	r2,12(sp)
 800affc:	8000c800 	call	8000c80 <__mulsi3>
 800b000:	b809883a 	mov	r4,r23
 800b004:	b00b883a 	mov	r5,r22
 800b008:	d8800215 	stw	r2,8(sp)
 800b00c:	8000c800 	call	8000c80 <__mulsi3>
 800b010:	b80b883a 	mov	r5,r23
 800b014:	8009883a 	mov	r4,r16
 800b018:	d8800415 	stw	r2,16(sp)
 800b01c:	8000c800 	call	8000c80 <__mulsi3>
 800b020:	da800317 	ldw	r10,12(sp)
 800b024:	d9c00217 	ldw	r7,8(sp)
 800b028:	d9000017 	ldw	r4,0(sp)
 800b02c:	502ed43a 	srli	r23,r10,16
 800b030:	11c5883a 	add	r2,r2,r7
 800b034:	24e5883a 	add	r18,r4,r19
 800b038:	b885883a 	add	r2,r23,r2
 800b03c:	d8c00517 	ldw	r3,20(sp)
 800b040:	d9800717 	ldw	r6,28(sp)
 800b044:	da000617 	ldw	r8,24(sp)
 800b048:	da400417 	ldw	r9,16(sp)
 800b04c:	11c0022e 	bgeu	r2,r7,800b058 <__muldf3+0x4f4>
 800b050:	01000074 	movhi	r4,1
 800b054:	4913883a 	add	r9,r9,r4
 800b058:	100ed43a 	srli	r7,r2,16
 800b05c:	1004943a 	slli	r2,r2,16
 800b060:	55ffffcc 	andi	r23,r10,65535
 800b064:	3a53883a 	add	r9,r7,r9
 800b068:	8809883a 	mov	r4,r17
 800b06c:	800b883a 	mov	r5,r16
 800b070:	d8c00515 	stw	r3,20(sp)
 800b074:	d9800715 	stw	r6,28(sp)
 800b078:	da000615 	stw	r8,24(sp)
 800b07c:	da400415 	stw	r9,16(sp)
 800b080:	15ef883a 	add	r23,r2,r23
 800b084:	8000c800 	call	8000c80 <__mulsi3>
 800b088:	8809883a 	mov	r4,r17
 800b08c:	b00b883a 	mov	r5,r22
 800b090:	d8800215 	stw	r2,8(sp)
 800b094:	8000c800 	call	8000c80 <__mulsi3>
 800b098:	b00b883a 	mov	r5,r22
 800b09c:	a809883a 	mov	r4,r21
 800b0a0:	d8800315 	stw	r2,12(sp)
 800b0a4:	8000c800 	call	8000c80 <__mulsi3>
 800b0a8:	8009883a 	mov	r4,r16
 800b0ac:	a80b883a 	mov	r5,r21
 800b0b0:	1023883a 	mov	r17,r2
 800b0b4:	8000c800 	call	8000c80 <__mulsi3>
 800b0b8:	d9c00217 	ldw	r7,8(sp)
 800b0bc:	da800317 	ldw	r10,12(sp)
 800b0c0:	d8c00517 	ldw	r3,20(sp)
 800b0c4:	3808d43a 	srli	r4,r7,16
 800b0c8:	1285883a 	add	r2,r2,r10
 800b0cc:	d9800717 	ldw	r6,28(sp)
 800b0d0:	2085883a 	add	r2,r4,r2
 800b0d4:	da000617 	ldw	r8,24(sp)
 800b0d8:	da400417 	ldw	r9,16(sp)
 800b0dc:	1280022e 	bgeu	r2,r10,800b0e8 <__muldf3+0x584>
 800b0e0:	01000074 	movhi	r4,1
 800b0e4:	8923883a 	add	r17,r17,r4
 800b0e8:	1008943a 	slli	r4,r2,16
 800b0ec:	39ffffcc 	andi	r7,r7,65535
 800b0f0:	e4b9883a 	add	fp,fp,r18
 800b0f4:	21cf883a 	add	r7,r4,r7
 800b0f8:	e4e7803a 	cmpltu	r19,fp,r19
 800b0fc:	3d0f883a 	add	r7,r7,r20
 800b100:	bf39883a 	add	fp,r23,fp
 800b104:	99c9883a 	add	r4,r19,r7
 800b108:	e5ef803a 	cmpltu	r23,fp,r23
 800b10c:	490b883a 	add	r5,r9,r4
 800b110:	1004d43a 	srli	r2,r2,16
 800b114:	b965883a 	add	r18,r23,r5
 800b118:	24c9803a 	cmpltu	r4,r4,r19
 800b11c:	3d29803a 	cmpltu	r20,r7,r20
 800b120:	a128b03a 	or	r20,r20,r4
 800b124:	95ef803a 	cmpltu	r23,r18,r23
 800b128:	2a53803a 	cmpltu	r9,r5,r9
 800b12c:	a0a9883a 	add	r20,r20,r2
 800b130:	4deeb03a 	or	r23,r9,r23
 800b134:	a5ef883a 	add	r23,r20,r23
 800b138:	bc63883a 	add	r17,r23,r17
 800b13c:	e004927a 	slli	r2,fp,9
 800b140:	d9000117 	ldw	r4,4(sp)
 800b144:	882e927a 	slli	r23,r17,9
 800b148:	9022d5fa 	srli	r17,r18,23
 800b14c:	e038d5fa 	srli	fp,fp,23
 800b150:	1104b03a 	or	r2,r2,r4
 800b154:	9024927a 	slli	r18,r18,9
 800b158:	1004c03a 	cmpne	r2,r2,zero
 800b15c:	bc62b03a 	or	r17,r23,r17
 800b160:	1738b03a 	or	fp,r2,fp
 800b164:	8880402c 	andhi	r2,r17,256
 800b168:	e4a4b03a 	or	r18,fp,r18
 800b16c:	10000726 	beq	r2,zero,800b18c <__muldf3+0x628>
 800b170:	9006d07a 	srli	r3,r18,1
 800b174:	880497fa 	slli	r2,r17,31
 800b178:	9480004c 	andi	r18,r18,1
 800b17c:	8822d07a 	srli	r17,r17,1
 800b180:	1ca4b03a 	or	r18,r3,r18
 800b184:	14a4b03a 	or	r18,r2,r18
 800b188:	4007883a 	mov	r3,r8
 800b18c:	1880ffc4 	addi	r2,r3,1023
 800b190:	0080460e 	bge	zero,r2,800b2ac <__muldf3+0x748>
 800b194:	910001cc 	andi	r4,r18,7
 800b198:	20000726 	beq	r4,zero,800b1b8 <__muldf3+0x654>
 800b19c:	910003cc 	andi	r4,r18,15
 800b1a0:	01400104 	movi	r5,4
 800b1a4:	21400426 	beq	r4,r5,800b1b8 <__muldf3+0x654>
 800b1a8:	9149883a 	add	r4,r18,r5
 800b1ac:	24a5803a 	cmpltu	r18,r4,r18
 800b1b0:	8ca3883a 	add	r17,r17,r18
 800b1b4:	2025883a 	mov	r18,r4
 800b1b8:	8900402c 	andhi	r4,r17,256
 800b1bc:	20000426 	beq	r4,zero,800b1d0 <__muldf3+0x66c>
 800b1c0:	18810004 	addi	r2,r3,1024
 800b1c4:	00ffc034 	movhi	r3,65280
 800b1c8:	18ffffc4 	addi	r3,r3,-1
 800b1cc:	88e2703a 	and	r17,r17,r3
 800b1d0:	00c1ff84 	movi	r3,2046
 800b1d4:	18bf1316 	blt	r3,r2,800ae24 <__alt_data_end+0xfc00ae24>
 800b1d8:	882c977a 	slli	r22,r17,29
 800b1dc:	9024d0fa 	srli	r18,r18,3
 800b1e0:	8822927a 	slli	r17,r17,9
 800b1e4:	1081ffcc 	andi	r2,r2,2047
 800b1e8:	b4acb03a 	or	r22,r22,r18
 800b1ec:	8820d33a 	srli	r16,r17,12
 800b1f0:	3027883a 	mov	r19,r6
 800b1f4:	003eba06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b1f8:	8080022c 	andhi	r2,r16,8
 800b1fc:	10000926 	beq	r2,zero,800b224 <__muldf3+0x6c0>
 800b200:	8880022c 	andhi	r2,r17,8
 800b204:	1000071e 	bne	r2,zero,800b224 <__muldf3+0x6c0>
 800b208:	00800434 	movhi	r2,16
 800b20c:	8c000234 	orhi	r16,r17,8
 800b210:	10bfffc4 	addi	r2,r2,-1
 800b214:	e027883a 	mov	r19,fp
 800b218:	80a0703a 	and	r16,r16,r2
 800b21c:	902d883a 	mov	r22,r18
 800b220:	003f1706 	br	800ae80 <__alt_data_end+0xfc00ae80>
 800b224:	00800434 	movhi	r2,16
 800b228:	84000234 	orhi	r16,r16,8
 800b22c:	10bfffc4 	addi	r2,r2,-1
 800b230:	80a0703a 	and	r16,r16,r2
 800b234:	003f1206 	br	800ae80 <__alt_data_end+0xfc00ae80>
 800b238:	147ff604 	addi	r17,r2,-40
 800b23c:	3462983a 	sll	r17,r6,r17
 800b240:	0025883a 	mov	r18,zero
 800b244:	003ef306 	br	800ae14 <__alt_data_end+0xfc00ae14>
 800b248:	3009883a 	mov	r4,r6
 800b24c:	d9400215 	stw	r5,8(sp)
 800b250:	d9800715 	stw	r6,28(sp)
 800b254:	da400415 	stw	r9,16(sp)
 800b258:	da800315 	stw	r10,12(sp)
 800b25c:	800bed00 	call	800bed0 <__clzsi2>
 800b260:	10800804 	addi	r2,r2,32
 800b264:	da800317 	ldw	r10,12(sp)
 800b268:	da400417 	ldw	r9,16(sp)
 800b26c:	d9800717 	ldw	r6,28(sp)
 800b270:	d9400217 	ldw	r5,8(sp)
 800b274:	003edd06 	br	800adec <__alt_data_end+0xfc00adec>
 800b278:	143ff604 	addi	r16,r2,-40
 800b27c:	ac20983a 	sll	r16,r21,r16
 800b280:	002d883a 	mov	r22,zero
 800b284:	003ec106 	br	800ad8c <__alt_data_end+0xfc00ad8c>
 800b288:	d9800715 	stw	r6,28(sp)
 800b28c:	d9c00215 	stw	r7,8(sp)
 800b290:	da400415 	stw	r9,16(sp)
 800b294:	800bed00 	call	800bed0 <__clzsi2>
 800b298:	10800804 	addi	r2,r2,32
 800b29c:	da400417 	ldw	r9,16(sp)
 800b2a0:	d9c00217 	ldw	r7,8(sp)
 800b2a4:	d9800717 	ldw	r6,28(sp)
 800b2a8:	003eae06 	br	800ad64 <__alt_data_end+0xfc00ad64>
 800b2ac:	00c00044 	movi	r3,1
 800b2b0:	1887c83a 	sub	r3,r3,r2
 800b2b4:	01000e04 	movi	r4,56
 800b2b8:	20fe8516 	blt	r4,r3,800acd0 <__alt_data_end+0xfc00acd0>
 800b2bc:	010007c4 	movi	r4,31
 800b2c0:	20c01b16 	blt	r4,r3,800b330 <__muldf3+0x7cc>
 800b2c4:	00800804 	movi	r2,32
 800b2c8:	10c5c83a 	sub	r2,r2,r3
 800b2cc:	888a983a 	sll	r5,r17,r2
 800b2d0:	90c8d83a 	srl	r4,r18,r3
 800b2d4:	9084983a 	sll	r2,r18,r2
 800b2d8:	88e2d83a 	srl	r17,r17,r3
 800b2dc:	2906b03a 	or	r3,r5,r4
 800b2e0:	1004c03a 	cmpne	r2,r2,zero
 800b2e4:	1886b03a 	or	r3,r3,r2
 800b2e8:	188001cc 	andi	r2,r3,7
 800b2ec:	10000726 	beq	r2,zero,800b30c <__muldf3+0x7a8>
 800b2f0:	188003cc 	andi	r2,r3,15
 800b2f4:	01000104 	movi	r4,4
 800b2f8:	11000426 	beq	r2,r4,800b30c <__muldf3+0x7a8>
 800b2fc:	1805883a 	mov	r2,r3
 800b300:	10c00104 	addi	r3,r2,4
 800b304:	1885803a 	cmpltu	r2,r3,r2
 800b308:	88a3883a 	add	r17,r17,r2
 800b30c:	8880202c 	andhi	r2,r17,128
 800b310:	10001c26 	beq	r2,zero,800b384 <__muldf3+0x820>
 800b314:	3027883a 	mov	r19,r6
 800b318:	00800044 	movi	r2,1
 800b31c:	0021883a 	mov	r16,zero
 800b320:	002d883a 	mov	r22,zero
 800b324:	003e6e06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b328:	4007883a 	mov	r3,r8
 800b32c:	003f9706 	br	800b18c <__alt_data_end+0xfc00b18c>
 800b330:	017ff844 	movi	r5,-31
 800b334:	2885c83a 	sub	r2,r5,r2
 800b338:	888ad83a 	srl	r5,r17,r2
 800b33c:	00800804 	movi	r2,32
 800b340:	18801a26 	beq	r3,r2,800b3ac <__muldf3+0x848>
 800b344:	01001004 	movi	r4,64
 800b348:	20c7c83a 	sub	r3,r4,r3
 800b34c:	88e2983a 	sll	r17,r17,r3
 800b350:	8ca4b03a 	or	r18,r17,r18
 800b354:	9004c03a 	cmpne	r2,r18,zero
 800b358:	2884b03a 	or	r2,r5,r2
 800b35c:	144001cc 	andi	r17,r2,7
 800b360:	88000d1e 	bne	r17,zero,800b398 <__muldf3+0x834>
 800b364:	0021883a 	mov	r16,zero
 800b368:	102cd0fa 	srli	r22,r2,3
 800b36c:	3027883a 	mov	r19,r6
 800b370:	0005883a 	mov	r2,zero
 800b374:	b46cb03a 	or	r22,r22,r17
 800b378:	003e5906 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b37c:	1007883a 	mov	r3,r2
 800b380:	0023883a 	mov	r17,zero
 800b384:	8820927a 	slli	r16,r17,9
 800b388:	1805883a 	mov	r2,r3
 800b38c:	8822977a 	slli	r17,r17,29
 800b390:	8020d33a 	srli	r16,r16,12
 800b394:	003ff406 	br	800b368 <__alt_data_end+0xfc00b368>
 800b398:	10c003cc 	andi	r3,r2,15
 800b39c:	01000104 	movi	r4,4
 800b3a0:	193ff626 	beq	r3,r4,800b37c <__alt_data_end+0xfc00b37c>
 800b3a4:	0023883a 	mov	r17,zero
 800b3a8:	003fd506 	br	800b300 <__alt_data_end+0xfc00b300>
 800b3ac:	0023883a 	mov	r17,zero
 800b3b0:	003fe706 	br	800b350 <__alt_data_end+0xfc00b350>
 800b3b4:	00800434 	movhi	r2,16
 800b3b8:	8c000234 	orhi	r16,r17,8
 800b3bc:	10bfffc4 	addi	r2,r2,-1
 800b3c0:	3027883a 	mov	r19,r6
 800b3c4:	80a0703a 	and	r16,r16,r2
 800b3c8:	902d883a 	mov	r22,r18
 800b3cc:	003eac06 	br	800ae80 <__alt_data_end+0xfc00ae80>

0800b3d0 <__subdf3>:
 800b3d0:	02000434 	movhi	r8,16
 800b3d4:	423fffc4 	addi	r8,r8,-1
 800b3d8:	defffb04 	addi	sp,sp,-20
 800b3dc:	2a14703a 	and	r10,r5,r8
 800b3e0:	3812d53a 	srli	r9,r7,20
 800b3e4:	3a10703a 	and	r8,r7,r8
 800b3e8:	2006d77a 	srli	r3,r4,29
 800b3ec:	3004d77a 	srli	r2,r6,29
 800b3f0:	dc000015 	stw	r16,0(sp)
 800b3f4:	501490fa 	slli	r10,r10,3
 800b3f8:	2820d53a 	srli	r16,r5,20
 800b3fc:	401090fa 	slli	r8,r8,3
 800b400:	dc800215 	stw	r18,8(sp)
 800b404:	dc400115 	stw	r17,4(sp)
 800b408:	dfc00415 	stw	ra,16(sp)
 800b40c:	202290fa 	slli	r17,r4,3
 800b410:	dcc00315 	stw	r19,12(sp)
 800b414:	4a41ffcc 	andi	r9,r9,2047
 800b418:	0101ffc4 	movi	r4,2047
 800b41c:	2824d7fa 	srli	r18,r5,31
 800b420:	8401ffcc 	andi	r16,r16,2047
 800b424:	50c6b03a 	or	r3,r10,r3
 800b428:	380ed7fa 	srli	r7,r7,31
 800b42c:	408ab03a 	or	r5,r8,r2
 800b430:	300c90fa 	slli	r6,r6,3
 800b434:	49009626 	beq	r9,r4,800b690 <__subdf3+0x2c0>
 800b438:	39c0005c 	xori	r7,r7,1
 800b43c:	8245c83a 	sub	r2,r16,r9
 800b440:	3c807426 	beq	r7,r18,800b614 <__subdf3+0x244>
 800b444:	0080af0e 	bge	zero,r2,800b704 <__subdf3+0x334>
 800b448:	48002a1e 	bne	r9,zero,800b4f4 <__subdf3+0x124>
 800b44c:	2988b03a 	or	r4,r5,r6
 800b450:	20009a1e 	bne	r4,zero,800b6bc <__subdf3+0x2ec>
 800b454:	888001cc 	andi	r2,r17,7
 800b458:	10000726 	beq	r2,zero,800b478 <__subdf3+0xa8>
 800b45c:	888003cc 	andi	r2,r17,15
 800b460:	01000104 	movi	r4,4
 800b464:	11000426 	beq	r2,r4,800b478 <__subdf3+0xa8>
 800b468:	890b883a 	add	r5,r17,r4
 800b46c:	2c63803a 	cmpltu	r17,r5,r17
 800b470:	1c47883a 	add	r3,r3,r17
 800b474:	2823883a 	mov	r17,r5
 800b478:	1880202c 	andhi	r2,r3,128
 800b47c:	10005926 	beq	r2,zero,800b5e4 <__subdf3+0x214>
 800b480:	84000044 	addi	r16,r16,1
 800b484:	0081ffc4 	movi	r2,2047
 800b488:	8080be26 	beq	r16,r2,800b784 <__subdf3+0x3b4>
 800b48c:	017fe034 	movhi	r5,65408
 800b490:	297fffc4 	addi	r5,r5,-1
 800b494:	1946703a 	and	r3,r3,r5
 800b498:	1804977a 	slli	r2,r3,29
 800b49c:	1806927a 	slli	r3,r3,9
 800b4a0:	8822d0fa 	srli	r17,r17,3
 800b4a4:	8401ffcc 	andi	r16,r16,2047
 800b4a8:	180ad33a 	srli	r5,r3,12
 800b4ac:	9100004c 	andi	r4,r18,1
 800b4b0:	1444b03a 	or	r2,r2,r17
 800b4b4:	80c1ffcc 	andi	r3,r16,2047
 800b4b8:	1820953a 	slli	r16,r3,20
 800b4bc:	20c03fcc 	andi	r3,r4,255
 800b4c0:	180897fa 	slli	r4,r3,31
 800b4c4:	00c00434 	movhi	r3,16
 800b4c8:	18ffffc4 	addi	r3,r3,-1
 800b4cc:	28c6703a 	and	r3,r5,r3
 800b4d0:	1c06b03a 	or	r3,r3,r16
 800b4d4:	1906b03a 	or	r3,r3,r4
 800b4d8:	dfc00417 	ldw	ra,16(sp)
 800b4dc:	dcc00317 	ldw	r19,12(sp)
 800b4e0:	dc800217 	ldw	r18,8(sp)
 800b4e4:	dc400117 	ldw	r17,4(sp)
 800b4e8:	dc000017 	ldw	r16,0(sp)
 800b4ec:	dec00504 	addi	sp,sp,20
 800b4f0:	f800283a 	ret
 800b4f4:	0101ffc4 	movi	r4,2047
 800b4f8:	813fd626 	beq	r16,r4,800b454 <__alt_data_end+0xfc00b454>
 800b4fc:	29402034 	orhi	r5,r5,128
 800b500:	01000e04 	movi	r4,56
 800b504:	2080a316 	blt	r4,r2,800b794 <__subdf3+0x3c4>
 800b508:	010007c4 	movi	r4,31
 800b50c:	2080c616 	blt	r4,r2,800b828 <__subdf3+0x458>
 800b510:	01000804 	movi	r4,32
 800b514:	2089c83a 	sub	r4,r4,r2
 800b518:	2910983a 	sll	r8,r5,r4
 800b51c:	308ed83a 	srl	r7,r6,r2
 800b520:	3108983a 	sll	r4,r6,r4
 800b524:	2884d83a 	srl	r2,r5,r2
 800b528:	41ccb03a 	or	r6,r8,r7
 800b52c:	2008c03a 	cmpne	r4,r4,zero
 800b530:	310cb03a 	or	r6,r6,r4
 800b534:	898dc83a 	sub	r6,r17,r6
 800b538:	89a3803a 	cmpltu	r17,r17,r6
 800b53c:	1887c83a 	sub	r3,r3,r2
 800b540:	1c47c83a 	sub	r3,r3,r17
 800b544:	3023883a 	mov	r17,r6
 800b548:	1880202c 	andhi	r2,r3,128
 800b54c:	10002326 	beq	r2,zero,800b5dc <__subdf3+0x20c>
 800b550:	04c02034 	movhi	r19,128
 800b554:	9cffffc4 	addi	r19,r19,-1
 800b558:	1ce6703a 	and	r19,r3,r19
 800b55c:	98007a26 	beq	r19,zero,800b748 <__subdf3+0x378>
 800b560:	9809883a 	mov	r4,r19
 800b564:	800bed00 	call	800bed0 <__clzsi2>
 800b568:	113ffe04 	addi	r4,r2,-8
 800b56c:	00c007c4 	movi	r3,31
 800b570:	19007b16 	blt	r3,r4,800b760 <__subdf3+0x390>
 800b574:	00800804 	movi	r2,32
 800b578:	1105c83a 	sub	r2,r2,r4
 800b57c:	8884d83a 	srl	r2,r17,r2
 800b580:	9906983a 	sll	r3,r19,r4
 800b584:	8922983a 	sll	r17,r17,r4
 800b588:	10c4b03a 	or	r2,r2,r3
 800b58c:	24007816 	blt	r4,r16,800b770 <__subdf3+0x3a0>
 800b590:	2421c83a 	sub	r16,r4,r16
 800b594:	80c00044 	addi	r3,r16,1
 800b598:	010007c4 	movi	r4,31
 800b59c:	20c09516 	blt	r4,r3,800b7f4 <__subdf3+0x424>
 800b5a0:	01400804 	movi	r5,32
 800b5a4:	28cbc83a 	sub	r5,r5,r3
 800b5a8:	88c8d83a 	srl	r4,r17,r3
 800b5ac:	8962983a 	sll	r17,r17,r5
 800b5b0:	114a983a 	sll	r5,r2,r5
 800b5b4:	10c6d83a 	srl	r3,r2,r3
 800b5b8:	8804c03a 	cmpne	r2,r17,zero
 800b5bc:	290ab03a 	or	r5,r5,r4
 800b5c0:	28a2b03a 	or	r17,r5,r2
 800b5c4:	0021883a 	mov	r16,zero
 800b5c8:	003fa206 	br	800b454 <__alt_data_end+0xfc00b454>
 800b5cc:	2090b03a 	or	r8,r4,r2
 800b5d0:	40018e26 	beq	r8,zero,800bc0c <__subdf3+0x83c>
 800b5d4:	1007883a 	mov	r3,r2
 800b5d8:	2023883a 	mov	r17,r4
 800b5dc:	888001cc 	andi	r2,r17,7
 800b5e0:	103f9e1e 	bne	r2,zero,800b45c <__alt_data_end+0xfc00b45c>
 800b5e4:	1804977a 	slli	r2,r3,29
 800b5e8:	8822d0fa 	srli	r17,r17,3
 800b5ec:	1810d0fa 	srli	r8,r3,3
 800b5f0:	9100004c 	andi	r4,r18,1
 800b5f4:	1444b03a 	or	r2,r2,r17
 800b5f8:	00c1ffc4 	movi	r3,2047
 800b5fc:	80c02826 	beq	r16,r3,800b6a0 <__subdf3+0x2d0>
 800b600:	01400434 	movhi	r5,16
 800b604:	297fffc4 	addi	r5,r5,-1
 800b608:	80e0703a 	and	r16,r16,r3
 800b60c:	414a703a 	and	r5,r8,r5
 800b610:	003fa806 	br	800b4b4 <__alt_data_end+0xfc00b4b4>
 800b614:	0080630e 	bge	zero,r2,800b7a4 <__subdf3+0x3d4>
 800b618:	48003026 	beq	r9,zero,800b6dc <__subdf3+0x30c>
 800b61c:	0101ffc4 	movi	r4,2047
 800b620:	813f8c26 	beq	r16,r4,800b454 <__alt_data_end+0xfc00b454>
 800b624:	29402034 	orhi	r5,r5,128
 800b628:	01000e04 	movi	r4,56
 800b62c:	2080a90e 	bge	r4,r2,800b8d4 <__subdf3+0x504>
 800b630:	298cb03a 	or	r6,r5,r6
 800b634:	3012c03a 	cmpne	r9,r6,zero
 800b638:	0005883a 	mov	r2,zero
 800b63c:	4c53883a 	add	r9,r9,r17
 800b640:	4c63803a 	cmpltu	r17,r9,r17
 800b644:	10c7883a 	add	r3,r2,r3
 800b648:	88c7883a 	add	r3,r17,r3
 800b64c:	4823883a 	mov	r17,r9
 800b650:	1880202c 	andhi	r2,r3,128
 800b654:	1000d026 	beq	r2,zero,800b998 <__subdf3+0x5c8>
 800b658:	84000044 	addi	r16,r16,1
 800b65c:	0081ffc4 	movi	r2,2047
 800b660:	8080fe26 	beq	r16,r2,800ba5c <__subdf3+0x68c>
 800b664:	00bfe034 	movhi	r2,65408
 800b668:	10bfffc4 	addi	r2,r2,-1
 800b66c:	1886703a 	and	r3,r3,r2
 800b670:	880ad07a 	srli	r5,r17,1
 800b674:	180497fa 	slli	r2,r3,31
 800b678:	8900004c 	andi	r4,r17,1
 800b67c:	2922b03a 	or	r17,r5,r4
 800b680:	1806d07a 	srli	r3,r3,1
 800b684:	1462b03a 	or	r17,r2,r17
 800b688:	3825883a 	mov	r18,r7
 800b68c:	003f7106 	br	800b454 <__alt_data_end+0xfc00b454>
 800b690:	2984b03a 	or	r2,r5,r6
 800b694:	103f6826 	beq	r2,zero,800b438 <__alt_data_end+0xfc00b438>
 800b698:	39c03fcc 	andi	r7,r7,255
 800b69c:	003f6706 	br	800b43c <__alt_data_end+0xfc00b43c>
 800b6a0:	4086b03a 	or	r3,r8,r2
 800b6a4:	18015226 	beq	r3,zero,800bbf0 <__subdf3+0x820>
 800b6a8:	00c00434 	movhi	r3,16
 800b6ac:	41400234 	orhi	r5,r8,8
 800b6b0:	18ffffc4 	addi	r3,r3,-1
 800b6b4:	28ca703a 	and	r5,r5,r3
 800b6b8:	003f7e06 	br	800b4b4 <__alt_data_end+0xfc00b4b4>
 800b6bc:	10bfffc4 	addi	r2,r2,-1
 800b6c0:	1000491e 	bne	r2,zero,800b7e8 <__subdf3+0x418>
 800b6c4:	898fc83a 	sub	r7,r17,r6
 800b6c8:	89e3803a 	cmpltu	r17,r17,r7
 800b6cc:	1947c83a 	sub	r3,r3,r5
 800b6d0:	1c47c83a 	sub	r3,r3,r17
 800b6d4:	3823883a 	mov	r17,r7
 800b6d8:	003f9b06 	br	800b548 <__alt_data_end+0xfc00b548>
 800b6dc:	2988b03a 	or	r4,r5,r6
 800b6e0:	203f5c26 	beq	r4,zero,800b454 <__alt_data_end+0xfc00b454>
 800b6e4:	10bfffc4 	addi	r2,r2,-1
 800b6e8:	1000931e 	bne	r2,zero,800b938 <__subdf3+0x568>
 800b6ec:	898d883a 	add	r6,r17,r6
 800b6f0:	3463803a 	cmpltu	r17,r6,r17
 800b6f4:	1947883a 	add	r3,r3,r5
 800b6f8:	88c7883a 	add	r3,r17,r3
 800b6fc:	3023883a 	mov	r17,r6
 800b700:	003fd306 	br	800b650 <__alt_data_end+0xfc00b650>
 800b704:	1000541e 	bne	r2,zero,800b858 <__subdf3+0x488>
 800b708:	80800044 	addi	r2,r16,1
 800b70c:	1081ffcc 	andi	r2,r2,2047
 800b710:	01000044 	movi	r4,1
 800b714:	2080a20e 	bge	r4,r2,800b9a0 <__subdf3+0x5d0>
 800b718:	8989c83a 	sub	r4,r17,r6
 800b71c:	8905803a 	cmpltu	r2,r17,r4
 800b720:	1967c83a 	sub	r19,r3,r5
 800b724:	98a7c83a 	sub	r19,r19,r2
 800b728:	9880202c 	andhi	r2,r19,128
 800b72c:	10006326 	beq	r2,zero,800b8bc <__subdf3+0x4ec>
 800b730:	3463c83a 	sub	r17,r6,r17
 800b734:	28c7c83a 	sub	r3,r5,r3
 800b738:	344d803a 	cmpltu	r6,r6,r17
 800b73c:	19a7c83a 	sub	r19,r3,r6
 800b740:	3825883a 	mov	r18,r7
 800b744:	983f861e 	bne	r19,zero,800b560 <__alt_data_end+0xfc00b560>
 800b748:	8809883a 	mov	r4,r17
 800b74c:	800bed00 	call	800bed0 <__clzsi2>
 800b750:	10800804 	addi	r2,r2,32
 800b754:	113ffe04 	addi	r4,r2,-8
 800b758:	00c007c4 	movi	r3,31
 800b75c:	193f850e 	bge	r3,r4,800b574 <__alt_data_end+0xfc00b574>
 800b760:	10bff604 	addi	r2,r2,-40
 800b764:	8884983a 	sll	r2,r17,r2
 800b768:	0023883a 	mov	r17,zero
 800b76c:	243f880e 	bge	r4,r16,800b590 <__alt_data_end+0xfc00b590>
 800b770:	00ffe034 	movhi	r3,65408
 800b774:	18ffffc4 	addi	r3,r3,-1
 800b778:	8121c83a 	sub	r16,r16,r4
 800b77c:	10c6703a 	and	r3,r2,r3
 800b780:	003f3406 	br	800b454 <__alt_data_end+0xfc00b454>
 800b784:	9100004c 	andi	r4,r18,1
 800b788:	000b883a 	mov	r5,zero
 800b78c:	0005883a 	mov	r2,zero
 800b790:	003f4806 	br	800b4b4 <__alt_data_end+0xfc00b4b4>
 800b794:	298cb03a 	or	r6,r5,r6
 800b798:	300cc03a 	cmpne	r6,r6,zero
 800b79c:	0005883a 	mov	r2,zero
 800b7a0:	003f6406 	br	800b534 <__alt_data_end+0xfc00b534>
 800b7a4:	10009a1e 	bne	r2,zero,800ba10 <__subdf3+0x640>
 800b7a8:	82400044 	addi	r9,r16,1
 800b7ac:	4881ffcc 	andi	r2,r9,2047
 800b7b0:	02800044 	movi	r10,1
 800b7b4:	5080670e 	bge	r10,r2,800b954 <__subdf3+0x584>
 800b7b8:	0081ffc4 	movi	r2,2047
 800b7bc:	4880af26 	beq	r9,r2,800ba7c <__subdf3+0x6ac>
 800b7c0:	898d883a 	add	r6,r17,r6
 800b7c4:	1945883a 	add	r2,r3,r5
 800b7c8:	3447803a 	cmpltu	r3,r6,r17
 800b7cc:	1887883a 	add	r3,r3,r2
 800b7d0:	182297fa 	slli	r17,r3,31
 800b7d4:	300cd07a 	srli	r6,r6,1
 800b7d8:	1806d07a 	srli	r3,r3,1
 800b7dc:	4821883a 	mov	r16,r9
 800b7e0:	89a2b03a 	or	r17,r17,r6
 800b7e4:	003f1b06 	br	800b454 <__alt_data_end+0xfc00b454>
 800b7e8:	0101ffc4 	movi	r4,2047
 800b7ec:	813f441e 	bne	r16,r4,800b500 <__alt_data_end+0xfc00b500>
 800b7f0:	003f1806 	br	800b454 <__alt_data_end+0xfc00b454>
 800b7f4:	843ff844 	addi	r16,r16,-31
 800b7f8:	01400804 	movi	r5,32
 800b7fc:	1408d83a 	srl	r4,r2,r16
 800b800:	19405026 	beq	r3,r5,800b944 <__subdf3+0x574>
 800b804:	01401004 	movi	r5,64
 800b808:	28c7c83a 	sub	r3,r5,r3
 800b80c:	10c4983a 	sll	r2,r2,r3
 800b810:	88a2b03a 	or	r17,r17,r2
 800b814:	8822c03a 	cmpne	r17,r17,zero
 800b818:	2462b03a 	or	r17,r4,r17
 800b81c:	0007883a 	mov	r3,zero
 800b820:	0021883a 	mov	r16,zero
 800b824:	003f6d06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b828:	11fff804 	addi	r7,r2,-32
 800b82c:	01000804 	movi	r4,32
 800b830:	29ced83a 	srl	r7,r5,r7
 800b834:	11004526 	beq	r2,r4,800b94c <__subdf3+0x57c>
 800b838:	01001004 	movi	r4,64
 800b83c:	2089c83a 	sub	r4,r4,r2
 800b840:	2904983a 	sll	r2,r5,r4
 800b844:	118cb03a 	or	r6,r2,r6
 800b848:	300cc03a 	cmpne	r6,r6,zero
 800b84c:	398cb03a 	or	r6,r7,r6
 800b850:	0005883a 	mov	r2,zero
 800b854:	003f3706 	br	800b534 <__alt_data_end+0xfc00b534>
 800b858:	80002a26 	beq	r16,zero,800b904 <__subdf3+0x534>
 800b85c:	0101ffc4 	movi	r4,2047
 800b860:	49006626 	beq	r9,r4,800b9fc <__subdf3+0x62c>
 800b864:	0085c83a 	sub	r2,zero,r2
 800b868:	18c02034 	orhi	r3,r3,128
 800b86c:	01000e04 	movi	r4,56
 800b870:	20807e16 	blt	r4,r2,800ba6c <__subdf3+0x69c>
 800b874:	010007c4 	movi	r4,31
 800b878:	2080e716 	blt	r4,r2,800bc18 <__subdf3+0x848>
 800b87c:	01000804 	movi	r4,32
 800b880:	2089c83a 	sub	r4,r4,r2
 800b884:	1914983a 	sll	r10,r3,r4
 800b888:	8890d83a 	srl	r8,r17,r2
 800b88c:	8908983a 	sll	r4,r17,r4
 800b890:	1884d83a 	srl	r2,r3,r2
 800b894:	5222b03a 	or	r17,r10,r8
 800b898:	2006c03a 	cmpne	r3,r4,zero
 800b89c:	88e2b03a 	or	r17,r17,r3
 800b8a0:	3463c83a 	sub	r17,r6,r17
 800b8a4:	2885c83a 	sub	r2,r5,r2
 800b8a8:	344d803a 	cmpltu	r6,r6,r17
 800b8ac:	1187c83a 	sub	r3,r2,r6
 800b8b0:	4821883a 	mov	r16,r9
 800b8b4:	3825883a 	mov	r18,r7
 800b8b8:	003f2306 	br	800b548 <__alt_data_end+0xfc00b548>
 800b8bc:	24d0b03a 	or	r8,r4,r19
 800b8c0:	40001b1e 	bne	r8,zero,800b930 <__subdf3+0x560>
 800b8c4:	0005883a 	mov	r2,zero
 800b8c8:	0009883a 	mov	r4,zero
 800b8cc:	0021883a 	mov	r16,zero
 800b8d0:	003f4906 	br	800b5f8 <__alt_data_end+0xfc00b5f8>
 800b8d4:	010007c4 	movi	r4,31
 800b8d8:	20803a16 	blt	r4,r2,800b9c4 <__subdf3+0x5f4>
 800b8dc:	01000804 	movi	r4,32
 800b8e0:	2089c83a 	sub	r4,r4,r2
 800b8e4:	2912983a 	sll	r9,r5,r4
 800b8e8:	3090d83a 	srl	r8,r6,r2
 800b8ec:	3108983a 	sll	r4,r6,r4
 800b8f0:	2884d83a 	srl	r2,r5,r2
 800b8f4:	4a12b03a 	or	r9,r9,r8
 800b8f8:	2008c03a 	cmpne	r4,r4,zero
 800b8fc:	4912b03a 	or	r9,r9,r4
 800b900:	003f4e06 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b904:	1c48b03a 	or	r4,r3,r17
 800b908:	20003c26 	beq	r4,zero,800b9fc <__subdf3+0x62c>
 800b90c:	0084303a 	nor	r2,zero,r2
 800b910:	1000381e 	bne	r2,zero,800b9f4 <__subdf3+0x624>
 800b914:	3463c83a 	sub	r17,r6,r17
 800b918:	28c5c83a 	sub	r2,r5,r3
 800b91c:	344d803a 	cmpltu	r6,r6,r17
 800b920:	1187c83a 	sub	r3,r2,r6
 800b924:	4821883a 	mov	r16,r9
 800b928:	3825883a 	mov	r18,r7
 800b92c:	003f0606 	br	800b548 <__alt_data_end+0xfc00b548>
 800b930:	2023883a 	mov	r17,r4
 800b934:	003f0906 	br	800b55c <__alt_data_end+0xfc00b55c>
 800b938:	0101ffc4 	movi	r4,2047
 800b93c:	813f3a1e 	bne	r16,r4,800b628 <__alt_data_end+0xfc00b628>
 800b940:	003ec406 	br	800b454 <__alt_data_end+0xfc00b454>
 800b944:	0005883a 	mov	r2,zero
 800b948:	003fb106 	br	800b810 <__alt_data_end+0xfc00b810>
 800b94c:	0005883a 	mov	r2,zero
 800b950:	003fbc06 	br	800b844 <__alt_data_end+0xfc00b844>
 800b954:	1c44b03a 	or	r2,r3,r17
 800b958:	80008e1e 	bne	r16,zero,800bb94 <__subdf3+0x7c4>
 800b95c:	1000c826 	beq	r2,zero,800bc80 <__subdf3+0x8b0>
 800b960:	2984b03a 	or	r2,r5,r6
 800b964:	103ebb26 	beq	r2,zero,800b454 <__alt_data_end+0xfc00b454>
 800b968:	8989883a 	add	r4,r17,r6
 800b96c:	1945883a 	add	r2,r3,r5
 800b970:	2447803a 	cmpltu	r3,r4,r17
 800b974:	1887883a 	add	r3,r3,r2
 800b978:	1880202c 	andhi	r2,r3,128
 800b97c:	2023883a 	mov	r17,r4
 800b980:	103f1626 	beq	r2,zero,800b5dc <__alt_data_end+0xfc00b5dc>
 800b984:	00bfe034 	movhi	r2,65408
 800b988:	10bfffc4 	addi	r2,r2,-1
 800b98c:	5021883a 	mov	r16,r10
 800b990:	1886703a 	and	r3,r3,r2
 800b994:	003eaf06 	br	800b454 <__alt_data_end+0xfc00b454>
 800b998:	3825883a 	mov	r18,r7
 800b99c:	003f0f06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b9a0:	1c44b03a 	or	r2,r3,r17
 800b9a4:	8000251e 	bne	r16,zero,800ba3c <__subdf3+0x66c>
 800b9a8:	1000661e 	bne	r2,zero,800bb44 <__subdf3+0x774>
 800b9ac:	2990b03a 	or	r8,r5,r6
 800b9b0:	40009626 	beq	r8,zero,800bc0c <__subdf3+0x83c>
 800b9b4:	2807883a 	mov	r3,r5
 800b9b8:	3023883a 	mov	r17,r6
 800b9bc:	3825883a 	mov	r18,r7
 800b9c0:	003ea406 	br	800b454 <__alt_data_end+0xfc00b454>
 800b9c4:	127ff804 	addi	r9,r2,-32
 800b9c8:	01000804 	movi	r4,32
 800b9cc:	2a52d83a 	srl	r9,r5,r9
 800b9d0:	11008c26 	beq	r2,r4,800bc04 <__subdf3+0x834>
 800b9d4:	01001004 	movi	r4,64
 800b9d8:	2085c83a 	sub	r2,r4,r2
 800b9dc:	2884983a 	sll	r2,r5,r2
 800b9e0:	118cb03a 	or	r6,r2,r6
 800b9e4:	300cc03a 	cmpne	r6,r6,zero
 800b9e8:	4992b03a 	or	r9,r9,r6
 800b9ec:	0005883a 	mov	r2,zero
 800b9f0:	003f1206 	br	800b63c <__alt_data_end+0xfc00b63c>
 800b9f4:	0101ffc4 	movi	r4,2047
 800b9f8:	493f9c1e 	bne	r9,r4,800b86c <__alt_data_end+0xfc00b86c>
 800b9fc:	2807883a 	mov	r3,r5
 800ba00:	3023883a 	mov	r17,r6
 800ba04:	4821883a 	mov	r16,r9
 800ba08:	3825883a 	mov	r18,r7
 800ba0c:	003e9106 	br	800b454 <__alt_data_end+0xfc00b454>
 800ba10:	80001f1e 	bne	r16,zero,800ba90 <__subdf3+0x6c0>
 800ba14:	1c48b03a 	or	r4,r3,r17
 800ba18:	20005a26 	beq	r4,zero,800bb84 <__subdf3+0x7b4>
 800ba1c:	0084303a 	nor	r2,zero,r2
 800ba20:	1000561e 	bne	r2,zero,800bb7c <__subdf3+0x7ac>
 800ba24:	89a3883a 	add	r17,r17,r6
 800ba28:	1945883a 	add	r2,r3,r5
 800ba2c:	898d803a 	cmpltu	r6,r17,r6
 800ba30:	3087883a 	add	r3,r6,r2
 800ba34:	4821883a 	mov	r16,r9
 800ba38:	003f0506 	br	800b650 <__alt_data_end+0xfc00b650>
 800ba3c:	10002b1e 	bne	r2,zero,800baec <__subdf3+0x71c>
 800ba40:	2984b03a 	or	r2,r5,r6
 800ba44:	10008026 	beq	r2,zero,800bc48 <__subdf3+0x878>
 800ba48:	2807883a 	mov	r3,r5
 800ba4c:	3023883a 	mov	r17,r6
 800ba50:	3825883a 	mov	r18,r7
 800ba54:	0401ffc4 	movi	r16,2047
 800ba58:	003e7e06 	br	800b454 <__alt_data_end+0xfc00b454>
 800ba5c:	3809883a 	mov	r4,r7
 800ba60:	0011883a 	mov	r8,zero
 800ba64:	0005883a 	mov	r2,zero
 800ba68:	003ee306 	br	800b5f8 <__alt_data_end+0xfc00b5f8>
 800ba6c:	1c62b03a 	or	r17,r3,r17
 800ba70:	8822c03a 	cmpne	r17,r17,zero
 800ba74:	0005883a 	mov	r2,zero
 800ba78:	003f8906 	br	800b8a0 <__alt_data_end+0xfc00b8a0>
 800ba7c:	3809883a 	mov	r4,r7
 800ba80:	4821883a 	mov	r16,r9
 800ba84:	0011883a 	mov	r8,zero
 800ba88:	0005883a 	mov	r2,zero
 800ba8c:	003eda06 	br	800b5f8 <__alt_data_end+0xfc00b5f8>
 800ba90:	0101ffc4 	movi	r4,2047
 800ba94:	49003b26 	beq	r9,r4,800bb84 <__subdf3+0x7b4>
 800ba98:	0085c83a 	sub	r2,zero,r2
 800ba9c:	18c02034 	orhi	r3,r3,128
 800baa0:	01000e04 	movi	r4,56
 800baa4:	20806e16 	blt	r4,r2,800bc60 <__subdf3+0x890>
 800baa8:	010007c4 	movi	r4,31
 800baac:	20807716 	blt	r4,r2,800bc8c <__subdf3+0x8bc>
 800bab0:	01000804 	movi	r4,32
 800bab4:	2089c83a 	sub	r4,r4,r2
 800bab8:	1914983a 	sll	r10,r3,r4
 800babc:	8890d83a 	srl	r8,r17,r2
 800bac0:	8908983a 	sll	r4,r17,r4
 800bac4:	1884d83a 	srl	r2,r3,r2
 800bac8:	5222b03a 	or	r17,r10,r8
 800bacc:	2006c03a 	cmpne	r3,r4,zero
 800bad0:	88e2b03a 	or	r17,r17,r3
 800bad4:	89a3883a 	add	r17,r17,r6
 800bad8:	1145883a 	add	r2,r2,r5
 800badc:	898d803a 	cmpltu	r6,r17,r6
 800bae0:	3087883a 	add	r3,r6,r2
 800bae4:	4821883a 	mov	r16,r9
 800bae8:	003ed906 	br	800b650 <__alt_data_end+0xfc00b650>
 800baec:	2984b03a 	or	r2,r5,r6
 800baf0:	10004226 	beq	r2,zero,800bbfc <__subdf3+0x82c>
 800baf4:	1808d0fa 	srli	r4,r3,3
 800baf8:	8822d0fa 	srli	r17,r17,3
 800bafc:	1806977a 	slli	r3,r3,29
 800bb00:	2080022c 	andhi	r2,r4,8
 800bb04:	1c62b03a 	or	r17,r3,r17
 800bb08:	10000826 	beq	r2,zero,800bb2c <__subdf3+0x75c>
 800bb0c:	2812d0fa 	srli	r9,r5,3
 800bb10:	4880022c 	andhi	r2,r9,8
 800bb14:	1000051e 	bne	r2,zero,800bb2c <__subdf3+0x75c>
 800bb18:	300cd0fa 	srli	r6,r6,3
 800bb1c:	2804977a 	slli	r2,r5,29
 800bb20:	4809883a 	mov	r4,r9
 800bb24:	3825883a 	mov	r18,r7
 800bb28:	11a2b03a 	or	r17,r2,r6
 800bb2c:	8806d77a 	srli	r3,r17,29
 800bb30:	200890fa 	slli	r4,r4,3
 800bb34:	882290fa 	slli	r17,r17,3
 800bb38:	0401ffc4 	movi	r16,2047
 800bb3c:	1906b03a 	or	r3,r3,r4
 800bb40:	003e4406 	br	800b454 <__alt_data_end+0xfc00b454>
 800bb44:	2984b03a 	or	r2,r5,r6
 800bb48:	103e4226 	beq	r2,zero,800b454 <__alt_data_end+0xfc00b454>
 800bb4c:	8989c83a 	sub	r4,r17,r6
 800bb50:	8911803a 	cmpltu	r8,r17,r4
 800bb54:	1945c83a 	sub	r2,r3,r5
 800bb58:	1205c83a 	sub	r2,r2,r8
 800bb5c:	1200202c 	andhi	r8,r2,128
 800bb60:	403e9a26 	beq	r8,zero,800b5cc <__alt_data_end+0xfc00b5cc>
 800bb64:	3463c83a 	sub	r17,r6,r17
 800bb68:	28c5c83a 	sub	r2,r5,r3
 800bb6c:	344d803a 	cmpltu	r6,r6,r17
 800bb70:	1187c83a 	sub	r3,r2,r6
 800bb74:	3825883a 	mov	r18,r7
 800bb78:	003e3606 	br	800b454 <__alt_data_end+0xfc00b454>
 800bb7c:	0101ffc4 	movi	r4,2047
 800bb80:	493fc71e 	bne	r9,r4,800baa0 <__alt_data_end+0xfc00baa0>
 800bb84:	2807883a 	mov	r3,r5
 800bb88:	3023883a 	mov	r17,r6
 800bb8c:	4821883a 	mov	r16,r9
 800bb90:	003e3006 	br	800b454 <__alt_data_end+0xfc00b454>
 800bb94:	10003626 	beq	r2,zero,800bc70 <__subdf3+0x8a0>
 800bb98:	2984b03a 	or	r2,r5,r6
 800bb9c:	10001726 	beq	r2,zero,800bbfc <__subdf3+0x82c>
 800bba0:	1808d0fa 	srli	r4,r3,3
 800bba4:	8822d0fa 	srli	r17,r17,3
 800bba8:	1806977a 	slli	r3,r3,29
 800bbac:	2080022c 	andhi	r2,r4,8
 800bbb0:	1c62b03a 	or	r17,r3,r17
 800bbb4:	10000726 	beq	r2,zero,800bbd4 <__subdf3+0x804>
 800bbb8:	2812d0fa 	srli	r9,r5,3
 800bbbc:	4880022c 	andhi	r2,r9,8
 800bbc0:	1000041e 	bne	r2,zero,800bbd4 <__subdf3+0x804>
 800bbc4:	300cd0fa 	srli	r6,r6,3
 800bbc8:	2804977a 	slli	r2,r5,29
 800bbcc:	4809883a 	mov	r4,r9
 800bbd0:	11a2b03a 	or	r17,r2,r6
 800bbd4:	8806d77a 	srli	r3,r17,29
 800bbd8:	200890fa 	slli	r4,r4,3
 800bbdc:	882290fa 	slli	r17,r17,3
 800bbe0:	3825883a 	mov	r18,r7
 800bbe4:	1906b03a 	or	r3,r3,r4
 800bbe8:	0401ffc4 	movi	r16,2047
 800bbec:	003e1906 	br	800b454 <__alt_data_end+0xfc00b454>
 800bbf0:	000b883a 	mov	r5,zero
 800bbf4:	0005883a 	mov	r2,zero
 800bbf8:	003e2e06 	br	800b4b4 <__alt_data_end+0xfc00b4b4>
 800bbfc:	0401ffc4 	movi	r16,2047
 800bc00:	003e1406 	br	800b454 <__alt_data_end+0xfc00b454>
 800bc04:	0005883a 	mov	r2,zero
 800bc08:	003f7506 	br	800b9e0 <__alt_data_end+0xfc00b9e0>
 800bc0c:	0005883a 	mov	r2,zero
 800bc10:	0009883a 	mov	r4,zero
 800bc14:	003e7806 	br	800b5f8 <__alt_data_end+0xfc00b5f8>
 800bc18:	123ff804 	addi	r8,r2,-32
 800bc1c:	01000804 	movi	r4,32
 800bc20:	1a10d83a 	srl	r8,r3,r8
 800bc24:	11002526 	beq	r2,r4,800bcbc <__subdf3+0x8ec>
 800bc28:	01001004 	movi	r4,64
 800bc2c:	2085c83a 	sub	r2,r4,r2
 800bc30:	1884983a 	sll	r2,r3,r2
 800bc34:	1444b03a 	or	r2,r2,r17
 800bc38:	1004c03a 	cmpne	r2,r2,zero
 800bc3c:	40a2b03a 	or	r17,r8,r2
 800bc40:	0005883a 	mov	r2,zero
 800bc44:	003f1606 	br	800b8a0 <__alt_data_end+0xfc00b8a0>
 800bc48:	02000434 	movhi	r8,16
 800bc4c:	0009883a 	mov	r4,zero
 800bc50:	423fffc4 	addi	r8,r8,-1
 800bc54:	00bfffc4 	movi	r2,-1
 800bc58:	0401ffc4 	movi	r16,2047
 800bc5c:	003e6606 	br	800b5f8 <__alt_data_end+0xfc00b5f8>
 800bc60:	1c62b03a 	or	r17,r3,r17
 800bc64:	8822c03a 	cmpne	r17,r17,zero
 800bc68:	0005883a 	mov	r2,zero
 800bc6c:	003f9906 	br	800bad4 <__alt_data_end+0xfc00bad4>
 800bc70:	2807883a 	mov	r3,r5
 800bc74:	3023883a 	mov	r17,r6
 800bc78:	0401ffc4 	movi	r16,2047
 800bc7c:	003df506 	br	800b454 <__alt_data_end+0xfc00b454>
 800bc80:	2807883a 	mov	r3,r5
 800bc84:	3023883a 	mov	r17,r6
 800bc88:	003df206 	br	800b454 <__alt_data_end+0xfc00b454>
 800bc8c:	123ff804 	addi	r8,r2,-32
 800bc90:	01000804 	movi	r4,32
 800bc94:	1a10d83a 	srl	r8,r3,r8
 800bc98:	11000a26 	beq	r2,r4,800bcc4 <__subdf3+0x8f4>
 800bc9c:	01001004 	movi	r4,64
 800bca0:	2085c83a 	sub	r2,r4,r2
 800bca4:	1884983a 	sll	r2,r3,r2
 800bca8:	1444b03a 	or	r2,r2,r17
 800bcac:	1004c03a 	cmpne	r2,r2,zero
 800bcb0:	40a2b03a 	or	r17,r8,r2
 800bcb4:	0005883a 	mov	r2,zero
 800bcb8:	003f8606 	br	800bad4 <__alt_data_end+0xfc00bad4>
 800bcbc:	0005883a 	mov	r2,zero
 800bcc0:	003fdc06 	br	800bc34 <__alt_data_end+0xfc00bc34>
 800bcc4:	0005883a 	mov	r2,zero
 800bcc8:	003ff706 	br	800bca8 <__alt_data_end+0xfc00bca8>

0800bccc <__fixdfsi>:
 800bccc:	280cd53a 	srli	r6,r5,20
 800bcd0:	00c00434 	movhi	r3,16
 800bcd4:	18ffffc4 	addi	r3,r3,-1
 800bcd8:	3181ffcc 	andi	r6,r6,2047
 800bcdc:	01c0ff84 	movi	r7,1022
 800bce0:	28c6703a 	and	r3,r5,r3
 800bce4:	280ad7fa 	srli	r5,r5,31
 800bce8:	3980120e 	bge	r7,r6,800bd34 <__fixdfsi+0x68>
 800bcec:	00810744 	movi	r2,1053
 800bcf0:	11800c16 	blt	r2,r6,800bd24 <__fixdfsi+0x58>
 800bcf4:	00810cc4 	movi	r2,1075
 800bcf8:	1185c83a 	sub	r2,r2,r6
 800bcfc:	01c007c4 	movi	r7,31
 800bd00:	18c00434 	orhi	r3,r3,16
 800bd04:	38800d16 	blt	r7,r2,800bd3c <__fixdfsi+0x70>
 800bd08:	31befb44 	addi	r6,r6,-1043
 800bd0c:	2084d83a 	srl	r2,r4,r2
 800bd10:	1986983a 	sll	r3,r3,r6
 800bd14:	1884b03a 	or	r2,r3,r2
 800bd18:	28000726 	beq	r5,zero,800bd38 <__fixdfsi+0x6c>
 800bd1c:	0085c83a 	sub	r2,zero,r2
 800bd20:	f800283a 	ret
 800bd24:	00a00034 	movhi	r2,32768
 800bd28:	10bfffc4 	addi	r2,r2,-1
 800bd2c:	2885883a 	add	r2,r5,r2
 800bd30:	f800283a 	ret
 800bd34:	0005883a 	mov	r2,zero
 800bd38:	f800283a 	ret
 800bd3c:	008104c4 	movi	r2,1043
 800bd40:	1185c83a 	sub	r2,r2,r6
 800bd44:	1884d83a 	srl	r2,r3,r2
 800bd48:	003ff306 	br	800bd18 <__alt_data_end+0xfc00bd18>

0800bd4c <__floatsidf>:
 800bd4c:	defffd04 	addi	sp,sp,-12
 800bd50:	dfc00215 	stw	ra,8(sp)
 800bd54:	dc400115 	stw	r17,4(sp)
 800bd58:	dc000015 	stw	r16,0(sp)
 800bd5c:	20002b26 	beq	r4,zero,800be0c <__floatsidf+0xc0>
 800bd60:	2023883a 	mov	r17,r4
 800bd64:	2020d7fa 	srli	r16,r4,31
 800bd68:	20002d16 	blt	r4,zero,800be20 <__floatsidf+0xd4>
 800bd6c:	8809883a 	mov	r4,r17
 800bd70:	800bed00 	call	800bed0 <__clzsi2>
 800bd74:	01410784 	movi	r5,1054
 800bd78:	288bc83a 	sub	r5,r5,r2
 800bd7c:	01010cc4 	movi	r4,1075
 800bd80:	2149c83a 	sub	r4,r4,r5
 800bd84:	00c007c4 	movi	r3,31
 800bd88:	1900160e 	bge	r3,r4,800bde4 <__floatsidf+0x98>
 800bd8c:	00c104c4 	movi	r3,1043
 800bd90:	1947c83a 	sub	r3,r3,r5
 800bd94:	88c6983a 	sll	r3,r17,r3
 800bd98:	00800434 	movhi	r2,16
 800bd9c:	10bfffc4 	addi	r2,r2,-1
 800bda0:	1886703a 	and	r3,r3,r2
 800bda4:	2941ffcc 	andi	r5,r5,2047
 800bda8:	800d883a 	mov	r6,r16
 800bdac:	0005883a 	mov	r2,zero
 800bdb0:	280a953a 	slli	r5,r5,20
 800bdb4:	31803fcc 	andi	r6,r6,255
 800bdb8:	01000434 	movhi	r4,16
 800bdbc:	300c97fa 	slli	r6,r6,31
 800bdc0:	213fffc4 	addi	r4,r4,-1
 800bdc4:	1906703a 	and	r3,r3,r4
 800bdc8:	1946b03a 	or	r3,r3,r5
 800bdcc:	1986b03a 	or	r3,r3,r6
 800bdd0:	dfc00217 	ldw	ra,8(sp)
 800bdd4:	dc400117 	ldw	r17,4(sp)
 800bdd8:	dc000017 	ldw	r16,0(sp)
 800bddc:	dec00304 	addi	sp,sp,12
 800bde0:	f800283a 	ret
 800bde4:	00c002c4 	movi	r3,11
 800bde8:	1887c83a 	sub	r3,r3,r2
 800bdec:	88c6d83a 	srl	r3,r17,r3
 800bdf0:	8904983a 	sll	r2,r17,r4
 800bdf4:	01000434 	movhi	r4,16
 800bdf8:	213fffc4 	addi	r4,r4,-1
 800bdfc:	2941ffcc 	andi	r5,r5,2047
 800be00:	1906703a 	and	r3,r3,r4
 800be04:	800d883a 	mov	r6,r16
 800be08:	003fe906 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800be0c:	000d883a 	mov	r6,zero
 800be10:	000b883a 	mov	r5,zero
 800be14:	0007883a 	mov	r3,zero
 800be18:	0005883a 	mov	r2,zero
 800be1c:	003fe406 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800be20:	0123c83a 	sub	r17,zero,r4
 800be24:	003fd106 	br	800bd6c <__alt_data_end+0xfc00bd6c>

0800be28 <__floatunsidf>:
 800be28:	defffe04 	addi	sp,sp,-8
 800be2c:	dc000015 	stw	r16,0(sp)
 800be30:	dfc00115 	stw	ra,4(sp)
 800be34:	2021883a 	mov	r16,r4
 800be38:	20002226 	beq	r4,zero,800bec4 <__floatunsidf+0x9c>
 800be3c:	800bed00 	call	800bed0 <__clzsi2>
 800be40:	01010784 	movi	r4,1054
 800be44:	2089c83a 	sub	r4,r4,r2
 800be48:	01810cc4 	movi	r6,1075
 800be4c:	310dc83a 	sub	r6,r6,r4
 800be50:	00c007c4 	movi	r3,31
 800be54:	1980120e 	bge	r3,r6,800bea0 <__floatunsidf+0x78>
 800be58:	00c104c4 	movi	r3,1043
 800be5c:	1907c83a 	sub	r3,r3,r4
 800be60:	80ca983a 	sll	r5,r16,r3
 800be64:	00800434 	movhi	r2,16
 800be68:	10bfffc4 	addi	r2,r2,-1
 800be6c:	2101ffcc 	andi	r4,r4,2047
 800be70:	0021883a 	mov	r16,zero
 800be74:	288a703a 	and	r5,r5,r2
 800be78:	2008953a 	slli	r4,r4,20
 800be7c:	00c00434 	movhi	r3,16
 800be80:	18ffffc4 	addi	r3,r3,-1
 800be84:	28c6703a 	and	r3,r5,r3
 800be88:	8005883a 	mov	r2,r16
 800be8c:	1906b03a 	or	r3,r3,r4
 800be90:	dfc00117 	ldw	ra,4(sp)
 800be94:	dc000017 	ldw	r16,0(sp)
 800be98:	dec00204 	addi	sp,sp,8
 800be9c:	f800283a 	ret
 800bea0:	00c002c4 	movi	r3,11
 800bea4:	188bc83a 	sub	r5,r3,r2
 800bea8:	814ad83a 	srl	r5,r16,r5
 800beac:	00c00434 	movhi	r3,16
 800beb0:	18ffffc4 	addi	r3,r3,-1
 800beb4:	81a0983a 	sll	r16,r16,r6
 800beb8:	2101ffcc 	andi	r4,r4,2047
 800bebc:	28ca703a 	and	r5,r5,r3
 800bec0:	003fed06 	br	800be78 <__alt_data_end+0xfc00be78>
 800bec4:	0009883a 	mov	r4,zero
 800bec8:	000b883a 	mov	r5,zero
 800becc:	003fea06 	br	800be78 <__alt_data_end+0xfc00be78>

0800bed0 <__clzsi2>:
 800bed0:	00bfffd4 	movui	r2,65535
 800bed4:	11000536 	bltu	r2,r4,800beec <__clzsi2+0x1c>
 800bed8:	00803fc4 	movi	r2,255
 800bedc:	11000f36 	bltu	r2,r4,800bf1c <__clzsi2+0x4c>
 800bee0:	00800804 	movi	r2,32
 800bee4:	0007883a 	mov	r3,zero
 800bee8:	00000506 	br	800bf00 <__clzsi2+0x30>
 800beec:	00804034 	movhi	r2,256
 800bef0:	10bfffc4 	addi	r2,r2,-1
 800bef4:	11000c2e 	bgeu	r2,r4,800bf28 <__clzsi2+0x58>
 800bef8:	00800204 	movi	r2,8
 800befc:	00c00604 	movi	r3,24
 800bf00:	20c8d83a 	srl	r4,r4,r3
 800bf04:	00c20074 	movhi	r3,2049
 800bf08:	18f94304 	addi	r3,r3,-6900
 800bf0c:	1909883a 	add	r4,r3,r4
 800bf10:	20c00003 	ldbu	r3,0(r4)
 800bf14:	10c5c83a 	sub	r2,r2,r3
 800bf18:	f800283a 	ret
 800bf1c:	00800604 	movi	r2,24
 800bf20:	00c00204 	movi	r3,8
 800bf24:	003ff606 	br	800bf00 <__alt_data_end+0xfc00bf00>
 800bf28:	00800404 	movi	r2,16
 800bf2c:	1007883a 	mov	r3,r2
 800bf30:	003ff306 	br	800bf00 <__alt_data_end+0xfc00bf00>

0800bf34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800bf34:	defffc04 	addi	sp,sp,-16
 800bf38:	df000315 	stw	fp,12(sp)
 800bf3c:	df000304 	addi	fp,sp,12
 800bf40:	e13ffd15 	stw	r4,-12(fp)
 800bf44:	e17ffe15 	stw	r5,-8(fp)
 800bf48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800bf4c:	e0fffe17 	ldw	r3,-8(fp)
 800bf50:	e0bffd17 	ldw	r2,-12(fp)
 800bf54:	18800c26 	beq	r3,r2,800bf88 <alt_load_section+0x54>
  {
    while( to != end )
 800bf58:	00000806 	br	800bf7c <alt_load_section+0x48>
    {
      *to++ = *from++;
 800bf5c:	e0bffe17 	ldw	r2,-8(fp)
 800bf60:	10c00104 	addi	r3,r2,4
 800bf64:	e0fffe15 	stw	r3,-8(fp)
 800bf68:	e0fffd17 	ldw	r3,-12(fp)
 800bf6c:	19000104 	addi	r4,r3,4
 800bf70:	e13ffd15 	stw	r4,-12(fp)
 800bf74:	18c00017 	ldw	r3,0(r3)
 800bf78:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800bf7c:	e0fffe17 	ldw	r3,-8(fp)
 800bf80:	e0bfff17 	ldw	r2,-4(fp)
 800bf84:	18bff51e 	bne	r3,r2,800bf5c <__alt_data_end+0xfc00bf5c>
    {
      *to++ = *from++;
    }
  }
}
 800bf88:	0001883a 	nop
 800bf8c:	e037883a 	mov	sp,fp
 800bf90:	df000017 	ldw	fp,0(sp)
 800bf94:	dec00104 	addi	sp,sp,4
 800bf98:	f800283a 	ret

0800bf9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800bf9c:	defffe04 	addi	sp,sp,-8
 800bfa0:	dfc00115 	stw	ra,4(sp)
 800bfa4:	df000015 	stw	fp,0(sp)
 800bfa8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800bfac:	01820074 	movhi	r6,2049
 800bfb0:	31810404 	addi	r6,r6,1040
 800bfb4:	01420074 	movhi	r5,2049
 800bfb8:	29799004 	addi	r5,r5,-6592
 800bfbc:	01020074 	movhi	r4,2049
 800bfc0:	21010404 	addi	r4,r4,1040
 800bfc4:	800bf340 	call	800bf34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800bfc8:	01820034 	movhi	r6,2048
 800bfcc:	31808c04 	addi	r6,r6,560
 800bfd0:	01420034 	movhi	r5,2048
 800bfd4:	29400804 	addi	r5,r5,32
 800bfd8:	01020034 	movhi	r4,2048
 800bfdc:	21000804 	addi	r4,r4,32
 800bfe0:	800bf340 	call	800bf34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800bfe4:	01820074 	movhi	r6,2049
 800bfe8:	31b99004 	addi	r6,r6,-6592
 800bfec:	01420074 	movhi	r5,2049
 800bff0:	2978bc04 	addi	r5,r5,-7440
 800bff4:	01020074 	movhi	r4,2049
 800bff8:	2138bc04 	addi	r4,r4,-7440
 800bffc:	800bf340 	call	800bf34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800c000:	800d1880 	call	800d188 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800c004:	800d3740 	call	800d374 <alt_icache_flush_all>
}
 800c008:	0001883a 	nop
 800c00c:	e037883a 	mov	sp,fp
 800c010:	dfc00117 	ldw	ra,4(sp)
 800c014:	df000017 	ldw	fp,0(sp)
 800c018:	dec00204 	addi	sp,sp,8
 800c01c:	f800283a 	ret

0800c020 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800c020:	defffd04 	addi	sp,sp,-12
 800c024:	dfc00215 	stw	ra,8(sp)
 800c028:	df000115 	stw	fp,4(sp)
 800c02c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800c030:	0009883a 	mov	r4,zero
 800c034:	800c1f80 	call	800c1f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800c038:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800c03c:	800c2300 	call	800c230 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800c040:	01820074 	movhi	r6,2049
 800c044:	31b98304 	addi	r6,r6,-6644
 800c048:	01420074 	movhi	r5,2049
 800c04c:	29798304 	addi	r5,r5,-6644
 800c050:	01020074 	movhi	r4,2049
 800c054:	21398304 	addi	r4,r4,-6644
 800c058:	800d7180 	call	800d718 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800c05c:	800d2b40 	call	800d2b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800c060:	01020074 	movhi	r4,2049
 800c064:	2134c504 	addi	r4,r4,-11500
 800c068:	800df5c0 	call	800df5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800c06c:	d0a78c17 	ldw	r2,-25040(gp)
 800c070:	d0e78d17 	ldw	r3,-25036(gp)
 800c074:	d1278e17 	ldw	r4,-25032(gp)
 800c078:	200d883a 	mov	r6,r4
 800c07c:	180b883a 	mov	r5,r3
 800c080:	1009883a 	mov	r4,r2
 800c084:	800085c0 	call	800085c <main>
 800c088:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800c08c:	01000044 	movi	r4,1
 800c090:	800d0b00 	call	800d0b0 <close>
  exit (result);
 800c094:	e13fff17 	ldw	r4,-4(fp)
 800c098:	800df700 	call	800df70 <exit>

0800c09c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800c09c:	defffe04 	addi	sp,sp,-8
 800c0a0:	df000115 	stw	fp,4(sp)
 800c0a4:	df000104 	addi	fp,sp,4
 800c0a8:	e13fff15 	stw	r4,-4(fp)
}
 800c0ac:	0001883a 	nop
 800c0b0:	e037883a 	mov	sp,fp
 800c0b4:	df000017 	ldw	fp,0(sp)
 800c0b8:	dec00104 	addi	sp,sp,4
 800c0bc:	f800283a 	ret

0800c0c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800c0c0:	defffe04 	addi	sp,sp,-8
 800c0c4:	df000115 	stw	fp,4(sp)
 800c0c8:	df000104 	addi	fp,sp,4
 800c0cc:	e13fff15 	stw	r4,-4(fp)
}
 800c0d0:	0001883a 	nop
 800c0d4:	e037883a 	mov	sp,fp
 800c0d8:	df000017 	ldw	fp,0(sp)
 800c0dc:	dec00104 	addi	sp,sp,4
 800c0e0:	f800283a 	ret

0800c0e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800c0e4:	defff904 	addi	sp,sp,-28
 800c0e8:	df000615 	stw	fp,24(sp)
 800c0ec:	df000604 	addi	fp,sp,24
 800c0f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c0f4:	0005303a 	rdctl	r2,status
 800c0f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c0fc:	e0fffe17 	ldw	r3,-8(fp)
 800c100:	00bfff84 	movi	r2,-2
 800c104:	1884703a 	and	r2,r3,r2
 800c108:	1001703a 	wrctl	status,r2
  
  return context;
 800c10c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800c110:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800c114:	d0a00717 	ldw	r2,-32740(gp)
 800c118:	10c000c4 	addi	r3,r2,3
 800c11c:	00bfff04 	movi	r2,-4
 800c120:	1884703a 	and	r2,r3,r2
 800c124:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800c128:	d0e00717 	ldw	r3,-32740(gp)
 800c12c:	e0bfff17 	ldw	r2,-4(fp)
 800c130:	1887883a 	add	r3,r3,r2
 800c134:	00830034 	movhi	r2,3072
 800c138:	10800004 	addi	r2,r2,0
 800c13c:	10c0062e 	bgeu	r2,r3,800c158 <sbrk+0x74>
 800c140:	e0bffb17 	ldw	r2,-20(fp)
 800c144:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c148:	e0bffa17 	ldw	r2,-24(fp)
 800c14c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800c150:	00bfffc4 	movi	r2,-1
 800c154:	00000b06 	br	800c184 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800c158:	d0a00717 	ldw	r2,-32740(gp)
 800c15c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800c160:	d0e00717 	ldw	r3,-32740(gp)
 800c164:	e0bfff17 	ldw	r2,-4(fp)
 800c168:	1885883a 	add	r2,r3,r2
 800c16c:	d0a00715 	stw	r2,-32740(gp)
 800c170:	e0bffb17 	ldw	r2,-20(fp)
 800c174:	e0bffc15 	stw	r2,-16(fp)
 800c178:	e0bffc17 	ldw	r2,-16(fp)
 800c17c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800c180:	e0bffd17 	ldw	r2,-12(fp)
} 
 800c184:	e037883a 	mov	sp,fp
 800c188:	df000017 	ldw	fp,0(sp)
 800c18c:	dec00104 	addi	sp,sp,4
 800c190:	f800283a 	ret

0800c194 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800c194:	defffd04 	addi	sp,sp,-12
 800c198:	dfc00215 	stw	ra,8(sp)
 800c19c:	df000115 	stw	fp,4(sp)
 800c1a0:	df000104 	addi	fp,sp,4
 800c1a4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800c1a8:	e13fff17 	ldw	r4,-4(fp)
 800c1ac:	800cf1c0 	call	800cf1c <alt_busy_sleep>
}
 800c1b0:	e037883a 	mov	sp,fp
 800c1b4:	dfc00117 	ldw	ra,4(sp)
 800c1b8:	df000017 	ldw	fp,0(sp)
 800c1bc:	dec00204 	addi	sp,sp,8
 800c1c0:	f800283a 	ret

0800c1c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800c1c4:	defffd04 	addi	sp,sp,-12
 800c1c8:	dfc00215 	stw	ra,8(sp)
 800c1cc:	df000115 	stw	fp,4(sp)
 800c1d0:	df000104 	addi	fp,sp,4
 800c1d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800c1d8:	d1600a04 	addi	r5,gp,-32728
 800c1dc:	e13fff17 	ldw	r4,-4(fp)
 800c1e0:	800d2100 	call	800d210 <alt_dev_llist_insert>
}
 800c1e4:	e037883a 	mov	sp,fp
 800c1e8:	dfc00117 	ldw	ra,4(sp)
 800c1ec:	df000017 	ldw	fp,0(sp)
 800c1f0:	dec00204 	addi	sp,sp,8
 800c1f4:	f800283a 	ret

0800c1f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800c1f8:	defffd04 	addi	sp,sp,-12
 800c1fc:	dfc00215 	stw	ra,8(sp)
 800c200:	df000115 	stw	fp,4(sp)
 800c204:	df000104 	addi	fp,sp,4
 800c208:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800c20c:	800dc400 	call	800dc40 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800c210:	00800044 	movi	r2,1
 800c214:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800c218:	0001883a 	nop
 800c21c:	e037883a 	mov	sp,fp
 800c220:	dfc00117 	ldw	ra,4(sp)
 800c224:	df000017 	ldw	fp,0(sp)
 800c228:	dec00204 	addi	sp,sp,8
 800c22c:	f800283a 	ret

0800c230 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800c230:	defffe04 	addi	sp,sp,-8
 800c234:	dfc00115 	stw	ra,4(sp)
 800c238:	df000015 	stw	fp,0(sp)
 800c23c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800c240:	01c0fa04 	movi	r7,1000
 800c244:	01800084 	movi	r6,2
 800c248:	000b883a 	mov	r5,zero
 800c24c:	01002004 	movi	r4,128
 800c250:	800cd740 	call	800cd74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800c254:	01800044 	movi	r6,1
 800c258:	000b883a 	mov	r5,zero
 800c25c:	01020074 	movhi	r4,2049
 800c260:	213c7b04 	addi	r4,r4,-3604
 800c264:	800c3f80 	call	800c3f8 <altera_avalon_jtag_uart_init>
 800c268:	01020074 	movhi	r4,2049
 800c26c:	213c7104 	addi	r4,r4,-3644
 800c270:	800c1c40 	call	800c1c4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800c274:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800c278:	0001883a 	nop
}
 800c27c:	0001883a 	nop
 800c280:	e037883a 	mov	sp,fp
 800c284:	dfc00117 	ldw	ra,4(sp)
 800c288:	df000017 	ldw	fp,0(sp)
 800c28c:	dec00204 	addi	sp,sp,8
 800c290:	f800283a 	ret

0800c294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800c294:	defffa04 	addi	sp,sp,-24
 800c298:	dfc00515 	stw	ra,20(sp)
 800c29c:	df000415 	stw	fp,16(sp)
 800c2a0:	df000404 	addi	fp,sp,16
 800c2a4:	e13ffd15 	stw	r4,-12(fp)
 800c2a8:	e17ffe15 	stw	r5,-8(fp)
 800c2ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c2b0:	e0bffd17 	ldw	r2,-12(fp)
 800c2b4:	10800017 	ldw	r2,0(r2)
 800c2b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800c2bc:	e0bffc17 	ldw	r2,-16(fp)
 800c2c0:	10c00a04 	addi	r3,r2,40
 800c2c4:	e0bffd17 	ldw	r2,-12(fp)
 800c2c8:	10800217 	ldw	r2,8(r2)
 800c2cc:	100f883a 	mov	r7,r2
 800c2d0:	e1bfff17 	ldw	r6,-4(fp)
 800c2d4:	e17ffe17 	ldw	r5,-8(fp)
 800c2d8:	1809883a 	mov	r4,r3
 800c2dc:	800c8bc0 	call	800c8bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800c2e0:	e037883a 	mov	sp,fp
 800c2e4:	dfc00117 	ldw	ra,4(sp)
 800c2e8:	df000017 	ldw	fp,0(sp)
 800c2ec:	dec00204 	addi	sp,sp,8
 800c2f0:	f800283a 	ret

0800c2f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800c2f4:	defffa04 	addi	sp,sp,-24
 800c2f8:	dfc00515 	stw	ra,20(sp)
 800c2fc:	df000415 	stw	fp,16(sp)
 800c300:	df000404 	addi	fp,sp,16
 800c304:	e13ffd15 	stw	r4,-12(fp)
 800c308:	e17ffe15 	stw	r5,-8(fp)
 800c30c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c310:	e0bffd17 	ldw	r2,-12(fp)
 800c314:	10800017 	ldw	r2,0(r2)
 800c318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800c31c:	e0bffc17 	ldw	r2,-16(fp)
 800c320:	10c00a04 	addi	r3,r2,40
 800c324:	e0bffd17 	ldw	r2,-12(fp)
 800c328:	10800217 	ldw	r2,8(r2)
 800c32c:	100f883a 	mov	r7,r2
 800c330:	e1bfff17 	ldw	r6,-4(fp)
 800c334:	e17ffe17 	ldw	r5,-8(fp)
 800c338:	1809883a 	mov	r4,r3
 800c33c:	800cad80 	call	800cad8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800c340:	e037883a 	mov	sp,fp
 800c344:	dfc00117 	ldw	ra,4(sp)
 800c348:	df000017 	ldw	fp,0(sp)
 800c34c:	dec00204 	addi	sp,sp,8
 800c350:	f800283a 	ret

0800c354 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800c354:	defffc04 	addi	sp,sp,-16
 800c358:	dfc00315 	stw	ra,12(sp)
 800c35c:	df000215 	stw	fp,8(sp)
 800c360:	df000204 	addi	fp,sp,8
 800c364:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c368:	e0bfff17 	ldw	r2,-4(fp)
 800c36c:	10800017 	ldw	r2,0(r2)
 800c370:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800c374:	e0bffe17 	ldw	r2,-8(fp)
 800c378:	10c00a04 	addi	r3,r2,40
 800c37c:	e0bfff17 	ldw	r2,-4(fp)
 800c380:	10800217 	ldw	r2,8(r2)
 800c384:	100b883a 	mov	r5,r2
 800c388:	1809883a 	mov	r4,r3
 800c38c:	800c7640 	call	800c764 <altera_avalon_jtag_uart_close>
}
 800c390:	e037883a 	mov	sp,fp
 800c394:	dfc00117 	ldw	ra,4(sp)
 800c398:	df000017 	ldw	fp,0(sp)
 800c39c:	dec00204 	addi	sp,sp,8
 800c3a0:	f800283a 	ret

0800c3a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800c3a4:	defffa04 	addi	sp,sp,-24
 800c3a8:	dfc00515 	stw	ra,20(sp)
 800c3ac:	df000415 	stw	fp,16(sp)
 800c3b0:	df000404 	addi	fp,sp,16
 800c3b4:	e13ffd15 	stw	r4,-12(fp)
 800c3b8:	e17ffe15 	stw	r5,-8(fp)
 800c3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800c3c0:	e0bffd17 	ldw	r2,-12(fp)
 800c3c4:	10800017 	ldw	r2,0(r2)
 800c3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800c3cc:	e0bffc17 	ldw	r2,-16(fp)
 800c3d0:	10800a04 	addi	r2,r2,40
 800c3d4:	e1bfff17 	ldw	r6,-4(fp)
 800c3d8:	e17ffe17 	ldw	r5,-8(fp)
 800c3dc:	1009883a 	mov	r4,r2
 800c3e0:	800c7cc0 	call	800c7cc <altera_avalon_jtag_uart_ioctl>
}
 800c3e4:	e037883a 	mov	sp,fp
 800c3e8:	dfc00117 	ldw	ra,4(sp)
 800c3ec:	df000017 	ldw	fp,0(sp)
 800c3f0:	dec00204 	addi	sp,sp,8
 800c3f4:	f800283a 	ret

0800c3f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800c3f8:	defffa04 	addi	sp,sp,-24
 800c3fc:	dfc00515 	stw	ra,20(sp)
 800c400:	df000415 	stw	fp,16(sp)
 800c404:	df000404 	addi	fp,sp,16
 800c408:	e13ffd15 	stw	r4,-12(fp)
 800c40c:	e17ffe15 	stw	r5,-8(fp)
 800c410:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c414:	e0bffd17 	ldw	r2,-12(fp)
 800c418:	00c00044 	movi	r3,1
 800c41c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800c420:	e0bffd17 	ldw	r2,-12(fp)
 800c424:	10800017 	ldw	r2,0(r2)
 800c428:	10800104 	addi	r2,r2,4
 800c42c:	1007883a 	mov	r3,r2
 800c430:	e0bffd17 	ldw	r2,-12(fp)
 800c434:	10800817 	ldw	r2,32(r2)
 800c438:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800c43c:	e0bffe17 	ldw	r2,-8(fp)
 800c440:	e0ffff17 	ldw	r3,-4(fp)
 800c444:	d8000015 	stw	zero,0(sp)
 800c448:	e1fffd17 	ldw	r7,-12(fp)
 800c44c:	01820074 	movhi	r6,2049
 800c450:	31b12e04 	addi	r6,r6,-15176
 800c454:	180b883a 	mov	r5,r3
 800c458:	1009883a 	mov	r4,r2
 800c45c:	800d3940 	call	800d394 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800c460:	e0bffd17 	ldw	r2,-12(fp)
 800c464:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800c468:	e0bffd17 	ldw	r2,-12(fp)
 800c46c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800c470:	d0e79017 	ldw	r3,-25024(gp)
 800c474:	e1fffd17 	ldw	r7,-12(fp)
 800c478:	01820074 	movhi	r6,2049
 800c47c:	31b1b104 	addi	r6,r6,-14652
 800c480:	180b883a 	mov	r5,r3
 800c484:	1009883a 	mov	r4,r2
 800c488:	800cdf00 	call	800cdf0 <alt_alarm_start>
 800c48c:	1000040e 	bge	r2,zero,800c4a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800c490:	e0fffd17 	ldw	r3,-12(fp)
 800c494:	00a00034 	movhi	r2,32768
 800c498:	10bfffc4 	addi	r2,r2,-1
 800c49c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800c4a0:	0001883a 	nop
 800c4a4:	e037883a 	mov	sp,fp
 800c4a8:	dfc00117 	ldw	ra,4(sp)
 800c4ac:	df000017 	ldw	fp,0(sp)
 800c4b0:	dec00204 	addi	sp,sp,8
 800c4b4:	f800283a 	ret

0800c4b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800c4b8:	defff804 	addi	sp,sp,-32
 800c4bc:	df000715 	stw	fp,28(sp)
 800c4c0:	df000704 	addi	fp,sp,28
 800c4c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800c4c8:	e0bfff17 	ldw	r2,-4(fp)
 800c4cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800c4d0:	e0bffb17 	ldw	r2,-20(fp)
 800c4d4:	10800017 	ldw	r2,0(r2)
 800c4d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c4dc:	e0bffc17 	ldw	r2,-16(fp)
 800c4e0:	10800104 	addi	r2,r2,4
 800c4e4:	10800037 	ldwio	r2,0(r2)
 800c4e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800c4ec:	e0bffd17 	ldw	r2,-12(fp)
 800c4f0:	1080c00c 	andi	r2,r2,768
 800c4f4:	10006d26 	beq	r2,zero,800c6ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800c4f8:	e0bffd17 	ldw	r2,-12(fp)
 800c4fc:	1080400c 	andi	r2,r2,256
 800c500:	10003526 	beq	r2,zero,800c5d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800c504:	00800074 	movhi	r2,1
 800c508:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c50c:	e0bffb17 	ldw	r2,-20(fp)
 800c510:	10800a17 	ldw	r2,40(r2)
 800c514:	10800044 	addi	r2,r2,1
 800c518:	1081ffcc 	andi	r2,r2,2047
 800c51c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800c520:	e0bffb17 	ldw	r2,-20(fp)
 800c524:	10c00b17 	ldw	r3,44(r2)
 800c528:	e0bffe17 	ldw	r2,-8(fp)
 800c52c:	18801526 	beq	r3,r2,800c584 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800c530:	e0bffc17 	ldw	r2,-16(fp)
 800c534:	10800037 	ldwio	r2,0(r2)
 800c538:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800c53c:	e0bff917 	ldw	r2,-28(fp)
 800c540:	10a0000c 	andi	r2,r2,32768
 800c544:	10001126 	beq	r2,zero,800c58c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800c548:	e0bffb17 	ldw	r2,-20(fp)
 800c54c:	10800a17 	ldw	r2,40(r2)
 800c550:	e0fff917 	ldw	r3,-28(fp)
 800c554:	1809883a 	mov	r4,r3
 800c558:	e0fffb17 	ldw	r3,-20(fp)
 800c55c:	1885883a 	add	r2,r3,r2
 800c560:	10800e04 	addi	r2,r2,56
 800c564:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c568:	e0bffb17 	ldw	r2,-20(fp)
 800c56c:	10800a17 	ldw	r2,40(r2)
 800c570:	10800044 	addi	r2,r2,1
 800c574:	10c1ffcc 	andi	r3,r2,2047
 800c578:	e0bffb17 	ldw	r2,-20(fp)
 800c57c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800c580:	003fe206 	br	800c50c <__alt_data_end+0xfc00c50c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800c584:	0001883a 	nop
 800c588:	00000106 	br	800c590 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800c58c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c590:	e0bff917 	ldw	r2,-28(fp)
 800c594:	10bfffec 	andhi	r2,r2,65535
 800c598:	10000f26 	beq	r2,zero,800c5d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c59c:	e0bffb17 	ldw	r2,-20(fp)
 800c5a0:	10c00817 	ldw	r3,32(r2)
 800c5a4:	00bfff84 	movi	r2,-2
 800c5a8:	1886703a 	and	r3,r3,r2
 800c5ac:	e0bffb17 	ldw	r2,-20(fp)
 800c5b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c5b4:	e0bffc17 	ldw	r2,-16(fp)
 800c5b8:	10800104 	addi	r2,r2,4
 800c5bc:	1007883a 	mov	r3,r2
 800c5c0:	e0bffb17 	ldw	r2,-20(fp)
 800c5c4:	10800817 	ldw	r2,32(r2)
 800c5c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c5cc:	e0bffc17 	ldw	r2,-16(fp)
 800c5d0:	10800104 	addi	r2,r2,4
 800c5d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c5d8:	e0bffd17 	ldw	r2,-12(fp)
 800c5dc:	1080800c 	andi	r2,r2,512
 800c5e0:	103fbe26 	beq	r2,zero,800c4dc <__alt_data_end+0xfc00c4dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c5e4:	e0bffd17 	ldw	r2,-12(fp)
 800c5e8:	1004d43a 	srli	r2,r2,16
 800c5ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c5f0:	00001406 	br	800c644 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c5f4:	e0bffc17 	ldw	r2,-16(fp)
 800c5f8:	e0fffb17 	ldw	r3,-20(fp)
 800c5fc:	18c00d17 	ldw	r3,52(r3)
 800c600:	e13ffb17 	ldw	r4,-20(fp)
 800c604:	20c7883a 	add	r3,r4,r3
 800c608:	18c20e04 	addi	r3,r3,2104
 800c60c:	18c00003 	ldbu	r3,0(r3)
 800c610:	18c03fcc 	andi	r3,r3,255
 800c614:	18c0201c 	xori	r3,r3,128
 800c618:	18ffe004 	addi	r3,r3,-128
 800c61c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c620:	e0bffb17 	ldw	r2,-20(fp)
 800c624:	10800d17 	ldw	r2,52(r2)
 800c628:	10800044 	addi	r2,r2,1
 800c62c:	10c1ffcc 	andi	r3,r2,2047
 800c630:	e0bffb17 	ldw	r2,-20(fp)
 800c634:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c638:	e0bffa17 	ldw	r2,-24(fp)
 800c63c:	10bfffc4 	addi	r2,r2,-1
 800c640:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c644:	e0bffa17 	ldw	r2,-24(fp)
 800c648:	10000526 	beq	r2,zero,800c660 <altera_avalon_jtag_uart_irq+0x1a8>
 800c64c:	e0bffb17 	ldw	r2,-20(fp)
 800c650:	10c00d17 	ldw	r3,52(r2)
 800c654:	e0bffb17 	ldw	r2,-20(fp)
 800c658:	10800c17 	ldw	r2,48(r2)
 800c65c:	18bfe51e 	bne	r3,r2,800c5f4 <__alt_data_end+0xfc00c5f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800c660:	e0bffa17 	ldw	r2,-24(fp)
 800c664:	103f9d26 	beq	r2,zero,800c4dc <__alt_data_end+0xfc00c4dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c668:	e0bffb17 	ldw	r2,-20(fp)
 800c66c:	10c00817 	ldw	r3,32(r2)
 800c670:	00bfff44 	movi	r2,-3
 800c674:	1886703a 	and	r3,r3,r2
 800c678:	e0bffb17 	ldw	r2,-20(fp)
 800c67c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c680:	e0bffb17 	ldw	r2,-20(fp)
 800c684:	10800017 	ldw	r2,0(r2)
 800c688:	10800104 	addi	r2,r2,4
 800c68c:	1007883a 	mov	r3,r2
 800c690:	e0bffb17 	ldw	r2,-20(fp)
 800c694:	10800817 	ldw	r2,32(r2)
 800c698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c69c:	e0bffc17 	ldw	r2,-16(fp)
 800c6a0:	10800104 	addi	r2,r2,4
 800c6a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800c6a8:	003f8c06 	br	800c4dc <__alt_data_end+0xfc00c4dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800c6ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800c6b0:	0001883a 	nop
 800c6b4:	e037883a 	mov	sp,fp
 800c6b8:	df000017 	ldw	fp,0(sp)
 800c6bc:	dec00104 	addi	sp,sp,4
 800c6c0:	f800283a 	ret

0800c6c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c6c4:	defff804 	addi	sp,sp,-32
 800c6c8:	df000715 	stw	fp,28(sp)
 800c6cc:	df000704 	addi	fp,sp,28
 800c6d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c6d4:	e0bffb17 	ldw	r2,-20(fp)
 800c6d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c6dc:	e0bff917 	ldw	r2,-28(fp)
 800c6e0:	10800017 	ldw	r2,0(r2)
 800c6e4:	10800104 	addi	r2,r2,4
 800c6e8:	10800037 	ldwio	r2,0(r2)
 800c6ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c6f0:	e0bffa17 	ldw	r2,-24(fp)
 800c6f4:	1081000c 	andi	r2,r2,1024
 800c6f8:	10000b26 	beq	r2,zero,800c728 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c6fc:	e0bff917 	ldw	r2,-28(fp)
 800c700:	10800017 	ldw	r2,0(r2)
 800c704:	10800104 	addi	r2,r2,4
 800c708:	1007883a 	mov	r3,r2
 800c70c:	e0bff917 	ldw	r2,-28(fp)
 800c710:	10800817 	ldw	r2,32(r2)
 800c714:	10810014 	ori	r2,r2,1024
 800c718:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c71c:	e0bff917 	ldw	r2,-28(fp)
 800c720:	10000915 	stw	zero,36(r2)
 800c724:	00000a06 	br	800c750 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c728:	e0bff917 	ldw	r2,-28(fp)
 800c72c:	10c00917 	ldw	r3,36(r2)
 800c730:	00a00034 	movhi	r2,32768
 800c734:	10bfff04 	addi	r2,r2,-4
 800c738:	10c00536 	bltu	r2,r3,800c750 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c73c:	e0bff917 	ldw	r2,-28(fp)
 800c740:	10800917 	ldw	r2,36(r2)
 800c744:	10c00044 	addi	r3,r2,1
 800c748:	e0bff917 	ldw	r2,-28(fp)
 800c74c:	10c00915 	stw	r3,36(r2)
 800c750:	d0a79017 	ldw	r2,-25024(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c754:	e037883a 	mov	sp,fp
 800c758:	df000017 	ldw	fp,0(sp)
 800c75c:	dec00104 	addi	sp,sp,4
 800c760:	f800283a 	ret

0800c764 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c764:	defffd04 	addi	sp,sp,-12
 800c768:	df000215 	stw	fp,8(sp)
 800c76c:	df000204 	addi	fp,sp,8
 800c770:	e13ffe15 	stw	r4,-8(fp)
 800c774:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c778:	00000506 	br	800c790 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c77c:	e0bfff17 	ldw	r2,-4(fp)
 800c780:	1090000c 	andi	r2,r2,16384
 800c784:	10000226 	beq	r2,zero,800c790 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c788:	00bffd44 	movi	r2,-11
 800c78c:	00000b06 	br	800c7bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c790:	e0bffe17 	ldw	r2,-8(fp)
 800c794:	10c00d17 	ldw	r3,52(r2)
 800c798:	e0bffe17 	ldw	r2,-8(fp)
 800c79c:	10800c17 	ldw	r2,48(r2)
 800c7a0:	18800526 	beq	r3,r2,800c7b8 <altera_avalon_jtag_uart_close+0x54>
 800c7a4:	e0bffe17 	ldw	r2,-8(fp)
 800c7a8:	10c00917 	ldw	r3,36(r2)
 800c7ac:	e0bffe17 	ldw	r2,-8(fp)
 800c7b0:	10800117 	ldw	r2,4(r2)
 800c7b4:	18bff136 	bltu	r3,r2,800c77c <__alt_data_end+0xfc00c77c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c7b8:	0005883a 	mov	r2,zero
}
 800c7bc:	e037883a 	mov	sp,fp
 800c7c0:	df000017 	ldw	fp,0(sp)
 800c7c4:	dec00104 	addi	sp,sp,4
 800c7c8:	f800283a 	ret

0800c7cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c7cc:	defffa04 	addi	sp,sp,-24
 800c7d0:	df000515 	stw	fp,20(sp)
 800c7d4:	df000504 	addi	fp,sp,20
 800c7d8:	e13ffd15 	stw	r4,-12(fp)
 800c7dc:	e17ffe15 	stw	r5,-8(fp)
 800c7e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c7e4:	00bff9c4 	movi	r2,-25
 800c7e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c7ec:	e0bffe17 	ldw	r2,-8(fp)
 800c7f0:	10da8060 	cmpeqi	r3,r2,27137
 800c7f4:	1800031e 	bne	r3,zero,800c804 <altera_avalon_jtag_uart_ioctl+0x38>
 800c7f8:	109a80a0 	cmpeqi	r2,r2,27138
 800c7fc:	1000181e 	bne	r2,zero,800c860 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800c800:	00002906 	br	800c8a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c804:	e0bffd17 	ldw	r2,-12(fp)
 800c808:	10c00117 	ldw	r3,4(r2)
 800c80c:	00a00034 	movhi	r2,32768
 800c810:	10bfffc4 	addi	r2,r2,-1
 800c814:	18802126 	beq	r3,r2,800c89c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800c818:	e0bfff17 	ldw	r2,-4(fp)
 800c81c:	10800017 	ldw	r2,0(r2)
 800c820:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c824:	e0bffc17 	ldw	r2,-16(fp)
 800c828:	10800090 	cmplti	r2,r2,2
 800c82c:	1000061e 	bne	r2,zero,800c848 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c830:	e0fffc17 	ldw	r3,-16(fp)
 800c834:	00a00034 	movhi	r2,32768
 800c838:	10bfffc4 	addi	r2,r2,-1
 800c83c:	18800226 	beq	r3,r2,800c848 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c840:	e0bffc17 	ldw	r2,-16(fp)
 800c844:	00000206 	br	800c850 <altera_avalon_jtag_uart_ioctl+0x84>
 800c848:	00a00034 	movhi	r2,32768
 800c84c:	10bfff84 	addi	r2,r2,-2
 800c850:	e0fffd17 	ldw	r3,-12(fp)
 800c854:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c858:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c85c:	00000f06 	br	800c89c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c860:	e0bffd17 	ldw	r2,-12(fp)
 800c864:	10c00117 	ldw	r3,4(r2)
 800c868:	00a00034 	movhi	r2,32768
 800c86c:	10bfffc4 	addi	r2,r2,-1
 800c870:	18800c26 	beq	r3,r2,800c8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c874:	e0bffd17 	ldw	r2,-12(fp)
 800c878:	10c00917 	ldw	r3,36(r2)
 800c87c:	e0bffd17 	ldw	r2,-12(fp)
 800c880:	10800117 	ldw	r2,4(r2)
 800c884:	1885803a 	cmpltu	r2,r3,r2
 800c888:	10c03fcc 	andi	r3,r2,255
 800c88c:	e0bfff17 	ldw	r2,-4(fp)
 800c890:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c898:	00000206 	br	800c8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c89c:	0001883a 	nop
 800c8a0:	00000106 	br	800c8a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c8a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c8a8:	e0bffb17 	ldw	r2,-20(fp)
}
 800c8ac:	e037883a 	mov	sp,fp
 800c8b0:	df000017 	ldw	fp,0(sp)
 800c8b4:	dec00104 	addi	sp,sp,4
 800c8b8:	f800283a 	ret

0800c8bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c8bc:	defff304 	addi	sp,sp,-52
 800c8c0:	dfc00c15 	stw	ra,48(sp)
 800c8c4:	df000b15 	stw	fp,44(sp)
 800c8c8:	df000b04 	addi	fp,sp,44
 800c8cc:	e13ffc15 	stw	r4,-16(fp)
 800c8d0:	e17ffd15 	stw	r5,-12(fp)
 800c8d4:	e1bffe15 	stw	r6,-8(fp)
 800c8d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c8dc:	e0bffd17 	ldw	r2,-12(fp)
 800c8e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c8e4:	00004706 	br	800ca04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c8e8:	e0bffc17 	ldw	r2,-16(fp)
 800c8ec:	10800a17 	ldw	r2,40(r2)
 800c8f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c8f4:	e0bffc17 	ldw	r2,-16(fp)
 800c8f8:	10800b17 	ldw	r2,44(r2)
 800c8fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c900:	e0fff717 	ldw	r3,-36(fp)
 800c904:	e0bff817 	ldw	r2,-32(fp)
 800c908:	18800536 	bltu	r3,r2,800c920 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c90c:	e0fff717 	ldw	r3,-36(fp)
 800c910:	e0bff817 	ldw	r2,-32(fp)
 800c914:	1885c83a 	sub	r2,r3,r2
 800c918:	e0bff615 	stw	r2,-40(fp)
 800c91c:	00000406 	br	800c930 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c920:	00c20004 	movi	r3,2048
 800c924:	e0bff817 	ldw	r2,-32(fp)
 800c928:	1885c83a 	sub	r2,r3,r2
 800c92c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c930:	e0bff617 	ldw	r2,-40(fp)
 800c934:	10001e26 	beq	r2,zero,800c9b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c938:	e0fffe17 	ldw	r3,-8(fp)
 800c93c:	e0bff617 	ldw	r2,-40(fp)
 800c940:	1880022e 	bgeu	r3,r2,800c94c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c944:	e0bffe17 	ldw	r2,-8(fp)
 800c948:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c94c:	e0bffc17 	ldw	r2,-16(fp)
 800c950:	10c00e04 	addi	r3,r2,56
 800c954:	e0bff817 	ldw	r2,-32(fp)
 800c958:	1885883a 	add	r2,r3,r2
 800c95c:	e1bff617 	ldw	r6,-40(fp)
 800c960:	100b883a 	mov	r5,r2
 800c964:	e13ff517 	ldw	r4,-44(fp)
 800c968:	80053b80 	call	80053b8 <memcpy>
      ptr   += n;
 800c96c:	e0fff517 	ldw	r3,-44(fp)
 800c970:	e0bff617 	ldw	r2,-40(fp)
 800c974:	1885883a 	add	r2,r3,r2
 800c978:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c97c:	e0fffe17 	ldw	r3,-8(fp)
 800c980:	e0bff617 	ldw	r2,-40(fp)
 800c984:	1885c83a 	sub	r2,r3,r2
 800c988:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c98c:	e0fff817 	ldw	r3,-32(fp)
 800c990:	e0bff617 	ldw	r2,-40(fp)
 800c994:	1885883a 	add	r2,r3,r2
 800c998:	10c1ffcc 	andi	r3,r2,2047
 800c99c:	e0bffc17 	ldw	r2,-16(fp)
 800c9a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c9a4:	e0bffe17 	ldw	r2,-8(fp)
 800c9a8:	00bfcf16 	blt	zero,r2,800c8e8 <__alt_data_end+0xfc00c8e8>
 800c9ac:	00000106 	br	800c9b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c9b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c9b4:	e0fff517 	ldw	r3,-44(fp)
 800c9b8:	e0bffd17 	ldw	r2,-12(fp)
 800c9bc:	1880141e 	bne	r3,r2,800ca10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c9c0:	e0bfff17 	ldw	r2,-4(fp)
 800c9c4:	1090000c 	andi	r2,r2,16384
 800c9c8:	1000131e 	bne	r2,zero,800ca18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c9cc:	0001883a 	nop
 800c9d0:	e0bffc17 	ldw	r2,-16(fp)
 800c9d4:	10c00a17 	ldw	r3,40(r2)
 800c9d8:	e0bff717 	ldw	r2,-36(fp)
 800c9dc:	1880051e 	bne	r3,r2,800c9f4 <altera_avalon_jtag_uart_read+0x138>
 800c9e0:	e0bffc17 	ldw	r2,-16(fp)
 800c9e4:	10c00917 	ldw	r3,36(r2)
 800c9e8:	e0bffc17 	ldw	r2,-16(fp)
 800c9ec:	10800117 	ldw	r2,4(r2)
 800c9f0:	18bff736 	bltu	r3,r2,800c9d0 <__alt_data_end+0xfc00c9d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c9f4:	e0bffc17 	ldw	r2,-16(fp)
 800c9f8:	10c00a17 	ldw	r3,40(r2)
 800c9fc:	e0bff717 	ldw	r2,-36(fp)
 800ca00:	18800726 	beq	r3,r2,800ca20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800ca04:	e0bffe17 	ldw	r2,-8(fp)
 800ca08:	00bfb716 	blt	zero,r2,800c8e8 <__alt_data_end+0xfc00c8e8>
 800ca0c:	00000506 	br	800ca24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800ca10:	0001883a 	nop
 800ca14:	00000306 	br	800ca24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800ca18:	0001883a 	nop
 800ca1c:	00000106 	br	800ca24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800ca20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800ca24:	e0fff517 	ldw	r3,-44(fp)
 800ca28:	e0bffd17 	ldw	r2,-12(fp)
 800ca2c:	18801826 	beq	r3,r2,800ca90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ca30:	0005303a 	rdctl	r2,status
 800ca34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ca38:	e0fffb17 	ldw	r3,-20(fp)
 800ca3c:	00bfff84 	movi	r2,-2
 800ca40:	1884703a 	and	r2,r3,r2
 800ca44:	1001703a 	wrctl	status,r2
  
  return context;
 800ca48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800ca4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ca50:	e0bffc17 	ldw	r2,-16(fp)
 800ca54:	10800817 	ldw	r2,32(r2)
 800ca58:	10c00054 	ori	r3,r2,1
 800ca5c:	e0bffc17 	ldw	r2,-16(fp)
 800ca60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ca64:	e0bffc17 	ldw	r2,-16(fp)
 800ca68:	10800017 	ldw	r2,0(r2)
 800ca6c:	10800104 	addi	r2,r2,4
 800ca70:	1007883a 	mov	r3,r2
 800ca74:	e0bffc17 	ldw	r2,-16(fp)
 800ca78:	10800817 	ldw	r2,32(r2)
 800ca7c:	18800035 	stwio	r2,0(r3)
 800ca80:	e0bffa17 	ldw	r2,-24(fp)
 800ca84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ca88:	e0bff917 	ldw	r2,-28(fp)
 800ca8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800ca90:	e0fff517 	ldw	r3,-44(fp)
 800ca94:	e0bffd17 	ldw	r2,-12(fp)
 800ca98:	18800426 	beq	r3,r2,800caac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800ca9c:	e0fff517 	ldw	r3,-44(fp)
 800caa0:	e0bffd17 	ldw	r2,-12(fp)
 800caa4:	1885c83a 	sub	r2,r3,r2
 800caa8:	00000606 	br	800cac4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800caac:	e0bfff17 	ldw	r2,-4(fp)
 800cab0:	1090000c 	andi	r2,r2,16384
 800cab4:	10000226 	beq	r2,zero,800cac0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800cab8:	00bffd44 	movi	r2,-11
 800cabc:	00000106 	br	800cac4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800cac0:	00bffec4 	movi	r2,-5
}
 800cac4:	e037883a 	mov	sp,fp
 800cac8:	dfc00117 	ldw	ra,4(sp)
 800cacc:	df000017 	ldw	fp,0(sp)
 800cad0:	dec00204 	addi	sp,sp,8
 800cad4:	f800283a 	ret

0800cad8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800cad8:	defff304 	addi	sp,sp,-52
 800cadc:	dfc00c15 	stw	ra,48(sp)
 800cae0:	df000b15 	stw	fp,44(sp)
 800cae4:	df000b04 	addi	fp,sp,44
 800cae8:	e13ffc15 	stw	r4,-16(fp)
 800caec:	e17ffd15 	stw	r5,-12(fp)
 800caf0:	e1bffe15 	stw	r6,-8(fp)
 800caf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800caf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800cafc:	e0bffd17 	ldw	r2,-12(fp)
 800cb00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800cb04:	00003706 	br	800cbe4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800cb08:	e0bffc17 	ldw	r2,-16(fp)
 800cb0c:	10800c17 	ldw	r2,48(r2)
 800cb10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800cb14:	e0bffc17 	ldw	r2,-16(fp)
 800cb18:	10800d17 	ldw	r2,52(r2)
 800cb1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800cb20:	e0fff917 	ldw	r3,-28(fp)
 800cb24:	e0bff517 	ldw	r2,-44(fp)
 800cb28:	1880062e 	bgeu	r3,r2,800cb44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800cb2c:	e0fff517 	ldw	r3,-44(fp)
 800cb30:	e0bff917 	ldw	r2,-28(fp)
 800cb34:	1885c83a 	sub	r2,r3,r2
 800cb38:	10bfffc4 	addi	r2,r2,-1
 800cb3c:	e0bff615 	stw	r2,-40(fp)
 800cb40:	00000b06 	br	800cb70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800cb44:	e0bff517 	ldw	r2,-44(fp)
 800cb48:	10000526 	beq	r2,zero,800cb60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800cb4c:	00c20004 	movi	r3,2048
 800cb50:	e0bff917 	ldw	r2,-28(fp)
 800cb54:	1885c83a 	sub	r2,r3,r2
 800cb58:	e0bff615 	stw	r2,-40(fp)
 800cb5c:	00000406 	br	800cb70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800cb60:	00c1ffc4 	movi	r3,2047
 800cb64:	e0bff917 	ldw	r2,-28(fp)
 800cb68:	1885c83a 	sub	r2,r3,r2
 800cb6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800cb70:	e0bff617 	ldw	r2,-40(fp)
 800cb74:	10001e26 	beq	r2,zero,800cbf0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800cb78:	e0fffe17 	ldw	r3,-8(fp)
 800cb7c:	e0bff617 	ldw	r2,-40(fp)
 800cb80:	1880022e 	bgeu	r3,r2,800cb8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800cb84:	e0bffe17 	ldw	r2,-8(fp)
 800cb88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800cb8c:	e0bffc17 	ldw	r2,-16(fp)
 800cb90:	10c20e04 	addi	r3,r2,2104
 800cb94:	e0bff917 	ldw	r2,-28(fp)
 800cb98:	1885883a 	add	r2,r3,r2
 800cb9c:	e1bff617 	ldw	r6,-40(fp)
 800cba0:	e17ffd17 	ldw	r5,-12(fp)
 800cba4:	1009883a 	mov	r4,r2
 800cba8:	80053b80 	call	80053b8 <memcpy>
      ptr   += n;
 800cbac:	e0fffd17 	ldw	r3,-12(fp)
 800cbb0:	e0bff617 	ldw	r2,-40(fp)
 800cbb4:	1885883a 	add	r2,r3,r2
 800cbb8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800cbbc:	e0fffe17 	ldw	r3,-8(fp)
 800cbc0:	e0bff617 	ldw	r2,-40(fp)
 800cbc4:	1885c83a 	sub	r2,r3,r2
 800cbc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800cbcc:	e0fff917 	ldw	r3,-28(fp)
 800cbd0:	e0bff617 	ldw	r2,-40(fp)
 800cbd4:	1885883a 	add	r2,r3,r2
 800cbd8:	10c1ffcc 	andi	r3,r2,2047
 800cbdc:	e0bffc17 	ldw	r2,-16(fp)
 800cbe0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800cbe4:	e0bffe17 	ldw	r2,-8(fp)
 800cbe8:	00bfc716 	blt	zero,r2,800cb08 <__alt_data_end+0xfc00cb08>
 800cbec:	00000106 	br	800cbf4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800cbf0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cbf4:	0005303a 	rdctl	r2,status
 800cbf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cbfc:	e0fffb17 	ldw	r3,-20(fp)
 800cc00:	00bfff84 	movi	r2,-2
 800cc04:	1884703a 	and	r2,r3,r2
 800cc08:	1001703a 	wrctl	status,r2
  
  return context;
 800cc0c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800cc10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800cc14:	e0bffc17 	ldw	r2,-16(fp)
 800cc18:	10800817 	ldw	r2,32(r2)
 800cc1c:	10c00094 	ori	r3,r2,2
 800cc20:	e0bffc17 	ldw	r2,-16(fp)
 800cc24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800cc28:	e0bffc17 	ldw	r2,-16(fp)
 800cc2c:	10800017 	ldw	r2,0(r2)
 800cc30:	10800104 	addi	r2,r2,4
 800cc34:	1007883a 	mov	r3,r2
 800cc38:	e0bffc17 	ldw	r2,-16(fp)
 800cc3c:	10800817 	ldw	r2,32(r2)
 800cc40:	18800035 	stwio	r2,0(r3)
 800cc44:	e0bffa17 	ldw	r2,-24(fp)
 800cc48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cc4c:	e0bff817 	ldw	r2,-32(fp)
 800cc50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800cc54:	e0bffe17 	ldw	r2,-8(fp)
 800cc58:	0080100e 	bge	zero,r2,800cc9c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800cc5c:	e0bfff17 	ldw	r2,-4(fp)
 800cc60:	1090000c 	andi	r2,r2,16384
 800cc64:	1000101e 	bne	r2,zero,800cca8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800cc68:	0001883a 	nop
 800cc6c:	e0bffc17 	ldw	r2,-16(fp)
 800cc70:	10c00d17 	ldw	r3,52(r2)
 800cc74:	e0bff517 	ldw	r2,-44(fp)
 800cc78:	1880051e 	bne	r3,r2,800cc90 <altera_avalon_jtag_uart_write+0x1b8>
 800cc7c:	e0bffc17 	ldw	r2,-16(fp)
 800cc80:	10c00917 	ldw	r3,36(r2)
 800cc84:	e0bffc17 	ldw	r2,-16(fp)
 800cc88:	10800117 	ldw	r2,4(r2)
 800cc8c:	18bff736 	bltu	r3,r2,800cc6c <__alt_data_end+0xfc00cc6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800cc90:	e0bffc17 	ldw	r2,-16(fp)
 800cc94:	10800917 	ldw	r2,36(r2)
 800cc98:	1000051e 	bne	r2,zero,800ccb0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800cc9c:	e0bffe17 	ldw	r2,-8(fp)
 800cca0:	00bfd016 	blt	zero,r2,800cbe4 <__alt_data_end+0xfc00cbe4>
 800cca4:	00000306 	br	800ccb4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800cca8:	0001883a 	nop
 800ccac:	00000106 	br	800ccb4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800ccb0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ccb4:	e0fffd17 	ldw	r3,-12(fp)
 800ccb8:	e0bff717 	ldw	r2,-36(fp)
 800ccbc:	18800426 	beq	r3,r2,800ccd0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800ccc0:	e0fffd17 	ldw	r3,-12(fp)
 800ccc4:	e0bff717 	ldw	r2,-36(fp)
 800ccc8:	1885c83a 	sub	r2,r3,r2
 800cccc:	00000606 	br	800cce8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800ccd0:	e0bfff17 	ldw	r2,-4(fp)
 800ccd4:	1090000c 	andi	r2,r2,16384
 800ccd8:	10000226 	beq	r2,zero,800cce4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800ccdc:	00bffd44 	movi	r2,-11
 800cce0:	00000106 	br	800cce8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800cce4:	00bffec4 	movi	r2,-5
}
 800cce8:	e037883a 	mov	sp,fp
 800ccec:	dfc00117 	ldw	ra,4(sp)
 800ccf0:	df000017 	ldw	fp,0(sp)
 800ccf4:	dec00204 	addi	sp,sp,8
 800ccf8:	f800283a 	ret

0800ccfc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800ccfc:	defffa04 	addi	sp,sp,-24
 800cd00:	dfc00515 	stw	ra,20(sp)
 800cd04:	df000415 	stw	fp,16(sp)
 800cd08:	df000404 	addi	fp,sp,16
 800cd0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800cd10:	0007883a 	mov	r3,zero
 800cd14:	e0bfff17 	ldw	r2,-4(fp)
 800cd18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800cd1c:	e0bfff17 	ldw	r2,-4(fp)
 800cd20:	10800104 	addi	r2,r2,4
 800cd24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cd28:	0005303a 	rdctl	r2,status
 800cd2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cd30:	e0fffd17 	ldw	r3,-12(fp)
 800cd34:	00bfff84 	movi	r2,-2
 800cd38:	1884703a 	and	r2,r3,r2
 800cd3c:	1001703a 	wrctl	status,r2
  
  return context;
 800cd40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800cd44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800cd48:	800db380 	call	800db38 <alt_tick>
 800cd4c:	e0bffc17 	ldw	r2,-16(fp)
 800cd50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cd54:	e0bffe17 	ldw	r2,-8(fp)
 800cd58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800cd5c:	0001883a 	nop
 800cd60:	e037883a 	mov	sp,fp
 800cd64:	dfc00117 	ldw	ra,4(sp)
 800cd68:	df000017 	ldw	fp,0(sp)
 800cd6c:	dec00204 	addi	sp,sp,8
 800cd70:	f800283a 	ret

0800cd74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800cd74:	defff804 	addi	sp,sp,-32
 800cd78:	dfc00715 	stw	ra,28(sp)
 800cd7c:	df000615 	stw	fp,24(sp)
 800cd80:	df000604 	addi	fp,sp,24
 800cd84:	e13ffc15 	stw	r4,-16(fp)
 800cd88:	e17ffd15 	stw	r5,-12(fp)
 800cd8c:	e1bffe15 	stw	r6,-8(fp)
 800cd90:	e1ffff15 	stw	r7,-4(fp)
 800cd94:	e0bfff17 	ldw	r2,-4(fp)
 800cd98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800cd9c:	d0a79017 	ldw	r2,-25024(gp)
 800cda0:	1000021e 	bne	r2,zero,800cdac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800cda4:	e0bffb17 	ldw	r2,-20(fp)
 800cda8:	d0a79015 	stw	r2,-25024(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800cdac:	e0bffc17 	ldw	r2,-16(fp)
 800cdb0:	10800104 	addi	r2,r2,4
 800cdb4:	00c001c4 	movi	r3,7
 800cdb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800cdbc:	d8000015 	stw	zero,0(sp)
 800cdc0:	e1fffc17 	ldw	r7,-16(fp)
 800cdc4:	01820074 	movhi	r6,2049
 800cdc8:	31b33f04 	addi	r6,r6,-13060
 800cdcc:	e17ffe17 	ldw	r5,-8(fp)
 800cdd0:	e13ffd17 	ldw	r4,-12(fp)
 800cdd4:	800d3940 	call	800d394 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800cdd8:	0001883a 	nop
 800cddc:	e037883a 	mov	sp,fp
 800cde0:	dfc00117 	ldw	ra,4(sp)
 800cde4:	df000017 	ldw	fp,0(sp)
 800cde8:	dec00204 	addi	sp,sp,8
 800cdec:	f800283a 	ret

0800cdf0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800cdf0:	defff504 	addi	sp,sp,-44
 800cdf4:	df000a15 	stw	fp,40(sp)
 800cdf8:	df000a04 	addi	fp,sp,40
 800cdfc:	e13ffc15 	stw	r4,-16(fp)
 800ce00:	e17ffd15 	stw	r5,-12(fp)
 800ce04:	e1bffe15 	stw	r6,-8(fp)
 800ce08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ce0c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ce10:	d0a79017 	ldw	r2,-25024(gp)
  
  if (alt_ticks_per_second ())
 800ce14:	10003c26 	beq	r2,zero,800cf08 <alt_alarm_start+0x118>
  {
    if (alarm)
 800ce18:	e0bffc17 	ldw	r2,-16(fp)
 800ce1c:	10003826 	beq	r2,zero,800cf00 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800ce20:	e0bffc17 	ldw	r2,-16(fp)
 800ce24:	e0fffe17 	ldw	r3,-8(fp)
 800ce28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ce2c:	e0bffc17 	ldw	r2,-16(fp)
 800ce30:	e0ffff17 	ldw	r3,-4(fp)
 800ce34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ce38:	0005303a 	rdctl	r2,status
 800ce3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ce40:	e0fff917 	ldw	r3,-28(fp)
 800ce44:	00bfff84 	movi	r2,-2
 800ce48:	1884703a 	and	r2,r3,r2
 800ce4c:	1001703a 	wrctl	status,r2
  
  return context;
 800ce50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800ce54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ce58:	d0a79117 	ldw	r2,-25020(gp)
      
      current_nticks = alt_nticks();
 800ce5c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ce60:	e0fffd17 	ldw	r3,-12(fp)
 800ce64:	e0bff617 	ldw	r2,-40(fp)
 800ce68:	1885883a 	add	r2,r3,r2
 800ce6c:	10c00044 	addi	r3,r2,1
 800ce70:	e0bffc17 	ldw	r2,-16(fp)
 800ce74:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ce78:	e0bffc17 	ldw	r2,-16(fp)
 800ce7c:	10c00217 	ldw	r3,8(r2)
 800ce80:	e0bff617 	ldw	r2,-40(fp)
 800ce84:	1880042e 	bgeu	r3,r2,800ce98 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800ce88:	e0bffc17 	ldw	r2,-16(fp)
 800ce8c:	00c00044 	movi	r3,1
 800ce90:	10c00405 	stb	r3,16(r2)
 800ce94:	00000206 	br	800cea0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800ce98:	e0bffc17 	ldw	r2,-16(fp)
 800ce9c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800cea0:	e0bffc17 	ldw	r2,-16(fp)
 800cea4:	d0e00f04 	addi	r3,gp,-32708
 800cea8:	e0fffa15 	stw	r3,-24(fp)
 800ceac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ceb0:	e0bffb17 	ldw	r2,-20(fp)
 800ceb4:	e0fffa17 	ldw	r3,-24(fp)
 800ceb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cebc:	e0bffa17 	ldw	r2,-24(fp)
 800cec0:	10c00017 	ldw	r3,0(r2)
 800cec4:	e0bffb17 	ldw	r2,-20(fp)
 800cec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cecc:	e0bffa17 	ldw	r2,-24(fp)
 800ced0:	10800017 	ldw	r2,0(r2)
 800ced4:	e0fffb17 	ldw	r3,-20(fp)
 800ced8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cedc:	e0bffa17 	ldw	r2,-24(fp)
 800cee0:	e0fffb17 	ldw	r3,-20(fp)
 800cee4:	10c00015 	stw	r3,0(r2)
 800cee8:	e0bff817 	ldw	r2,-32(fp)
 800ceec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cef0:	e0bff717 	ldw	r2,-36(fp)
 800cef4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800cef8:	0005883a 	mov	r2,zero
 800cefc:	00000306 	br	800cf0c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800cf00:	00bffa84 	movi	r2,-22
 800cf04:	00000106 	br	800cf0c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800cf08:	00bfde84 	movi	r2,-134
  }
}
 800cf0c:	e037883a 	mov	sp,fp
 800cf10:	df000017 	ldw	fp,0(sp)
 800cf14:	dec00104 	addi	sp,sp,4
 800cf18:	f800283a 	ret

0800cf1c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800cf1c:	defffa04 	addi	sp,sp,-24
 800cf20:	dfc00515 	stw	ra,20(sp)
 800cf24:	df000415 	stw	fp,16(sp)
 800cf28:	df000404 	addi	fp,sp,16
 800cf2c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800cf30:	00800244 	movi	r2,9
 800cf34:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800cf38:	014003f4 	movhi	r5,15
 800cf3c:	29509004 	addi	r5,r5,16960
 800cf40:	e13ffd17 	ldw	r4,-12(fp)
 800cf44:	8000c800 	call	8000c80 <__mulsi3>
 800cf48:	100b883a 	mov	r5,r2
 800cf4c:	0100bef4 	movhi	r4,763
 800cf50:	213c2004 	addi	r4,r4,-3968
 800cf54:	8000bc40 	call	8000bc4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800cf58:	100b883a 	mov	r5,r2
 800cf5c:	01200034 	movhi	r4,32768
 800cf60:	213fffc4 	addi	r4,r4,-1
 800cf64:	8000bc40 	call	8000bc4 <__udivsi3>
 800cf68:	100b883a 	mov	r5,r2
 800cf6c:	e13fff17 	ldw	r4,-4(fp)
 800cf70:	8000bc40 	call	8000bc4 <__udivsi3>
 800cf74:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800cf78:	e0bffe17 	ldw	r2,-8(fp)
 800cf7c:	10002a26 	beq	r2,zero,800d028 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800cf80:	e03ffc15 	stw	zero,-16(fp)
 800cf84:	00001706 	br	800cfe4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800cf88:	00a00034 	movhi	r2,32768
 800cf8c:	10bfffc4 	addi	r2,r2,-1
 800cf90:	10bfffc4 	addi	r2,r2,-1
 800cf94:	103ffe1e 	bne	r2,zero,800cf90 <__alt_data_end+0xfc00cf90>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800cf98:	014003f4 	movhi	r5,15
 800cf9c:	29509004 	addi	r5,r5,16960
 800cfa0:	e13ffd17 	ldw	r4,-12(fp)
 800cfa4:	8000c800 	call	8000c80 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800cfa8:	100b883a 	mov	r5,r2
 800cfac:	0100bef4 	movhi	r4,763
 800cfb0:	213c2004 	addi	r4,r4,-3968
 800cfb4:	8000bc40 	call	8000bc4 <__udivsi3>
 800cfb8:	100b883a 	mov	r5,r2
 800cfbc:	01200034 	movhi	r4,32768
 800cfc0:	213fffc4 	addi	r4,r4,-1
 800cfc4:	8000bc40 	call	8000bc4 <__udivsi3>
 800cfc8:	1007883a 	mov	r3,r2
 800cfcc:	e0bfff17 	ldw	r2,-4(fp)
 800cfd0:	10c5c83a 	sub	r2,r2,r3
 800cfd4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800cfd8:	e0bffc17 	ldw	r2,-16(fp)
 800cfdc:	10800044 	addi	r2,r2,1
 800cfe0:	e0bffc15 	stw	r2,-16(fp)
 800cfe4:	e0fffc17 	ldw	r3,-16(fp)
 800cfe8:	e0bffe17 	ldw	r2,-8(fp)
 800cfec:	18bfe616 	blt	r3,r2,800cf88 <__alt_data_end+0xfc00cf88>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cff0:	014003f4 	movhi	r5,15
 800cff4:	29509004 	addi	r5,r5,16960
 800cff8:	e13ffd17 	ldw	r4,-12(fp)
 800cffc:	8000c800 	call	8000c80 <__mulsi3>
 800d000:	100b883a 	mov	r5,r2
 800d004:	0100bef4 	movhi	r4,763
 800d008:	213c2004 	addi	r4,r4,-3968
 800d00c:	8000bc40 	call	8000bc4 <__udivsi3>
 800d010:	e17fff17 	ldw	r5,-4(fp)
 800d014:	1009883a 	mov	r4,r2
 800d018:	8000c800 	call	8000c80 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800d01c:	10bfffc4 	addi	r2,r2,-1
 800d020:	103ffe1e 	bne	r2,zero,800d01c <__alt_data_end+0xfc00d01c>
 800d024:	00000d06 	br	800d05c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800d028:	014003f4 	movhi	r5,15
 800d02c:	29509004 	addi	r5,r5,16960
 800d030:	e13ffd17 	ldw	r4,-12(fp)
 800d034:	8000c800 	call	8000c80 <__mulsi3>
 800d038:	100b883a 	mov	r5,r2
 800d03c:	0100bef4 	movhi	r4,763
 800d040:	213c2004 	addi	r4,r4,-3968
 800d044:	8000bc40 	call	8000bc4 <__udivsi3>
 800d048:	e17fff17 	ldw	r5,-4(fp)
 800d04c:	1009883a 	mov	r4,r2
 800d050:	8000c800 	call	8000c80 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800d054:	10bfffc4 	addi	r2,r2,-1
 800d058:	00bffe16 	blt	zero,r2,800d054 <__alt_data_end+0xfc00d054>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800d05c:	0005883a 	mov	r2,zero
}
 800d060:	e037883a 	mov	sp,fp
 800d064:	dfc00117 	ldw	ra,4(sp)
 800d068:	df000017 	ldw	fp,0(sp)
 800d06c:	dec00204 	addi	sp,sp,8
 800d070:	f800283a 	ret

0800d074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d074:	defffe04 	addi	sp,sp,-8
 800d078:	dfc00115 	stw	ra,4(sp)
 800d07c:	df000015 	stw	fp,0(sp)
 800d080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d084:	d0a00d17 	ldw	r2,-32716(gp)
 800d088:	10000326 	beq	r2,zero,800d098 <alt_get_errno+0x24>
 800d08c:	d0a00d17 	ldw	r2,-32716(gp)
 800d090:	103ee83a 	callr	r2
 800d094:	00000106 	br	800d09c <alt_get_errno+0x28>
 800d098:	d0a78b04 	addi	r2,gp,-25044
}
 800d09c:	e037883a 	mov	sp,fp
 800d0a0:	dfc00117 	ldw	ra,4(sp)
 800d0a4:	df000017 	ldw	fp,0(sp)
 800d0a8:	dec00204 	addi	sp,sp,8
 800d0ac:	f800283a 	ret

0800d0b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d0b0:	defffb04 	addi	sp,sp,-20
 800d0b4:	dfc00415 	stw	ra,16(sp)
 800d0b8:	df000315 	stw	fp,12(sp)
 800d0bc:	df000304 	addi	fp,sp,12
 800d0c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d0c4:	e0bfff17 	ldw	r2,-4(fp)
 800d0c8:	10000816 	blt	r2,zero,800d0ec <close+0x3c>
 800d0cc:	01400304 	movi	r5,12
 800d0d0:	e13fff17 	ldw	r4,-4(fp)
 800d0d4:	8000c800 	call	8000c80 <__mulsi3>
 800d0d8:	1007883a 	mov	r3,r2
 800d0dc:	00820074 	movhi	r2,2049
 800d0e0:	10809304 	addi	r2,r2,588
 800d0e4:	1885883a 	add	r2,r3,r2
 800d0e8:	00000106 	br	800d0f0 <close+0x40>
 800d0ec:	0005883a 	mov	r2,zero
 800d0f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d0f4:	e0bffd17 	ldw	r2,-12(fp)
 800d0f8:	10001926 	beq	r2,zero,800d160 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d0fc:	e0bffd17 	ldw	r2,-12(fp)
 800d100:	10800017 	ldw	r2,0(r2)
 800d104:	10800417 	ldw	r2,16(r2)
 800d108:	10000626 	beq	r2,zero,800d124 <close+0x74>
 800d10c:	e0bffd17 	ldw	r2,-12(fp)
 800d110:	10800017 	ldw	r2,0(r2)
 800d114:	10800417 	ldw	r2,16(r2)
 800d118:	e13ffd17 	ldw	r4,-12(fp)
 800d11c:	103ee83a 	callr	r2
 800d120:	00000106 	br	800d128 <close+0x78>
 800d124:	0005883a 	mov	r2,zero
 800d128:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d12c:	e13fff17 	ldw	r4,-4(fp)
 800d130:	800da180 	call	800da18 <alt_release_fd>
    if (rval < 0)
 800d134:	e0bffe17 	ldw	r2,-8(fp)
 800d138:	1000070e 	bge	r2,zero,800d158 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d13c:	800d0740 	call	800d074 <alt_get_errno>
 800d140:	1007883a 	mov	r3,r2
 800d144:	e0bffe17 	ldw	r2,-8(fp)
 800d148:	0085c83a 	sub	r2,zero,r2
 800d14c:	18800015 	stw	r2,0(r3)
      return -1;
 800d150:	00bfffc4 	movi	r2,-1
 800d154:	00000706 	br	800d174 <close+0xc4>
    }
    return 0;
 800d158:	0005883a 	mov	r2,zero
 800d15c:	00000506 	br	800d174 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d160:	800d0740 	call	800d074 <alt_get_errno>
 800d164:	1007883a 	mov	r3,r2
 800d168:	00801444 	movi	r2,81
 800d16c:	18800015 	stw	r2,0(r3)
    return -1;
 800d170:	00bfffc4 	movi	r2,-1
  }
}
 800d174:	e037883a 	mov	sp,fp
 800d178:	dfc00117 	ldw	ra,4(sp)
 800d17c:	df000017 	ldw	fp,0(sp)
 800d180:	dec00204 	addi	sp,sp,8
 800d184:	f800283a 	ret

0800d188 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800d188:	deffff04 	addi	sp,sp,-4
 800d18c:	df000015 	stw	fp,0(sp)
 800d190:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800d194:	0001883a 	nop
 800d198:	e037883a 	mov	sp,fp
 800d19c:	df000017 	ldw	fp,0(sp)
 800d1a0:	dec00104 	addi	sp,sp,4
 800d1a4:	f800283a 	ret

0800d1a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d1a8:	defffc04 	addi	sp,sp,-16
 800d1ac:	df000315 	stw	fp,12(sp)
 800d1b0:	df000304 	addi	fp,sp,12
 800d1b4:	e13ffd15 	stw	r4,-12(fp)
 800d1b8:	e17ffe15 	stw	r5,-8(fp)
 800d1bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d1c0:	e0bfff17 	ldw	r2,-4(fp)
}
 800d1c4:	e037883a 	mov	sp,fp
 800d1c8:	df000017 	ldw	fp,0(sp)
 800d1cc:	dec00104 	addi	sp,sp,4
 800d1d0:	f800283a 	ret

0800d1d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d1d4:	defffe04 	addi	sp,sp,-8
 800d1d8:	dfc00115 	stw	ra,4(sp)
 800d1dc:	df000015 	stw	fp,0(sp)
 800d1e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d1e4:	d0a00d17 	ldw	r2,-32716(gp)
 800d1e8:	10000326 	beq	r2,zero,800d1f8 <alt_get_errno+0x24>
 800d1ec:	d0a00d17 	ldw	r2,-32716(gp)
 800d1f0:	103ee83a 	callr	r2
 800d1f4:	00000106 	br	800d1fc <alt_get_errno+0x28>
 800d1f8:	d0a78b04 	addi	r2,gp,-25044
}
 800d1fc:	e037883a 	mov	sp,fp
 800d200:	dfc00117 	ldw	ra,4(sp)
 800d204:	df000017 	ldw	fp,0(sp)
 800d208:	dec00204 	addi	sp,sp,8
 800d20c:	f800283a 	ret

0800d210 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800d210:	defffa04 	addi	sp,sp,-24
 800d214:	dfc00515 	stw	ra,20(sp)
 800d218:	df000415 	stw	fp,16(sp)
 800d21c:	df000404 	addi	fp,sp,16
 800d220:	e13ffe15 	stw	r4,-8(fp)
 800d224:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800d228:	e0bffe17 	ldw	r2,-8(fp)
 800d22c:	10000326 	beq	r2,zero,800d23c <alt_dev_llist_insert+0x2c>
 800d230:	e0bffe17 	ldw	r2,-8(fp)
 800d234:	10800217 	ldw	r2,8(r2)
 800d238:	1000061e 	bne	r2,zero,800d254 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800d23c:	800d1d40 	call	800d1d4 <alt_get_errno>
 800d240:	1007883a 	mov	r3,r2
 800d244:	00800584 	movi	r2,22
 800d248:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800d24c:	00bffa84 	movi	r2,-22
 800d250:	00001306 	br	800d2a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800d254:	e0bffe17 	ldw	r2,-8(fp)
 800d258:	e0ffff17 	ldw	r3,-4(fp)
 800d25c:	e0fffc15 	stw	r3,-16(fp)
 800d260:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800d264:	e0bffd17 	ldw	r2,-12(fp)
 800d268:	e0fffc17 	ldw	r3,-16(fp)
 800d26c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800d270:	e0bffc17 	ldw	r2,-16(fp)
 800d274:	10c00017 	ldw	r3,0(r2)
 800d278:	e0bffd17 	ldw	r2,-12(fp)
 800d27c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800d280:	e0bffc17 	ldw	r2,-16(fp)
 800d284:	10800017 	ldw	r2,0(r2)
 800d288:	e0fffd17 	ldw	r3,-12(fp)
 800d28c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800d290:	e0bffc17 	ldw	r2,-16(fp)
 800d294:	e0fffd17 	ldw	r3,-12(fp)
 800d298:	10c00015 	stw	r3,0(r2)

  return 0;  
 800d29c:	0005883a 	mov	r2,zero
}
 800d2a0:	e037883a 	mov	sp,fp
 800d2a4:	dfc00117 	ldw	ra,4(sp)
 800d2a8:	df000017 	ldw	fp,0(sp)
 800d2ac:	dec00204 	addi	sp,sp,8
 800d2b0:	f800283a 	ret

0800d2b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800d2b4:	defffd04 	addi	sp,sp,-12
 800d2b8:	dfc00215 	stw	ra,8(sp)
 800d2bc:	df000115 	stw	fp,4(sp)
 800d2c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d2c4:	00820074 	movhi	r2,2049
 800d2c8:	10b8bb04 	addi	r2,r2,-7444
 800d2cc:	e0bfff15 	stw	r2,-4(fp)
 800d2d0:	00000606 	br	800d2ec <_do_ctors+0x38>
        (*ctor) (); 
 800d2d4:	e0bfff17 	ldw	r2,-4(fp)
 800d2d8:	10800017 	ldw	r2,0(r2)
 800d2dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d2e0:	e0bfff17 	ldw	r2,-4(fp)
 800d2e4:	10bfff04 	addi	r2,r2,-4
 800d2e8:	e0bfff15 	stw	r2,-4(fp)
 800d2ec:	e0ffff17 	ldw	r3,-4(fp)
 800d2f0:	00820074 	movhi	r2,2049
 800d2f4:	10b8bc04 	addi	r2,r2,-7440
 800d2f8:	18bff62e 	bgeu	r3,r2,800d2d4 <__alt_data_end+0xfc00d2d4>
        (*ctor) (); 
}
 800d2fc:	0001883a 	nop
 800d300:	e037883a 	mov	sp,fp
 800d304:	dfc00117 	ldw	ra,4(sp)
 800d308:	df000017 	ldw	fp,0(sp)
 800d30c:	dec00204 	addi	sp,sp,8
 800d310:	f800283a 	ret

0800d314 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800d314:	defffd04 	addi	sp,sp,-12
 800d318:	dfc00215 	stw	ra,8(sp)
 800d31c:	df000115 	stw	fp,4(sp)
 800d320:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d324:	00820074 	movhi	r2,2049
 800d328:	10b8bb04 	addi	r2,r2,-7444
 800d32c:	e0bfff15 	stw	r2,-4(fp)
 800d330:	00000606 	br	800d34c <_do_dtors+0x38>
        (*dtor) (); 
 800d334:	e0bfff17 	ldw	r2,-4(fp)
 800d338:	10800017 	ldw	r2,0(r2)
 800d33c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d340:	e0bfff17 	ldw	r2,-4(fp)
 800d344:	10bfff04 	addi	r2,r2,-4
 800d348:	e0bfff15 	stw	r2,-4(fp)
 800d34c:	e0ffff17 	ldw	r3,-4(fp)
 800d350:	00820074 	movhi	r2,2049
 800d354:	10b8bc04 	addi	r2,r2,-7440
 800d358:	18bff62e 	bgeu	r3,r2,800d334 <__alt_data_end+0xfc00d334>
        (*dtor) (); 
}
 800d35c:	0001883a 	nop
 800d360:	e037883a 	mov	sp,fp
 800d364:	dfc00117 	ldw	ra,4(sp)
 800d368:	df000017 	ldw	fp,0(sp)
 800d36c:	dec00204 	addi	sp,sp,8
 800d370:	f800283a 	ret

0800d374 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800d374:	deffff04 	addi	sp,sp,-4
 800d378:	df000015 	stw	fp,0(sp)
 800d37c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800d380:	0001883a 	nop
 800d384:	e037883a 	mov	sp,fp
 800d388:	df000017 	ldw	fp,0(sp)
 800d38c:	dec00104 	addi	sp,sp,4
 800d390:	f800283a 	ret

0800d394 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d394:	defff904 	addi	sp,sp,-28
 800d398:	dfc00615 	stw	ra,24(sp)
 800d39c:	df000515 	stw	fp,20(sp)
 800d3a0:	df000504 	addi	fp,sp,20
 800d3a4:	e13ffc15 	stw	r4,-16(fp)
 800d3a8:	e17ffd15 	stw	r5,-12(fp)
 800d3ac:	e1bffe15 	stw	r6,-8(fp)
 800d3b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d3b4:	e0800217 	ldw	r2,8(fp)
 800d3b8:	d8800015 	stw	r2,0(sp)
 800d3bc:	e1ffff17 	ldw	r7,-4(fp)
 800d3c0:	e1bffe17 	ldw	r6,-8(fp)
 800d3c4:	e17ffd17 	ldw	r5,-12(fp)
 800d3c8:	e13ffc17 	ldw	r4,-16(fp)
 800d3cc:	800d5440 	call	800d544 <alt_iic_isr_register>
}  
 800d3d0:	e037883a 	mov	sp,fp
 800d3d4:	dfc00117 	ldw	ra,4(sp)
 800d3d8:	df000017 	ldw	fp,0(sp)
 800d3dc:	dec00204 	addi	sp,sp,8
 800d3e0:	f800283a 	ret

0800d3e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d3e4:	defff904 	addi	sp,sp,-28
 800d3e8:	df000615 	stw	fp,24(sp)
 800d3ec:	df000604 	addi	fp,sp,24
 800d3f0:	e13ffe15 	stw	r4,-8(fp)
 800d3f4:	e17fff15 	stw	r5,-4(fp)
 800d3f8:	e0bfff17 	ldw	r2,-4(fp)
 800d3fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d400:	0005303a 	rdctl	r2,status
 800d404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d408:	e0fffb17 	ldw	r3,-20(fp)
 800d40c:	00bfff84 	movi	r2,-2
 800d410:	1884703a 	and	r2,r3,r2
 800d414:	1001703a 	wrctl	status,r2
  
  return context;
 800d418:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d41c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d420:	00c00044 	movi	r3,1
 800d424:	e0bffa17 	ldw	r2,-24(fp)
 800d428:	1884983a 	sll	r2,r3,r2
 800d42c:	1007883a 	mov	r3,r2
 800d430:	d0a78f17 	ldw	r2,-25028(gp)
 800d434:	1884b03a 	or	r2,r3,r2
 800d438:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d43c:	d0a78f17 	ldw	r2,-25028(gp)
 800d440:	100170fa 	wrctl	ienable,r2
 800d444:	e0bffc17 	ldw	r2,-16(fp)
 800d448:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d44c:	e0bffd17 	ldw	r2,-12(fp)
 800d450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d454:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800d458:	0001883a 	nop
}
 800d45c:	e037883a 	mov	sp,fp
 800d460:	df000017 	ldw	fp,0(sp)
 800d464:	dec00104 	addi	sp,sp,4
 800d468:	f800283a 	ret

0800d46c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d46c:	defff904 	addi	sp,sp,-28
 800d470:	df000615 	stw	fp,24(sp)
 800d474:	df000604 	addi	fp,sp,24
 800d478:	e13ffe15 	stw	r4,-8(fp)
 800d47c:	e17fff15 	stw	r5,-4(fp)
 800d480:	e0bfff17 	ldw	r2,-4(fp)
 800d484:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d488:	0005303a 	rdctl	r2,status
 800d48c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d490:	e0fffb17 	ldw	r3,-20(fp)
 800d494:	00bfff84 	movi	r2,-2
 800d498:	1884703a 	and	r2,r3,r2
 800d49c:	1001703a 	wrctl	status,r2
  
  return context;
 800d4a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d4a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d4a8:	00c00044 	movi	r3,1
 800d4ac:	e0bffa17 	ldw	r2,-24(fp)
 800d4b0:	1884983a 	sll	r2,r3,r2
 800d4b4:	0084303a 	nor	r2,zero,r2
 800d4b8:	1007883a 	mov	r3,r2
 800d4bc:	d0a78f17 	ldw	r2,-25028(gp)
 800d4c0:	1884703a 	and	r2,r3,r2
 800d4c4:	d0a78f15 	stw	r2,-25028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d4c8:	d0a78f17 	ldw	r2,-25028(gp)
 800d4cc:	100170fa 	wrctl	ienable,r2
 800d4d0:	e0bffc17 	ldw	r2,-16(fp)
 800d4d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d4d8:	e0bffd17 	ldw	r2,-12(fp)
 800d4dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d4e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800d4e4:	0001883a 	nop
}
 800d4e8:	e037883a 	mov	sp,fp
 800d4ec:	df000017 	ldw	fp,0(sp)
 800d4f0:	dec00104 	addi	sp,sp,4
 800d4f4:	f800283a 	ret

0800d4f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d4f8:	defffc04 	addi	sp,sp,-16
 800d4fc:	df000315 	stw	fp,12(sp)
 800d500:	df000304 	addi	fp,sp,12
 800d504:	e13ffe15 	stw	r4,-8(fp)
 800d508:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d50c:	000530fa 	rdctl	r2,ienable
 800d510:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d514:	00c00044 	movi	r3,1
 800d518:	e0bfff17 	ldw	r2,-4(fp)
 800d51c:	1884983a 	sll	r2,r3,r2
 800d520:	1007883a 	mov	r3,r2
 800d524:	e0bffd17 	ldw	r2,-12(fp)
 800d528:	1884703a 	and	r2,r3,r2
 800d52c:	1004c03a 	cmpne	r2,r2,zero
 800d530:	10803fcc 	andi	r2,r2,255
}
 800d534:	e037883a 	mov	sp,fp
 800d538:	df000017 	ldw	fp,0(sp)
 800d53c:	dec00104 	addi	sp,sp,4
 800d540:	f800283a 	ret

0800d544 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d544:	defff504 	addi	sp,sp,-44
 800d548:	dfc00a15 	stw	ra,40(sp)
 800d54c:	df000915 	stw	fp,36(sp)
 800d550:	df000904 	addi	fp,sp,36
 800d554:	e13ffc15 	stw	r4,-16(fp)
 800d558:	e17ffd15 	stw	r5,-12(fp)
 800d55c:	e1bffe15 	stw	r6,-8(fp)
 800d560:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d564:	00bffa84 	movi	r2,-22
 800d568:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d56c:	e0bffd17 	ldw	r2,-12(fp)
 800d570:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d574:	e0bff817 	ldw	r2,-32(fp)
 800d578:	10800808 	cmpgei	r2,r2,32
 800d57c:	1000271e 	bne	r2,zero,800d61c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d580:	0005303a 	rdctl	r2,status
 800d584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d588:	e0fffb17 	ldw	r3,-20(fp)
 800d58c:	00bfff84 	movi	r2,-2
 800d590:	1884703a 	and	r2,r3,r2
 800d594:	1001703a 	wrctl	status,r2
  
  return context;
 800d598:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d59c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800d5a0:	00820074 	movhi	r2,2049
 800d5a4:	10889004 	addi	r2,r2,8768
 800d5a8:	e0fff817 	ldw	r3,-32(fp)
 800d5ac:	180690fa 	slli	r3,r3,3
 800d5b0:	10c5883a 	add	r2,r2,r3
 800d5b4:	e0fffe17 	ldw	r3,-8(fp)
 800d5b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d5bc:	00820074 	movhi	r2,2049
 800d5c0:	10889004 	addi	r2,r2,8768
 800d5c4:	e0fff817 	ldw	r3,-32(fp)
 800d5c8:	180690fa 	slli	r3,r3,3
 800d5cc:	10c5883a 	add	r2,r2,r3
 800d5d0:	10800104 	addi	r2,r2,4
 800d5d4:	e0ffff17 	ldw	r3,-4(fp)
 800d5d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d5dc:	e0bffe17 	ldw	r2,-8(fp)
 800d5e0:	10000526 	beq	r2,zero,800d5f8 <alt_iic_isr_register+0xb4>
 800d5e4:	e0bff817 	ldw	r2,-32(fp)
 800d5e8:	100b883a 	mov	r5,r2
 800d5ec:	e13ffc17 	ldw	r4,-16(fp)
 800d5f0:	800d3e40 	call	800d3e4 <alt_ic_irq_enable>
 800d5f4:	00000406 	br	800d608 <alt_iic_isr_register+0xc4>
 800d5f8:	e0bff817 	ldw	r2,-32(fp)
 800d5fc:	100b883a 	mov	r5,r2
 800d600:	e13ffc17 	ldw	r4,-16(fp)
 800d604:	800d46c0 	call	800d46c <alt_ic_irq_disable>
 800d608:	e0bff715 	stw	r2,-36(fp)
 800d60c:	e0bffa17 	ldw	r2,-24(fp)
 800d610:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d614:	e0bff917 	ldw	r2,-28(fp)
 800d618:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d61c:	e0bff717 	ldw	r2,-36(fp)
}
 800d620:	e037883a 	mov	sp,fp
 800d624:	dfc00117 	ldw	ra,4(sp)
 800d628:	df000017 	ldw	fp,0(sp)
 800d62c:	dec00204 	addi	sp,sp,8
 800d630:	f800283a 	ret

0800d634 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d634:	defff804 	addi	sp,sp,-32
 800d638:	dfc00715 	stw	ra,28(sp)
 800d63c:	df000615 	stw	fp,24(sp)
 800d640:	dc000515 	stw	r16,20(sp)
 800d644:	df000604 	addi	fp,sp,24
 800d648:	e13ffb15 	stw	r4,-20(fp)
 800d64c:	e17ffc15 	stw	r5,-16(fp)
 800d650:	e1bffd15 	stw	r6,-12(fp)
 800d654:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800d658:	e1bffe17 	ldw	r6,-8(fp)
 800d65c:	e17ffd17 	ldw	r5,-12(fp)
 800d660:	e13ffc17 	ldw	r4,-16(fp)
 800d664:	800d8bc0 	call	800d8bc <open>
 800d668:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800d66c:	e0bffa17 	ldw	r2,-24(fp)
 800d670:	10002216 	blt	r2,zero,800d6fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d674:	04020074 	movhi	r16,2049
 800d678:	84009304 	addi	r16,r16,588
 800d67c:	e0bffa17 	ldw	r2,-24(fp)
 800d680:	01400304 	movi	r5,12
 800d684:	1009883a 	mov	r4,r2
 800d688:	8000c800 	call	8000c80 <__mulsi3>
 800d68c:	8085883a 	add	r2,r16,r2
 800d690:	10c00017 	ldw	r3,0(r2)
 800d694:	e0bffb17 	ldw	r2,-20(fp)
 800d698:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d69c:	04020074 	movhi	r16,2049
 800d6a0:	84009304 	addi	r16,r16,588
 800d6a4:	e0bffa17 	ldw	r2,-24(fp)
 800d6a8:	01400304 	movi	r5,12
 800d6ac:	1009883a 	mov	r4,r2
 800d6b0:	8000c800 	call	8000c80 <__mulsi3>
 800d6b4:	8085883a 	add	r2,r16,r2
 800d6b8:	10800104 	addi	r2,r2,4
 800d6bc:	10c00017 	ldw	r3,0(r2)
 800d6c0:	e0bffb17 	ldw	r2,-20(fp)
 800d6c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d6c8:	04020074 	movhi	r16,2049
 800d6cc:	84009304 	addi	r16,r16,588
 800d6d0:	e0bffa17 	ldw	r2,-24(fp)
 800d6d4:	01400304 	movi	r5,12
 800d6d8:	1009883a 	mov	r4,r2
 800d6dc:	8000c800 	call	8000c80 <__mulsi3>
 800d6e0:	8085883a 	add	r2,r16,r2
 800d6e4:	10800204 	addi	r2,r2,8
 800d6e8:	10c00017 	ldw	r3,0(r2)
 800d6ec:	e0bffb17 	ldw	r2,-20(fp)
 800d6f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d6f4:	e13ffa17 	ldw	r4,-24(fp)
 800d6f8:	800da180 	call	800da18 <alt_release_fd>
  }
} 
 800d6fc:	0001883a 	nop
 800d700:	e6ffff04 	addi	sp,fp,-4
 800d704:	dfc00217 	ldw	ra,8(sp)
 800d708:	df000117 	ldw	fp,4(sp)
 800d70c:	dc000017 	ldw	r16,0(sp)
 800d710:	dec00304 	addi	sp,sp,12
 800d714:	f800283a 	ret

0800d718 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d718:	defffb04 	addi	sp,sp,-20
 800d71c:	dfc00415 	stw	ra,16(sp)
 800d720:	df000315 	stw	fp,12(sp)
 800d724:	df000304 	addi	fp,sp,12
 800d728:	e13ffd15 	stw	r4,-12(fp)
 800d72c:	e17ffe15 	stw	r5,-8(fp)
 800d730:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d734:	01c07fc4 	movi	r7,511
 800d738:	01800044 	movi	r6,1
 800d73c:	e17ffd17 	ldw	r5,-12(fp)
 800d740:	01020074 	movhi	r4,2049
 800d744:	21009604 	addi	r4,r4,600
 800d748:	800d6340 	call	800d634 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d74c:	01c07fc4 	movi	r7,511
 800d750:	000d883a 	mov	r6,zero
 800d754:	e17ffe17 	ldw	r5,-8(fp)
 800d758:	01020074 	movhi	r4,2049
 800d75c:	21009304 	addi	r4,r4,588
 800d760:	800d6340 	call	800d634 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d764:	01c07fc4 	movi	r7,511
 800d768:	01800044 	movi	r6,1
 800d76c:	e17fff17 	ldw	r5,-4(fp)
 800d770:	01020074 	movhi	r4,2049
 800d774:	21009904 	addi	r4,r4,612
 800d778:	800d6340 	call	800d634 <alt_open_fd>
}  
 800d77c:	0001883a 	nop
 800d780:	e037883a 	mov	sp,fp
 800d784:	dfc00117 	ldw	ra,4(sp)
 800d788:	df000017 	ldw	fp,0(sp)
 800d78c:	dec00204 	addi	sp,sp,8
 800d790:	f800283a 	ret

0800d794 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d794:	defffe04 	addi	sp,sp,-8
 800d798:	dfc00115 	stw	ra,4(sp)
 800d79c:	df000015 	stw	fp,0(sp)
 800d7a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d7a4:	d0a00d17 	ldw	r2,-32716(gp)
 800d7a8:	10000326 	beq	r2,zero,800d7b8 <alt_get_errno+0x24>
 800d7ac:	d0a00d17 	ldw	r2,-32716(gp)
 800d7b0:	103ee83a 	callr	r2
 800d7b4:	00000106 	br	800d7bc <alt_get_errno+0x28>
 800d7b8:	d0a78b04 	addi	r2,gp,-25044
}
 800d7bc:	e037883a 	mov	sp,fp
 800d7c0:	dfc00117 	ldw	ra,4(sp)
 800d7c4:	df000017 	ldw	fp,0(sp)
 800d7c8:	dec00204 	addi	sp,sp,8
 800d7cc:	f800283a 	ret

0800d7d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d7d0:	defffb04 	addi	sp,sp,-20
 800d7d4:	dfc00415 	stw	ra,16(sp)
 800d7d8:	df000315 	stw	fp,12(sp)
 800d7dc:	dc000215 	stw	r16,8(sp)
 800d7e0:	df000304 	addi	fp,sp,12
 800d7e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d7e8:	e0bffe17 	ldw	r2,-8(fp)
 800d7ec:	10800217 	ldw	r2,8(r2)
 800d7f0:	10d00034 	orhi	r3,r2,16384
 800d7f4:	e0bffe17 	ldw	r2,-8(fp)
 800d7f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d7fc:	e03ffd15 	stw	zero,-12(fp)
 800d800:	00002306 	br	800d890 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d804:	04020074 	movhi	r16,2049
 800d808:	84009304 	addi	r16,r16,588
 800d80c:	e0bffd17 	ldw	r2,-12(fp)
 800d810:	01400304 	movi	r5,12
 800d814:	1009883a 	mov	r4,r2
 800d818:	8000c800 	call	8000c80 <__mulsi3>
 800d81c:	8085883a 	add	r2,r16,r2
 800d820:	10c00017 	ldw	r3,0(r2)
 800d824:	e0bffe17 	ldw	r2,-8(fp)
 800d828:	10800017 	ldw	r2,0(r2)
 800d82c:	1880151e 	bne	r3,r2,800d884 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d830:	04020074 	movhi	r16,2049
 800d834:	84009304 	addi	r16,r16,588
 800d838:	e0bffd17 	ldw	r2,-12(fp)
 800d83c:	01400304 	movi	r5,12
 800d840:	1009883a 	mov	r4,r2
 800d844:	8000c800 	call	8000c80 <__mulsi3>
 800d848:	8085883a 	add	r2,r16,r2
 800d84c:	10800204 	addi	r2,r2,8
 800d850:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d854:	10000b0e 	bge	r2,zero,800d884 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800d858:	01400304 	movi	r5,12
 800d85c:	e13ffd17 	ldw	r4,-12(fp)
 800d860:	8000c800 	call	8000c80 <__mulsi3>
 800d864:	1007883a 	mov	r3,r2
 800d868:	00820074 	movhi	r2,2049
 800d86c:	10809304 	addi	r2,r2,588
 800d870:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d874:	e0bffe17 	ldw	r2,-8(fp)
 800d878:	18800226 	beq	r3,r2,800d884 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800d87c:	00bffcc4 	movi	r2,-13
 800d880:	00000806 	br	800d8a4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d884:	e0bffd17 	ldw	r2,-12(fp)
 800d888:	10800044 	addi	r2,r2,1
 800d88c:	e0bffd15 	stw	r2,-12(fp)
 800d890:	d0a00c17 	ldw	r2,-32720(gp)
 800d894:	1007883a 	mov	r3,r2
 800d898:	e0bffd17 	ldw	r2,-12(fp)
 800d89c:	18bfd92e 	bgeu	r3,r2,800d804 <__alt_data_end+0xfc00d804>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d8a0:	0005883a 	mov	r2,zero
}
 800d8a4:	e6ffff04 	addi	sp,fp,-4
 800d8a8:	dfc00217 	ldw	ra,8(sp)
 800d8ac:	df000117 	ldw	fp,4(sp)
 800d8b0:	dc000017 	ldw	r16,0(sp)
 800d8b4:	dec00304 	addi	sp,sp,12
 800d8b8:	f800283a 	ret

0800d8bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d8bc:	defff604 	addi	sp,sp,-40
 800d8c0:	dfc00915 	stw	ra,36(sp)
 800d8c4:	df000815 	stw	fp,32(sp)
 800d8c8:	df000804 	addi	fp,sp,32
 800d8cc:	e13ffd15 	stw	r4,-12(fp)
 800d8d0:	e17ffe15 	stw	r5,-8(fp)
 800d8d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d8d8:	00bfffc4 	movi	r2,-1
 800d8dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800d8e0:	00bffb44 	movi	r2,-19
 800d8e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800d8e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d8ec:	d1600a04 	addi	r5,gp,-32728
 800d8f0:	e13ffd17 	ldw	r4,-12(fp)
 800d8f4:	800dc640 	call	800dc64 <alt_find_dev>
 800d8f8:	e0bff815 	stw	r2,-32(fp)
 800d8fc:	e0bff817 	ldw	r2,-32(fp)
 800d900:	1000051e 	bne	r2,zero,800d918 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d904:	e13ffd17 	ldw	r4,-12(fp)
 800d908:	800dcf40 	call	800dcf4 <alt_find_file>
 800d90c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800d910:	00800044 	movi	r2,1
 800d914:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d918:	e0bff817 	ldw	r2,-32(fp)
 800d91c:	10002b26 	beq	r2,zero,800d9cc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d920:	e13ff817 	ldw	r4,-32(fp)
 800d924:	800ddfc0 	call	800ddfc <alt_get_fd>
 800d928:	e0bff915 	stw	r2,-28(fp)
 800d92c:	e0bff917 	ldw	r2,-28(fp)
 800d930:	1000030e 	bge	r2,zero,800d940 <open+0x84>
    {
      status = index;
 800d934:	e0bff917 	ldw	r2,-28(fp)
 800d938:	e0bffa15 	stw	r2,-24(fp)
 800d93c:	00002506 	br	800d9d4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d940:	01400304 	movi	r5,12
 800d944:	e13ff917 	ldw	r4,-28(fp)
 800d948:	8000c800 	call	8000c80 <__mulsi3>
 800d94c:	1007883a 	mov	r3,r2
 800d950:	00820074 	movhi	r2,2049
 800d954:	10809304 	addi	r2,r2,588
 800d958:	1885883a 	add	r2,r3,r2
 800d95c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d960:	e0fffe17 	ldw	r3,-8(fp)
 800d964:	00900034 	movhi	r2,16384
 800d968:	10bfffc4 	addi	r2,r2,-1
 800d96c:	1886703a 	and	r3,r3,r2
 800d970:	e0bffc17 	ldw	r2,-16(fp)
 800d974:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d978:	e0bffb17 	ldw	r2,-20(fp)
 800d97c:	1000051e 	bne	r2,zero,800d994 <open+0xd8>
 800d980:	e13ffc17 	ldw	r4,-16(fp)
 800d984:	800d7d00 	call	800d7d0 <alt_file_locked>
 800d988:	e0bffa15 	stw	r2,-24(fp)
 800d98c:	e0bffa17 	ldw	r2,-24(fp)
 800d990:	10001016 	blt	r2,zero,800d9d4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d994:	e0bff817 	ldw	r2,-32(fp)
 800d998:	10800317 	ldw	r2,12(r2)
 800d99c:	10000826 	beq	r2,zero,800d9c0 <open+0x104>
 800d9a0:	e0bff817 	ldw	r2,-32(fp)
 800d9a4:	10800317 	ldw	r2,12(r2)
 800d9a8:	e1ffff17 	ldw	r7,-4(fp)
 800d9ac:	e1bffe17 	ldw	r6,-8(fp)
 800d9b0:	e17ffd17 	ldw	r5,-12(fp)
 800d9b4:	e13ffc17 	ldw	r4,-16(fp)
 800d9b8:	103ee83a 	callr	r2
 800d9bc:	00000106 	br	800d9c4 <open+0x108>
 800d9c0:	0005883a 	mov	r2,zero
 800d9c4:	e0bffa15 	stw	r2,-24(fp)
 800d9c8:	00000206 	br	800d9d4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d9cc:	00bffb44 	movi	r2,-19
 800d9d0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d9d4:	e0bffa17 	ldw	r2,-24(fp)
 800d9d8:	1000090e 	bge	r2,zero,800da00 <open+0x144>
  {
    alt_release_fd (index);  
 800d9dc:	e13ff917 	ldw	r4,-28(fp)
 800d9e0:	800da180 	call	800da18 <alt_release_fd>
    ALT_ERRNO = -status;
 800d9e4:	800d7940 	call	800d794 <alt_get_errno>
 800d9e8:	1007883a 	mov	r3,r2
 800d9ec:	e0bffa17 	ldw	r2,-24(fp)
 800d9f0:	0085c83a 	sub	r2,zero,r2
 800d9f4:	18800015 	stw	r2,0(r3)
    return -1;
 800d9f8:	00bfffc4 	movi	r2,-1
 800d9fc:	00000106 	br	800da04 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800da00:	e0bff917 	ldw	r2,-28(fp)
}
 800da04:	e037883a 	mov	sp,fp
 800da08:	dfc00117 	ldw	ra,4(sp)
 800da0c:	df000017 	ldw	fp,0(sp)
 800da10:	dec00204 	addi	sp,sp,8
 800da14:	f800283a 	ret

0800da18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800da18:	defffc04 	addi	sp,sp,-16
 800da1c:	dfc00315 	stw	ra,12(sp)
 800da20:	df000215 	stw	fp,8(sp)
 800da24:	dc000115 	stw	r16,4(sp)
 800da28:	df000204 	addi	fp,sp,8
 800da2c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800da30:	e0bffe17 	ldw	r2,-8(fp)
 800da34:	108000d0 	cmplti	r2,r2,3
 800da38:	1000111e 	bne	r2,zero,800da80 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800da3c:	04020074 	movhi	r16,2049
 800da40:	84009304 	addi	r16,r16,588
 800da44:	e0bffe17 	ldw	r2,-8(fp)
 800da48:	01400304 	movi	r5,12
 800da4c:	1009883a 	mov	r4,r2
 800da50:	8000c800 	call	8000c80 <__mulsi3>
 800da54:	8085883a 	add	r2,r16,r2
 800da58:	10800204 	addi	r2,r2,8
 800da5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800da60:	04020074 	movhi	r16,2049
 800da64:	84009304 	addi	r16,r16,588
 800da68:	e0bffe17 	ldw	r2,-8(fp)
 800da6c:	01400304 	movi	r5,12
 800da70:	1009883a 	mov	r4,r2
 800da74:	8000c800 	call	8000c80 <__mulsi3>
 800da78:	8085883a 	add	r2,r16,r2
 800da7c:	10000015 	stw	zero,0(r2)
  }
}
 800da80:	0001883a 	nop
 800da84:	e6ffff04 	addi	sp,fp,-4
 800da88:	dfc00217 	ldw	ra,8(sp)
 800da8c:	df000117 	ldw	fp,4(sp)
 800da90:	dc000017 	ldw	r16,0(sp)
 800da94:	dec00304 	addi	sp,sp,12
 800da98:	f800283a 	ret

0800da9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800da9c:	defffa04 	addi	sp,sp,-24
 800daa0:	df000515 	stw	fp,20(sp)
 800daa4:	df000504 	addi	fp,sp,20
 800daa8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800daac:	0005303a 	rdctl	r2,status
 800dab0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dab4:	e0fffc17 	ldw	r3,-16(fp)
 800dab8:	00bfff84 	movi	r2,-2
 800dabc:	1884703a 	and	r2,r3,r2
 800dac0:	1001703a 	wrctl	status,r2
  
  return context;
 800dac4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800dac8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800dacc:	e0bfff17 	ldw	r2,-4(fp)
 800dad0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800dad4:	e0bffd17 	ldw	r2,-12(fp)
 800dad8:	10800017 	ldw	r2,0(r2)
 800dadc:	e0fffd17 	ldw	r3,-12(fp)
 800dae0:	18c00117 	ldw	r3,4(r3)
 800dae4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800dae8:	e0bffd17 	ldw	r2,-12(fp)
 800daec:	10800117 	ldw	r2,4(r2)
 800daf0:	e0fffd17 	ldw	r3,-12(fp)
 800daf4:	18c00017 	ldw	r3,0(r3)
 800daf8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800dafc:	e0bffd17 	ldw	r2,-12(fp)
 800db00:	e0fffd17 	ldw	r3,-12(fp)
 800db04:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800db08:	e0bffd17 	ldw	r2,-12(fp)
 800db0c:	e0fffd17 	ldw	r3,-12(fp)
 800db10:	10c00015 	stw	r3,0(r2)
 800db14:	e0bffb17 	ldw	r2,-20(fp)
 800db18:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db1c:	e0bffe17 	ldw	r2,-8(fp)
 800db20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800db24:	0001883a 	nop
 800db28:	e037883a 	mov	sp,fp
 800db2c:	df000017 	ldw	fp,0(sp)
 800db30:	dec00104 	addi	sp,sp,4
 800db34:	f800283a 	ret

0800db38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800db38:	defffb04 	addi	sp,sp,-20
 800db3c:	dfc00415 	stw	ra,16(sp)
 800db40:	df000315 	stw	fp,12(sp)
 800db44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800db48:	d0a00f17 	ldw	r2,-32708(gp)
 800db4c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800db50:	d0a79117 	ldw	r2,-25020(gp)
 800db54:	10800044 	addi	r2,r2,1
 800db58:	d0a79115 	stw	r2,-25020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800db5c:	00002e06 	br	800dc18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800db60:	e0bffd17 	ldw	r2,-12(fp)
 800db64:	10800017 	ldw	r2,0(r2)
 800db68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800db6c:	e0bffd17 	ldw	r2,-12(fp)
 800db70:	10800403 	ldbu	r2,16(r2)
 800db74:	10803fcc 	andi	r2,r2,255
 800db78:	10000426 	beq	r2,zero,800db8c <alt_tick+0x54>
 800db7c:	d0a79117 	ldw	r2,-25020(gp)
 800db80:	1000021e 	bne	r2,zero,800db8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800db84:	e0bffd17 	ldw	r2,-12(fp)
 800db88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800db8c:	e0bffd17 	ldw	r2,-12(fp)
 800db90:	10800217 	ldw	r2,8(r2)
 800db94:	d0e79117 	ldw	r3,-25020(gp)
 800db98:	18801d36 	bltu	r3,r2,800dc10 <alt_tick+0xd8>
 800db9c:	e0bffd17 	ldw	r2,-12(fp)
 800dba0:	10800403 	ldbu	r2,16(r2)
 800dba4:	10803fcc 	andi	r2,r2,255
 800dba8:	1000191e 	bne	r2,zero,800dc10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800dbac:	e0bffd17 	ldw	r2,-12(fp)
 800dbb0:	10800317 	ldw	r2,12(r2)
 800dbb4:	e0fffd17 	ldw	r3,-12(fp)
 800dbb8:	18c00517 	ldw	r3,20(r3)
 800dbbc:	1809883a 	mov	r4,r3
 800dbc0:	103ee83a 	callr	r2
 800dbc4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800dbc8:	e0bfff17 	ldw	r2,-4(fp)
 800dbcc:	1000031e 	bne	r2,zero,800dbdc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800dbd0:	e13ffd17 	ldw	r4,-12(fp)
 800dbd4:	800da9c0 	call	800da9c <alt_alarm_stop>
 800dbd8:	00000d06 	br	800dc10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800dbdc:	e0bffd17 	ldw	r2,-12(fp)
 800dbe0:	10c00217 	ldw	r3,8(r2)
 800dbe4:	e0bfff17 	ldw	r2,-4(fp)
 800dbe8:	1887883a 	add	r3,r3,r2
 800dbec:	e0bffd17 	ldw	r2,-12(fp)
 800dbf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800dbf4:	e0bffd17 	ldw	r2,-12(fp)
 800dbf8:	10c00217 	ldw	r3,8(r2)
 800dbfc:	d0a79117 	ldw	r2,-25020(gp)
 800dc00:	1880032e 	bgeu	r3,r2,800dc10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800dc04:	e0bffd17 	ldw	r2,-12(fp)
 800dc08:	00c00044 	movi	r3,1
 800dc0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800dc10:	e0bffe17 	ldw	r2,-8(fp)
 800dc14:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800dc18:	e0fffd17 	ldw	r3,-12(fp)
 800dc1c:	d0a00f04 	addi	r2,gp,-32708
 800dc20:	18bfcf1e 	bne	r3,r2,800db60 <__alt_data_end+0xfc00db60>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800dc24:	0001883a 	nop
}
 800dc28:	0001883a 	nop
 800dc2c:	e037883a 	mov	sp,fp
 800dc30:	dfc00117 	ldw	ra,4(sp)
 800dc34:	df000017 	ldw	fp,0(sp)
 800dc38:	dec00204 	addi	sp,sp,8
 800dc3c:	f800283a 	ret

0800dc40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800dc40:	deffff04 	addi	sp,sp,-4
 800dc44:	df000015 	stw	fp,0(sp)
 800dc48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800dc4c:	000170fa 	wrctl	ienable,zero
}
 800dc50:	0001883a 	nop
 800dc54:	e037883a 	mov	sp,fp
 800dc58:	df000017 	ldw	fp,0(sp)
 800dc5c:	dec00104 	addi	sp,sp,4
 800dc60:	f800283a 	ret

0800dc64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800dc64:	defffa04 	addi	sp,sp,-24
 800dc68:	dfc00515 	stw	ra,20(sp)
 800dc6c:	df000415 	stw	fp,16(sp)
 800dc70:	df000404 	addi	fp,sp,16
 800dc74:	e13ffe15 	stw	r4,-8(fp)
 800dc78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800dc7c:	e0bfff17 	ldw	r2,-4(fp)
 800dc80:	10800017 	ldw	r2,0(r2)
 800dc84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800dc88:	e13ffe17 	ldw	r4,-8(fp)
 800dc8c:	8000de80 	call	8000de8 <strlen>
 800dc90:	10800044 	addi	r2,r2,1
 800dc94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800dc98:	00000d06 	br	800dcd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800dc9c:	e0bffc17 	ldw	r2,-16(fp)
 800dca0:	10800217 	ldw	r2,8(r2)
 800dca4:	e0fffd17 	ldw	r3,-12(fp)
 800dca8:	180d883a 	mov	r6,r3
 800dcac:	e17ffe17 	ldw	r5,-8(fp)
 800dcb0:	1009883a 	mov	r4,r2
 800dcb4:	800dfa80 	call	800dfa8 <memcmp>
 800dcb8:	1000021e 	bne	r2,zero,800dcc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800dcbc:	e0bffc17 	ldw	r2,-16(fp)
 800dcc0:	00000706 	br	800dce0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800dcc4:	e0bffc17 	ldw	r2,-16(fp)
 800dcc8:	10800017 	ldw	r2,0(r2)
 800dccc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800dcd0:	e0fffc17 	ldw	r3,-16(fp)
 800dcd4:	e0bfff17 	ldw	r2,-4(fp)
 800dcd8:	18bff01e 	bne	r3,r2,800dc9c <__alt_data_end+0xfc00dc9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800dcdc:	0005883a 	mov	r2,zero
}
 800dce0:	e037883a 	mov	sp,fp
 800dce4:	dfc00117 	ldw	ra,4(sp)
 800dce8:	df000017 	ldw	fp,0(sp)
 800dcec:	dec00204 	addi	sp,sp,8
 800dcf0:	f800283a 	ret

0800dcf4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800dcf4:	defffb04 	addi	sp,sp,-20
 800dcf8:	dfc00415 	stw	ra,16(sp)
 800dcfc:	df000315 	stw	fp,12(sp)
 800dd00:	df000304 	addi	fp,sp,12
 800dd04:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800dd08:	d0a00817 	ldw	r2,-32736(gp)
 800dd0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800dd10:	00003106 	br	800ddd8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800dd14:	e0bffd17 	ldw	r2,-12(fp)
 800dd18:	10800217 	ldw	r2,8(r2)
 800dd1c:	1009883a 	mov	r4,r2
 800dd20:	8000de80 	call	8000de8 <strlen>
 800dd24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800dd28:	e0bffd17 	ldw	r2,-12(fp)
 800dd2c:	10c00217 	ldw	r3,8(r2)
 800dd30:	e0bffe17 	ldw	r2,-8(fp)
 800dd34:	10bfffc4 	addi	r2,r2,-1
 800dd38:	1885883a 	add	r2,r3,r2
 800dd3c:	10800003 	ldbu	r2,0(r2)
 800dd40:	10803fcc 	andi	r2,r2,255
 800dd44:	1080201c 	xori	r2,r2,128
 800dd48:	10bfe004 	addi	r2,r2,-128
 800dd4c:	10800bd8 	cmpnei	r2,r2,47
 800dd50:	1000031e 	bne	r2,zero,800dd60 <alt_find_file+0x6c>
    {
      len -= 1;
 800dd54:	e0bffe17 	ldw	r2,-8(fp)
 800dd58:	10bfffc4 	addi	r2,r2,-1
 800dd5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800dd60:	e0bffe17 	ldw	r2,-8(fp)
 800dd64:	e0ffff17 	ldw	r3,-4(fp)
 800dd68:	1885883a 	add	r2,r3,r2
 800dd6c:	10800003 	ldbu	r2,0(r2)
 800dd70:	10803fcc 	andi	r2,r2,255
 800dd74:	1080201c 	xori	r2,r2,128
 800dd78:	10bfe004 	addi	r2,r2,-128
 800dd7c:	10800be0 	cmpeqi	r2,r2,47
 800dd80:	1000081e 	bne	r2,zero,800dda4 <alt_find_file+0xb0>
 800dd84:	e0bffe17 	ldw	r2,-8(fp)
 800dd88:	e0ffff17 	ldw	r3,-4(fp)
 800dd8c:	1885883a 	add	r2,r3,r2
 800dd90:	10800003 	ldbu	r2,0(r2)
 800dd94:	10803fcc 	andi	r2,r2,255
 800dd98:	1080201c 	xori	r2,r2,128
 800dd9c:	10bfe004 	addi	r2,r2,-128
 800dda0:	10000a1e 	bne	r2,zero,800ddcc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800dda4:	e0bffd17 	ldw	r2,-12(fp)
 800dda8:	10800217 	ldw	r2,8(r2)
 800ddac:	e0fffe17 	ldw	r3,-8(fp)
 800ddb0:	180d883a 	mov	r6,r3
 800ddb4:	e17fff17 	ldw	r5,-4(fp)
 800ddb8:	1009883a 	mov	r4,r2
 800ddbc:	800dfa80 	call	800dfa8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ddc0:	1000021e 	bne	r2,zero,800ddcc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800ddc4:	e0bffd17 	ldw	r2,-12(fp)
 800ddc8:	00000706 	br	800dde8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800ddcc:	e0bffd17 	ldw	r2,-12(fp)
 800ddd0:	10800017 	ldw	r2,0(r2)
 800ddd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ddd8:	e0fffd17 	ldw	r3,-12(fp)
 800dddc:	d0a00804 	addi	r2,gp,-32736
 800dde0:	18bfcc1e 	bne	r3,r2,800dd14 <__alt_data_end+0xfc00dd14>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800dde4:	0005883a 	mov	r2,zero
}
 800dde8:	e037883a 	mov	sp,fp
 800ddec:	dfc00117 	ldw	ra,4(sp)
 800ddf0:	df000017 	ldw	fp,0(sp)
 800ddf4:	dec00204 	addi	sp,sp,8
 800ddf8:	f800283a 	ret

0800ddfc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ddfc:	defffa04 	addi	sp,sp,-24
 800de00:	dfc00515 	stw	ra,20(sp)
 800de04:	df000415 	stw	fp,16(sp)
 800de08:	dc000315 	stw	r16,12(sp)
 800de0c:	df000404 	addi	fp,sp,16
 800de10:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800de14:	00bffa04 	movi	r2,-24
 800de18:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800de1c:	e03ffc15 	stw	zero,-16(fp)
 800de20:	00001d06 	br	800de98 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800de24:	04020074 	movhi	r16,2049
 800de28:	84009304 	addi	r16,r16,588
 800de2c:	e0bffc17 	ldw	r2,-16(fp)
 800de30:	01400304 	movi	r5,12
 800de34:	1009883a 	mov	r4,r2
 800de38:	8000c800 	call	8000c80 <__mulsi3>
 800de3c:	8085883a 	add	r2,r16,r2
 800de40:	10800017 	ldw	r2,0(r2)
 800de44:	1000111e 	bne	r2,zero,800de8c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800de48:	04020074 	movhi	r16,2049
 800de4c:	84009304 	addi	r16,r16,588
 800de50:	e0bffc17 	ldw	r2,-16(fp)
 800de54:	01400304 	movi	r5,12
 800de58:	1009883a 	mov	r4,r2
 800de5c:	8000c800 	call	8000c80 <__mulsi3>
 800de60:	8085883a 	add	r2,r16,r2
 800de64:	e0fffe17 	ldw	r3,-8(fp)
 800de68:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800de6c:	d0e00c17 	ldw	r3,-32720(gp)
 800de70:	e0bffc17 	ldw	r2,-16(fp)
 800de74:	1880020e 	bge	r3,r2,800de80 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800de78:	e0bffc17 	ldw	r2,-16(fp)
 800de7c:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 800de80:	e0bffc17 	ldw	r2,-16(fp)
 800de84:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800de88:	00000606 	br	800dea4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800de8c:	e0bffc17 	ldw	r2,-16(fp)
 800de90:	10800044 	addi	r2,r2,1
 800de94:	e0bffc15 	stw	r2,-16(fp)
 800de98:	e0bffc17 	ldw	r2,-16(fp)
 800de9c:	10800810 	cmplti	r2,r2,32
 800dea0:	103fe01e 	bne	r2,zero,800de24 <__alt_data_end+0xfc00de24>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800dea4:	e0bffd17 	ldw	r2,-12(fp)
}
 800dea8:	e6ffff04 	addi	sp,fp,-4
 800deac:	dfc00217 	ldw	ra,8(sp)
 800deb0:	df000117 	ldw	fp,4(sp)
 800deb4:	dc000017 	ldw	r16,0(sp)
 800deb8:	dec00304 	addi	sp,sp,12
 800debc:	f800283a 	ret

0800dec0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800dec0:	defffe04 	addi	sp,sp,-8
 800dec4:	df000115 	stw	fp,4(sp)
 800dec8:	df000104 	addi	fp,sp,4
 800decc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800ded0:	e0bfff17 	ldw	r2,-4(fp)
 800ded4:	10bffe84 	addi	r2,r2,-6
 800ded8:	10c00428 	cmpgeui	r3,r2,16
 800dedc:	18001a1e 	bne	r3,zero,800df48 <alt_exception_cause_generated_bad_addr+0x88>
 800dee0:	100690ba 	slli	r3,r2,2
 800dee4:	00820074 	movhi	r2,2049
 800dee8:	10b7be04 	addi	r2,r2,-8456
 800deec:	1885883a 	add	r2,r3,r2
 800def0:	10800017 	ldw	r2,0(r2)
 800def4:	1000683a 	jmp	r2
 800def8:	0800df38 	rdprs	zero,at,892
 800defc:	0800df38 	rdprs	zero,at,892
 800df00:	0800df48 	cmpgei	zero,at,893
 800df04:	0800df48 	cmpgei	zero,at,893
 800df08:	0800df48 	cmpgei	zero,at,893
 800df0c:	0800df38 	rdprs	zero,at,892
 800df10:	0800df40 	call	800df4 <__alt_mem_onchip_memory2_0+0x800df4>
 800df14:	0800df48 	cmpgei	zero,at,893
 800df18:	0800df38 	rdprs	zero,at,892
 800df1c:	0800df38 	rdprs	zero,at,892
 800df20:	0800df48 	cmpgei	zero,at,893
 800df24:	0800df38 	rdprs	zero,at,892
 800df28:	0800df40 	call	800df4 <__alt_mem_onchip_memory2_0+0x800df4>
 800df2c:	0800df48 	cmpgei	zero,at,893
 800df30:	0800df48 	cmpgei	zero,at,893
 800df34:	0800df38 	rdprs	zero,at,892
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800df38:	00800044 	movi	r2,1
 800df3c:	00000306 	br	800df4c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800df40:	0005883a 	mov	r2,zero
 800df44:	00000106 	br	800df4c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800df48:	0005883a 	mov	r2,zero
  }
}
 800df4c:	e037883a 	mov	sp,fp
 800df50:	df000017 	ldw	fp,0(sp)
 800df54:	dec00104 	addi	sp,sp,4
 800df58:	f800283a 	ret

0800df5c <atexit>:
 800df5c:	200b883a 	mov	r5,r4
 800df60:	000f883a 	mov	r7,zero
 800df64:	000d883a 	mov	r6,zero
 800df68:	0009883a 	mov	r4,zero
 800df6c:	800e0241 	jmpi	800e024 <__register_exitproc>

0800df70 <exit>:
 800df70:	defffe04 	addi	sp,sp,-8
 800df74:	000b883a 	mov	r5,zero
 800df78:	dc000015 	stw	r16,0(sp)
 800df7c:	dfc00115 	stw	ra,4(sp)
 800df80:	2021883a 	mov	r16,r4
 800df84:	800e13c0 	call	800e13c <__call_exitprocs>
 800df88:	00820074 	movhi	r2,2049
 800df8c:	1080f504 	addi	r2,r2,980
 800df90:	11000017 	ldw	r4,0(r2)
 800df94:	20800f17 	ldw	r2,60(r4)
 800df98:	10000126 	beq	r2,zero,800dfa0 <exit+0x30>
 800df9c:	103ee83a 	callr	r2
 800dfa0:	8009883a 	mov	r4,r16
 800dfa4:	800e2bc0 	call	800e2bc <_exit>

0800dfa8 <memcmp>:
 800dfa8:	01c000c4 	movi	r7,3
 800dfac:	3980192e 	bgeu	r7,r6,800e014 <memcmp+0x6c>
 800dfb0:	2144b03a 	or	r2,r4,r5
 800dfb4:	11c4703a 	and	r2,r2,r7
 800dfb8:	10000f26 	beq	r2,zero,800dff8 <memcmp+0x50>
 800dfbc:	20800003 	ldbu	r2,0(r4)
 800dfc0:	28c00003 	ldbu	r3,0(r5)
 800dfc4:	10c0151e 	bne	r2,r3,800e01c <memcmp+0x74>
 800dfc8:	31bfff84 	addi	r6,r6,-2
 800dfcc:	01ffffc4 	movi	r7,-1
 800dfd0:	00000406 	br	800dfe4 <memcmp+0x3c>
 800dfd4:	20800003 	ldbu	r2,0(r4)
 800dfd8:	28c00003 	ldbu	r3,0(r5)
 800dfdc:	31bfffc4 	addi	r6,r6,-1
 800dfe0:	10c00e1e 	bne	r2,r3,800e01c <memcmp+0x74>
 800dfe4:	21000044 	addi	r4,r4,1
 800dfe8:	29400044 	addi	r5,r5,1
 800dfec:	31fff91e 	bne	r6,r7,800dfd4 <__alt_data_end+0xfc00dfd4>
 800dff0:	0005883a 	mov	r2,zero
 800dff4:	f800283a 	ret
 800dff8:	20c00017 	ldw	r3,0(r4)
 800dffc:	28800017 	ldw	r2,0(r5)
 800e000:	18bfee1e 	bne	r3,r2,800dfbc <__alt_data_end+0xfc00dfbc>
 800e004:	31bfff04 	addi	r6,r6,-4
 800e008:	21000104 	addi	r4,r4,4
 800e00c:	29400104 	addi	r5,r5,4
 800e010:	39bff936 	bltu	r7,r6,800dff8 <__alt_data_end+0xfc00dff8>
 800e014:	303fe91e 	bne	r6,zero,800dfbc <__alt_data_end+0xfc00dfbc>
 800e018:	003ff506 	br	800dff0 <__alt_data_end+0xfc00dff0>
 800e01c:	10c5c83a 	sub	r2,r2,r3
 800e020:	f800283a 	ret

0800e024 <__register_exitproc>:
 800e024:	defffa04 	addi	sp,sp,-24
 800e028:	dc000315 	stw	r16,12(sp)
 800e02c:	04020074 	movhi	r16,2049
 800e030:	8400f504 	addi	r16,r16,980
 800e034:	80c00017 	ldw	r3,0(r16)
 800e038:	dc400415 	stw	r17,16(sp)
 800e03c:	dfc00515 	stw	ra,20(sp)
 800e040:	18805217 	ldw	r2,328(r3)
 800e044:	2023883a 	mov	r17,r4
 800e048:	10003726 	beq	r2,zero,800e128 <__register_exitproc+0x104>
 800e04c:	10c00117 	ldw	r3,4(r2)
 800e050:	010007c4 	movi	r4,31
 800e054:	20c00e16 	blt	r4,r3,800e090 <__register_exitproc+0x6c>
 800e058:	1a000044 	addi	r8,r3,1
 800e05c:	8800221e 	bne	r17,zero,800e0e8 <__register_exitproc+0xc4>
 800e060:	18c00084 	addi	r3,r3,2
 800e064:	18c7883a 	add	r3,r3,r3
 800e068:	18c7883a 	add	r3,r3,r3
 800e06c:	12000115 	stw	r8,4(r2)
 800e070:	10c7883a 	add	r3,r2,r3
 800e074:	19400015 	stw	r5,0(r3)
 800e078:	0005883a 	mov	r2,zero
 800e07c:	dfc00517 	ldw	ra,20(sp)
 800e080:	dc400417 	ldw	r17,16(sp)
 800e084:	dc000317 	ldw	r16,12(sp)
 800e088:	dec00604 	addi	sp,sp,24
 800e08c:	f800283a 	ret
 800e090:	00800034 	movhi	r2,0
 800e094:	10800004 	addi	r2,r2,0
 800e098:	10002626 	beq	r2,zero,800e134 <__register_exitproc+0x110>
 800e09c:	01006404 	movi	r4,400
 800e0a0:	d9400015 	stw	r5,0(sp)
 800e0a4:	d9800115 	stw	r6,4(sp)
 800e0a8:	d9c00215 	stw	r7,8(sp)
 800e0ac:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800e0b0:	d9400017 	ldw	r5,0(sp)
 800e0b4:	d9800117 	ldw	r6,4(sp)
 800e0b8:	d9c00217 	ldw	r7,8(sp)
 800e0bc:	10001d26 	beq	r2,zero,800e134 <__register_exitproc+0x110>
 800e0c0:	81000017 	ldw	r4,0(r16)
 800e0c4:	10000115 	stw	zero,4(r2)
 800e0c8:	02000044 	movi	r8,1
 800e0cc:	22405217 	ldw	r9,328(r4)
 800e0d0:	0007883a 	mov	r3,zero
 800e0d4:	12400015 	stw	r9,0(r2)
 800e0d8:	20805215 	stw	r2,328(r4)
 800e0dc:	10006215 	stw	zero,392(r2)
 800e0e0:	10006315 	stw	zero,396(r2)
 800e0e4:	883fde26 	beq	r17,zero,800e060 <__alt_data_end+0xfc00e060>
 800e0e8:	18c9883a 	add	r4,r3,r3
 800e0ec:	2109883a 	add	r4,r4,r4
 800e0f0:	1109883a 	add	r4,r2,r4
 800e0f4:	21802215 	stw	r6,136(r4)
 800e0f8:	01800044 	movi	r6,1
 800e0fc:	12406217 	ldw	r9,392(r2)
 800e100:	30cc983a 	sll	r6,r6,r3
 800e104:	4992b03a 	or	r9,r9,r6
 800e108:	12406215 	stw	r9,392(r2)
 800e10c:	21c04215 	stw	r7,264(r4)
 800e110:	01000084 	movi	r4,2
 800e114:	893fd21e 	bne	r17,r4,800e060 <__alt_data_end+0xfc00e060>
 800e118:	11006317 	ldw	r4,396(r2)
 800e11c:	218cb03a 	or	r6,r4,r6
 800e120:	11806315 	stw	r6,396(r2)
 800e124:	003fce06 	br	800e060 <__alt_data_end+0xfc00e060>
 800e128:	18805304 	addi	r2,r3,332
 800e12c:	18805215 	stw	r2,328(r3)
 800e130:	003fc606 	br	800e04c <__alt_data_end+0xfc00e04c>
 800e134:	00bfffc4 	movi	r2,-1
 800e138:	003fd006 	br	800e07c <__alt_data_end+0xfc00e07c>

0800e13c <__call_exitprocs>:
 800e13c:	defff504 	addi	sp,sp,-44
 800e140:	df000915 	stw	fp,36(sp)
 800e144:	dd400615 	stw	r21,24(sp)
 800e148:	dc800315 	stw	r18,12(sp)
 800e14c:	dfc00a15 	stw	ra,40(sp)
 800e150:	ddc00815 	stw	r23,32(sp)
 800e154:	dd800715 	stw	r22,28(sp)
 800e158:	dd000515 	stw	r20,20(sp)
 800e15c:	dcc00415 	stw	r19,16(sp)
 800e160:	dc400215 	stw	r17,8(sp)
 800e164:	dc000115 	stw	r16,4(sp)
 800e168:	d9000015 	stw	r4,0(sp)
 800e16c:	2839883a 	mov	fp,r5
 800e170:	04800044 	movi	r18,1
 800e174:	057fffc4 	movi	r21,-1
 800e178:	00820074 	movhi	r2,2049
 800e17c:	1080f504 	addi	r2,r2,980
 800e180:	12000017 	ldw	r8,0(r2)
 800e184:	45005217 	ldw	r20,328(r8)
 800e188:	44c05204 	addi	r19,r8,328
 800e18c:	a0001c26 	beq	r20,zero,800e200 <__call_exitprocs+0xc4>
 800e190:	a0800117 	ldw	r2,4(r20)
 800e194:	15ffffc4 	addi	r23,r2,-1
 800e198:	b8000d16 	blt	r23,zero,800e1d0 <__call_exitprocs+0x94>
 800e19c:	14000044 	addi	r16,r2,1
 800e1a0:	8421883a 	add	r16,r16,r16
 800e1a4:	8421883a 	add	r16,r16,r16
 800e1a8:	84402004 	addi	r17,r16,128
 800e1ac:	a463883a 	add	r17,r20,r17
 800e1b0:	a421883a 	add	r16,r20,r16
 800e1b4:	e0001e26 	beq	fp,zero,800e230 <__call_exitprocs+0xf4>
 800e1b8:	80804017 	ldw	r2,256(r16)
 800e1bc:	e0801c26 	beq	fp,r2,800e230 <__call_exitprocs+0xf4>
 800e1c0:	bdffffc4 	addi	r23,r23,-1
 800e1c4:	843fff04 	addi	r16,r16,-4
 800e1c8:	8c7fff04 	addi	r17,r17,-4
 800e1cc:	bd7ff91e 	bne	r23,r21,800e1b4 <__alt_data_end+0xfc00e1b4>
 800e1d0:	00800034 	movhi	r2,0
 800e1d4:	10800004 	addi	r2,r2,0
 800e1d8:	10000926 	beq	r2,zero,800e200 <__call_exitprocs+0xc4>
 800e1dc:	a0800117 	ldw	r2,4(r20)
 800e1e0:	1000301e 	bne	r2,zero,800e2a4 <__call_exitprocs+0x168>
 800e1e4:	a0800017 	ldw	r2,0(r20)
 800e1e8:	10003226 	beq	r2,zero,800e2b4 <__call_exitprocs+0x178>
 800e1ec:	a009883a 	mov	r4,r20
 800e1f0:	98800015 	stw	r2,0(r19)
 800e1f4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800e1f8:	9d000017 	ldw	r20,0(r19)
 800e1fc:	a03fe41e 	bne	r20,zero,800e190 <__alt_data_end+0xfc00e190>
 800e200:	dfc00a17 	ldw	ra,40(sp)
 800e204:	df000917 	ldw	fp,36(sp)
 800e208:	ddc00817 	ldw	r23,32(sp)
 800e20c:	dd800717 	ldw	r22,28(sp)
 800e210:	dd400617 	ldw	r21,24(sp)
 800e214:	dd000517 	ldw	r20,20(sp)
 800e218:	dcc00417 	ldw	r19,16(sp)
 800e21c:	dc800317 	ldw	r18,12(sp)
 800e220:	dc400217 	ldw	r17,8(sp)
 800e224:	dc000117 	ldw	r16,4(sp)
 800e228:	dec00b04 	addi	sp,sp,44
 800e22c:	f800283a 	ret
 800e230:	a0800117 	ldw	r2,4(r20)
 800e234:	80c00017 	ldw	r3,0(r16)
 800e238:	10bfffc4 	addi	r2,r2,-1
 800e23c:	15c01426 	beq	r2,r23,800e290 <__call_exitprocs+0x154>
 800e240:	80000015 	stw	zero,0(r16)
 800e244:	183fde26 	beq	r3,zero,800e1c0 <__alt_data_end+0xfc00e1c0>
 800e248:	95c8983a 	sll	r4,r18,r23
 800e24c:	a0806217 	ldw	r2,392(r20)
 800e250:	a5800117 	ldw	r22,4(r20)
 800e254:	2084703a 	and	r2,r4,r2
 800e258:	10000b26 	beq	r2,zero,800e288 <__call_exitprocs+0x14c>
 800e25c:	a0806317 	ldw	r2,396(r20)
 800e260:	2088703a 	and	r4,r4,r2
 800e264:	20000c1e 	bne	r4,zero,800e298 <__call_exitprocs+0x15c>
 800e268:	89400017 	ldw	r5,0(r17)
 800e26c:	d9000017 	ldw	r4,0(sp)
 800e270:	183ee83a 	callr	r3
 800e274:	a0800117 	ldw	r2,4(r20)
 800e278:	15bfbf1e 	bne	r2,r22,800e178 <__alt_data_end+0xfc00e178>
 800e27c:	98800017 	ldw	r2,0(r19)
 800e280:	153fcf26 	beq	r2,r20,800e1c0 <__alt_data_end+0xfc00e1c0>
 800e284:	003fbc06 	br	800e178 <__alt_data_end+0xfc00e178>
 800e288:	183ee83a 	callr	r3
 800e28c:	003ff906 	br	800e274 <__alt_data_end+0xfc00e274>
 800e290:	a5c00115 	stw	r23,4(r20)
 800e294:	003feb06 	br	800e244 <__alt_data_end+0xfc00e244>
 800e298:	89000017 	ldw	r4,0(r17)
 800e29c:	183ee83a 	callr	r3
 800e2a0:	003ff406 	br	800e274 <__alt_data_end+0xfc00e274>
 800e2a4:	a0800017 	ldw	r2,0(r20)
 800e2a8:	a027883a 	mov	r19,r20
 800e2ac:	1029883a 	mov	r20,r2
 800e2b0:	003fb606 	br	800e18c <__alt_data_end+0xfc00e18c>
 800e2b4:	0005883a 	mov	r2,zero
 800e2b8:	003ffb06 	br	800e2a8 <__alt_data_end+0xfc00e2a8>

0800e2bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800e2bc:	defffd04 	addi	sp,sp,-12
 800e2c0:	df000215 	stw	fp,8(sp)
 800e2c4:	df000204 	addi	fp,sp,8
 800e2c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800e2cc:	0001883a 	nop
 800e2d0:	e0bfff17 	ldw	r2,-4(fp)
 800e2d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800e2d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800e2dc:	10000226 	beq	r2,zero,800e2e8 <_exit+0x2c>
    ALT_SIM_FAIL();
 800e2e0:	002af070 	cmpltui	zero,zero,43969
 800e2e4:	00000106 	br	800e2ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800e2e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800e2ec:	003fff06 	br	800e2ec <__alt_data_end+0xfc00e2ec>
